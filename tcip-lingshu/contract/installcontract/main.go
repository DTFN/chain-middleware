package main

import (
	"fmt"
	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/client"
	"github.com/FISCO-BCOS/go-sdk/conf"
	"github.com/ethereum/go-ethereum/common"
	"strings"
)

const (
	cabi = "[{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"CrossChainCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"CrossChainConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"CrossChainSave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"CrossChainTry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"value\",\"type\":\"string\"},{\"name\":\"flag\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"}],\"name\":\"Test\",\"type\":\"event\"}]"
	bin = "608060405234801561001057600080fd5b50610bc6806100206000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063746182b71461007257806375116b13146101215780637c2619291461018a578063d1666246146102d8578063eac718c414610387575b600080fd5b34801561007e57600080fd5b5061011f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103f0565b005b34801561012d57600080fd5b50610188600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610529565b005b34801561019657600080fd5b506101f1600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506105e1565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561023557808201518184015260208101905061021a565b50505050905090810190601f1680156102625780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561029b578082015181840152602081019050610280565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156102e457600080fd5b50610385600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506107fb565b005b34801561039357600080fd5b506103ee600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a3d565b005b806000836040518082805190602001908083835b6020831015156104295780518252602082019150602081019050602083039250610404565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061046f929190610af5565b506040805190810160405280600581526020017f66616c73650000000000000000000000000000000000000000000000000000008152506001836040518082805190602001908083835b6020831015156104de57805182526020820191506020810190506020830392506104b9565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610524929190610af5565b505050565b6040805190810160405280600681526020017f6661696c656400000000000000000000000000000000000000000000000000008152506001826040518082805190602001908083835b6020831015156105975780518252602082019150602081019050602083039250610572565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906105dd929190610af5565b5050565b6060806000836040518082805190602001908083835b60208310151561061c57805182526020820191506020810190506020830392506105f7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001846040518082805190602001908083835b6020831015156106875780518252602082019150602081019050602083039250610662565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b5050505050905091509150915091565b806000836040518082805190602001908083835b602083101515610834578051825260208201915060208101905060208303925061080f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061087a929190610af5565b506040805190810160405280600581526020017f66616c73650000000000000000000000000000000000000000000000000000008152506001836040518082805190602001908083835b6020831015156108e957805182526020820191506020810190506020830392506108c4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061092f929190610af5565b507f74cb234c0dd0ccac09c19041a69978ccb865f1f44a2877a009549898f6395b108282604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561099757808201518184015260208101905061097c565b50505050905090810190601f1680156109c45780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156109fd5780820151818401526020810190506109e2565b50505050905090810190601f168015610a2a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b6040805190810160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152506001826040518082805190602001908083835b602083101515610aab5780518252602082019150602081019050602083039250610a86565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610af1929190610af5565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b3657805160ff1916838001178555610b64565b82800160010185558215610b64579182015b82811115610b63578251825591602001919060010190610b48565b5b509050610b719190610b75565b5090565b610b9791905b80821115610b93576000816000905550600101610b7b565b5090565b905600a165627a7a723058208fd3b8a409b896830f9f8e335ab7489031d966972ad0672ce71fe83f45121d580029"
)

func main()  {
	configArr, err := conf.ParseConfigFile("sdk_config.toml")
	if err != nil {
		fmt.Printf("%s\n", err.Error())
		return
	}
	installConfig := &configArr[0]
	installClient, err := client.Dial(installConfig)
	if err != nil {
		fmt.Printf("%s\n", err.Error())
		return
	}

	installParsed, err := abi.JSON(strings.NewReader(cabi))
	if err != nil {
		fmt.Printf("%s\n", err.Error())
		return
	}
	// 安装合约1
	address, _, _, err := bind.DeployContract(installClient.GetTransactOpts(), installParsed, common.FromHex(bin), installClient)
	if err != nil {
		fmt.Printf("%s\n", err.Error())
		return
	}
	fmt.Printf("%s\n", address.Hex())
}