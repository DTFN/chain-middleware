plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group 'com.lingshu.fabric.agent'
version '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        // 允许不安全的HTTP协议
        allowInsecureProtocol true
        // 私有仓库地址
        url "http://192.168.1.2:8081/repository/maven-public/"
        // 仓库认证信息
        credentials {
            username 'maven'
            password '111'
        }
    }
    maven {
        allowInsecureProtocol true
        url "http://192.168.1.2:8081/repository/maven-snapshots/"
        credentials {
            username 'maven'
            password '111'
        }
    }
    maven { url 'https://repo.spring.io/plugins-release' }
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
}

dependencies {
    implementation 'org.yaml:snakeyaml:1.28'
    implementation ("org.hyperledger.fabric:fabric-gateway-java:2.2.8") {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    implementation('org.springframework.boot:spring-boot-starter-web:2.1.17.RELEASE')
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.38'

    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0')
    implementation 'com.h2database:h2:2.2.224'

    api 'com.baomidou:mybatis-plus-boot-starter:3.1.0'
    api "org.thymeleaf:thymeleaf:3.0.15.RELEASE"
    api 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
}

configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:23.0'
    }
}

test {
    useJUnitPlatform()
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
}

jar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"

    exclude "**/*.xml"
    exclude "**/*.properties"

    doLast {
        copy {
            from file("src/main/resources/")
            into "dist/conf"
        }
        copy {
            from configurations.runtimeClasspath
            into "dist/lib"
        }
        copy {
            from file("build/libs/")
            into "dist/apps"
        }
        copy {
            from file('script/')
            into "dist/script"
        }
        copy {
            from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh'))}
            into 'dist'
        }
    }
}

