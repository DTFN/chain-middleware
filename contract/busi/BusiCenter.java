package com.lingshu.chain.contract;

import com.lingshu.chain.sdk.client.IClient;
import com.lingshu.chain.sdk.codec.abi.func.FuncEncoder;
import com.lingshu.chain.sdk.codec.abi.func.FuncWasmEncoder;
import com.lingshu.chain.sdk.codec.datatypes.Address;
import com.lingshu.chain.sdk.codec.datatypes.Event;
import com.lingshu.chain.sdk.codec.datatypes.Function;
import com.lingshu.chain.sdk.codec.datatypes.Type;
import com.lingshu.chain.sdk.codec.datatypes.TypeReference;
import com.lingshu.chain.sdk.codec.datatypes.Utf8String;
import com.lingshu.chain.sdk.codec.datatypes.generated.Bytes32;
import com.lingshu.chain.sdk.codec.datatypes.generated.Int256;
import com.lingshu.chain.sdk.codec.datatypes.generated.Uint256;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import com.lingshu.chain.sdk.contract.Contract;
import com.lingshu.chain.sdk.crypto.CryptoSuite;
import com.lingshu.chain.sdk.crypto.key.CryptoKeyPair;
import com.lingshu.chain.sdk.evtsub.EvtSubCallback;
import com.lingshu.chain.sdk.model.CryptoType;
import com.lingshu.chain.sdk.model.TransactionCallback;
import com.lingshu.chain.sdk.model.TransactionReceipt;
import com.lingshu.chain.sdk.tx.common.VmTypeEnum;
import com.lingshu.chain.sdk.tx.common.exception.ContractException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class BusiCenter extends Contract {
    public static final String FUNC_TEST_CALL_DID = "test_call_did";

    public static final String FUNC_FIND_CHAR_NUMBER = "findCharNumber";

    public static final String FUNC_VALUE_BY_KEY = "valueByKey";

    public static final String FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER = "findAddressByMethodIdFromDidManager";

    public static final String FUNC_VERIFY_VC = "verifyVc";

    public static final String FUNC_ERC20_TRANSFER = "erc20Transfer";

    public static final String FUNC_GET_USED_VC = "getUsedVc";

    public static final String FUNC_VALUE_BY_INDEX = "valueByIndex";

    public static final String FUNC_REMOVESTRING = "removestring";

    public static final String FUNC_ERC20_GET_BALANCE = "erc20GetBalance";

    public static final String FUNC_BALANCE_OF = "balanceOf";

    public static final String FUNC_ERC20_MINT = "erc20Mint";

    public static final String FUNC_ERC20_TRANSFER_VCS = "erc20TransferVcs";

    public static final String FUNC_HEX_STRING_TO_BYTES32 = "hexStringToBytes32";

    public static final String FUNC_VERIFY_VCS = "verifyVcs";

    public static final String FUNC_PARSE_DID_AND_DID_MERHOD_ID = "parseDidAndDidMerhodId";

    public static final String FUNC_RUN = "run";

    public static final String FUNC_TEST_CALL_DID_AND_PARSE = "test_call_did_and_parse";

    public static final String FUNC_GET_ETH_SIGNED_MESSAGE_HASH = "getEthSignedMessageHash";

    public static final String FUNC_SEND_VC_IF_NEED = "sendVcIfNeed";

    public static final String FUNC_SET_DID_ADDRESS = "setDidAddress";

    public static final String FUNC_FIND_ADDRESS_BY_METHOD_ID = "findAddressByMethodId";

    public static final String FUNC_FIND_CHAR_POSITION = "findCharPosition";

    public static final String FUNC_KEY_FROM_STRING = "keyFromString";

    public static final String FUNC_ERC20_GET_BALANCE_VCS = "erc20GetBalanceVcs";

    public static final String FUNC_ERC20_MINT_VCS = "erc20MintVcs";

    public static final String FUNC_TEST_VERIFY = "test_verify";

    public static final String FUNC_SHOW_ALL = "showAll";

    public static final String FUNC_GET_PROOF_RANGE = "getProofRange";

    public static final String FUNC_UINT_TO_STRING = "uintToString";

    public static final String FUNC_GET_DID_ADDRESS = "getDidAddress";

    public static final String FUNC_ECHO = "echo";

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"test_call_did\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"str\",\"type\":\"string\"},{\"name\":\"charIn\",\"type\":\"bytes1\"},{\"name\":\"startPosition\",\"type\":\"uint256\"}],\"name\":\"findCharNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"},{\"name\":\"needKey\",\"type\":\"string\"}],\"name\":\"valueByKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"string\"},{\"name\":\"methodId\",\"type\":\"string\"}],\"name\":\"findAddressByMethodIdFromDidManager\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcJson\",\"type\":\"string\"}],\"name\":\"verifyVc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"erc20Transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"getUsedVc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"},{\"name\":\"key_index\",\"type\":\"uint256\"}],\"name\":\"valueByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"original\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"removestring\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"erc20GetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"erc20Mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc20TransferVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"name\":\"hexStringToBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"verifyVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"parseDidAndDidMerhodId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"run\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"did\",\"type\":\"string\"},{\"name\":\"methodId\",\"type\":\"string\"}],\"name\":\"test_call_did_and_parse\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"sendVcIfNeed\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"didManagerAddressExt\",\"type\":\"address\"}],\"name\":\"setDidAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"verificationMethod\",\"type\":\"string\"},{\"name\":\"methodId\",\"type\":\"string\"}],\"name\":\"findAddressByMethodId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"str\",\"type\":\"string\"},{\"name\":\"charIn\",\"type\":\"bytes1\"},{\"name\":\"startPosition\",\"type\":\"uint256\"}],\"name\":\"findCharPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyFromString\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc20GetBalanceVcs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc20MintVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test_verify\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"showAll\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"getProofRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDidAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"echo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"didManagerAddressExt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"DEBUG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"DEBUG_ADDRESS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"DEBUG_BYTES32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"CROSS_CHAIN_VC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Erc20Transfer\",\"type\":\"event\"}]"};

    public static final String ABI = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", ABI_ARRAY);

    public static final String[] BINARY_ARRAY = {"","","","","000000000000000000000000000000000000000000000000000000000081525094506140a4565b8593505b600084141515613fcb578280600101935050600a84811515613fc357fe5b049350613fa5565b826040519080825280601f01601f191660200182016040528015613ffe5781602001602082028038833980820191505090505b5091506001830390508593505b6000841415156140a057600a8481151561402157fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561405c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8481151561409857fe5b04935061400b565b8194505b50505050919050565b7f9b83da9b4ae23e896f70e038915a37560445188045df2b1a3db1b1a310cdc3996000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b7ff3d39f15c009ad599c03bbc459984a05ea8f344958338cf5496ae28e5ff17eaa8282604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a15050565b6000606060006060600061419a6165cf565b60008060006141a761656c565b60008060008e99506141b88e615562565b809d508199505050876020015195505b895188600001511015614f32578988600001518151811015156141e757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000029250607b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806142cb5750605b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561440f5785806001019650506142e2888d6155ff565b809550819a5050508815156143045760038c60008090509c509c509c50614f41565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860400151141515614363578b886040015181518110151561434357fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b607b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146143b65760026143b9565b60015b846000019060048111156143c957fe5b908160048111156143d657fe5b81525050876000015184602001818152505060018460400190151590811515815250506001886020015103886040018181525050614f1d565b607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806144a65750605d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156146e657607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146144fe576002614501565b60015b915060009050600188602001510394505b600085101515614615578b8581518110151561452a57fe5b9060200190602002015193508360400151801561454957508360800151155b156146075781600481111561455a57fe5b8460000151600481111561456a57fe5b1415156145845760018c60008090509c509c509c50614f41565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88604001818152505060018860000151018c868151811015156145c457fe5b90602001906020020151606001818152505060018c868151811015156145e657fe5b90602001906020020151608001901515908115158152505060019050614615565b848060019003955050614512565b80151561462f5760018c60008090509c509c509c50614f41565b5b6000851115614688578b8581518110151561464757fe5b9060200190602002015193508360400151801561466657508360800151155b1561467a5784886040018181525050614688565b848060019003955050614630565b60008514156146e1578b8581518110151561469f57fe5b906020019060200201519350836040015180156146be57508360800151155b156146e057846fffffffffffffffffffffffffffffffff168860400181815250505b5b614f1d565b7f2200000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156147c55761473b888d8c6156d1565b965060008714151561475957868c60008090509c509c509c50614f41565b85806001019650507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88604001511415156147c0578b88604001518151811015156147a057fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b614f1d565b7f2000000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480614859575060117f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806148a8575060127f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806148f7575060147f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561490157614f1d565b7f3a00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415614961576001886020015103886040018181525050614f1d565b7f2c00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415614b51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff886040015114158015614a155750600260048111156149e757fe5b8c89604001518151811015156149f957fe5b90602001906020020151600001516004811115614a1257fe5b14155b8015614a57575060016004811115614a2957fe5b8c8960400151815181101515614a3b57fe5b90602001906020020151600001516004811115614a5457fe5b14155b15614b4c57600188602001510394505b600085101515614b4b5760026004811115614a7e57fe5b8c86815181101515614a8c57fe5b90602001906020020151600001516004811115614aa557fe5b1480614ae2575060016004811115614ab957fe5b8c86815181101515614ac757fe5b90602001906020020151600001516004811115614ae057fe5b145b15614b3d578b85815181101515614af557fe5b90602001906020020151604001518015614b2857508b85815181101515614b1857fe5b9060200190602002015160800151155b15614b3c5784886040018181525050614b4b565b5b848060019003955050614a67565b5b614f1d565b7f3000000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015614be557507f3900000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b80614c3157507f2d00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614c7d57507f6600000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614cc957507f7400000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614d1557507f6e00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15614e6a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860400151141515614dd5578b8860400151815181101515614d5957fe5b90602001906020020151935060016004811115614d7257fe5b84600001516004811115614d8257fe5b1480614dbc575060036004811115614d9657fe5b84600001516004811115614da657fe5b148015614dbb575060008460a0015160ff1614155b5b15614dd45760018c60008090509c509c509c50614f41565b5b614de0888d8c615dcf565b9650600087141515614dfe57868c60008090509c509c509c50614f41565b85806001019650507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860400151141515614e65578b8860400151815181101515614e4557fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b614f1d565b60207f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015614f045750607e7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b15614f1c5760018c60008090509c509c509c50614f41565b5b876000018051809190600101815250506141c8565b60008c89602001519c509c509c505b505050505050505050509250925092565b606080606060008692508585036040519080825280601f01601f191660200182016040528015614f","","ffff1916145b80615fcc57507f2c00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061601b5750607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061606a5750605d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156160785760019450616100565b6020837f0100000000000000000000000000000000000000000000000000000000000000900460ff1610806160d35750607f837f0100000000000000000000000000000000000000000000000000000000000000900460ff16115b156160eb57838960000181815250506001955061616d565b88600001805180919060010181525050615deb565b84151561611a57838960000181815250506002955061616d565b61612489896155ff565b809250819350505081151561614657838960000181815250506003955061616d565b616157816004868c600001516164fb565b8860000180518091906001900381525050600095505b50505050509392505050565b60006060600080600080879450600093506000925060009150600090505b84518110156164af5760008114801561624957507f2d0000000000000000000000000000000000000000000000000000000000000085828151811015156161da57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561625357600191505b6030858281518110151561626357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16101580156163615750603985828151811015156162ed57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1611155b1561641557821561638457600087141561637a576164af565b8680600190039750505b600a840293506030858281518110151561639a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040360ff16840193506164a2565b602e858281518110151561642557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1614156164a157600192505b5b8080600101915050616197565b60008711156164c15786600a0a840293505b81156164ed577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840293505b839550505050505092915050565b828460000190600481111561650c57fe5b9081600481111561651957fe5b8152505081846020018181525050600184604001901515908115158152505080846060018181525050600184608001901515908115158152505060008460a0019060ff16908160ff168152505050505050565b60c0604051908101604052806000600481111561658557fe5b81526020016000815260200160001515815260200160008152602001600015158152602001600060ff1681525090565b604080519081016040528060008152602001600081525090565b6060604051908101604052806000815260200160008152602001600081525090565b60c0604051908101604052806000600481111561660a57fe5b81526020016000815260200160001515815260200160008152602001600015158152602001600060ff16815250905600a165627a7a723058203e307e82e81791a6624ab1b756765a050cc7984251e8031c66299c72c7754e720029"};

    public static final String BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","805190810160405280600b81526020017f66756e635f706172616d730000000000000000000000000000000000000000008152506122de565b9350613ff4846040805190810160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152506122de565b9250614035846040805190810160405280600681526020017f616d6f756e7400000000000000000000000000000000000000000000000000008152506122de565b915061404082615461565b905061404c8382613baf565b6140558761397a565b5050505050505050565b6000806000606060008061407161656c565b606061407b61656c565b6140868a60c86142df565b809750819850829950505050600093505b85518410156141565785848151811015156140ae57fe5b9060200190602002015192506140cd8a846020015185606001516150a9565b91506000614110836040805190810160405280600581526020017f70726f6f660000000000000000000000000000000000000000000000000000008152506151aa565b141561414957856001850181518110151561412757fe5b9060200190602002015190506002836020015103816060015198509850614164565b8380600101945050614097565b600080819150809050985098505b50505050505050915091565b60016020528060005260406000206000915090505481565b606060008060606000808614156141d6576040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525094506142d6565b8593505b600084141515614200578280600101935050600a848115156141f857fe5b0493506141da565b826040519080825280601f01601f1916602001820160405280156142335781602001602082028038833980820191505090505b5091506001830390505b6000861415156142d257600a8681151561425357fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561428e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868115156142ca57fe5b04955061423d565b8194505b50505050919050565b600060606000606060006142f16165cf565b60008060006142fe61656c565b60008060008e995061430f8e615562565b809d508199505050876020015195505b8951886000015110156150895789886000015181518110151561433e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000029250607b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806144225750605b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15614566578580600101965050614439888d6155ff565b809550819a50505088151561445b5760038c60008090509c509c509c50615098565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88604001511415156144ba578b886040015181518110151561449a57fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b607b7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461450d576002614510565b60015b8460000190600481111561452057fe5b9081600481111561452d57fe5b81525050876000015184602001818152505060018460400190151590811515815250506001886020015103886040018181525050615074565b607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806145fd5750605d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561483d57607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614614655576002614658565b60015b915060009050600188602001510394505b60008510151561476c578b8581518110151561468157fe5b906020019060200201519350836040015180156146a057508360800151155b1561475e578160048111156146b157fe5b846000015160048111156146c157fe5b1415156146db5760018c60008090509c509c509c50615098565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88604001818152505060018860000151018c8681518110151561471b57fe5b90602001906020020151606001818152505060018c8681518110151561473d57fe5b9060200190602002015160800190151590811515815250506001905061476c565b848060019003955050614669565b8015156147865760018c60008090509c509c509c50615098565b5b60008511156147df578b8581518110151561479e57fe5b906020019060200201519350836040015180156147bd57508360800151155b156147d157848860400181815250506147df565b848060019003955050614787565b6000851415614838578b858151811015156147f657fe5b9060200190602002015193508360400151801561481557508360800151155b1561483757846fffffffffffffffffffffffffffffffff168860400181815250505b5b615074565b7f2200000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561491c57614892888d8c6156d1565b96506000871415156148b057868c60008090509c509c509c50615098565b85806001019650507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860400151141515614917578b88604001518151811015156148f757fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b615074565b7f2000000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806149b0575060117f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806149ff575060127f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614a4e575060147f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15614a5857615074565b7f3a00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415614ab8576001886020015103886040018181525050615074565b7f2c00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415614ca8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff886040015114158015614b6c575060026004811115614b3e57fe5b8c8960400151815181101515614b5057fe5b90602001906020020151600001516004811115614b6957fe5b14155b8015614bae575060016004811115614b8057fe5b8c8960400151815181101515614b9257fe5b90602001906020020151600001516004811115614bab57fe5b14155b15614ca357600188602001510394505b600085101515614ca25760026004811115614bd557fe5b8c86815181101515614be357fe5b90602001906020020151600001516004811115614bfc57fe5b1480614c39575060016004811115614c1057fe5b8c86815181101515614c1e57fe5b90602001906020020151600001516004811115614c3757fe5b145b15614c94578b85815181101515614c4c57fe5b90602001906020020151604001518015614c7f57508b85815181101515614c6f57fe5b9060200190602002015160800151155b15614c935784886040018181525050614ca2565b5b848060019003955050614bbe565b5b615074565b7f3000000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015614d3c57507f3900000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b80614d8857507f2d00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614dd457507f6600000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614e2057507f7400000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80614e6c57507f6e00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15614fc1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8860400151141515614f2c578b8860400151815181101515614eb057fe5b90602001906020020151935060016004811115614ec957fe5b84600001516004811115614ed957fe5b1480614f13575060036004811115614eed57fe5b84600001516004811115614efd57fe5b148015614f12575060008460a0015160ff1614155b5b15614f2b5760018c60008090509c509c509c50615098565b5b614f37888d8c615dcf565b9650600087141515614f5557868c60008090509c509c509c50615098565b85806001019650507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff","","ffff1916145b80615fcc57507f2c00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061601b5750607d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061606a5750605d7f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156160785760019450616100565b6020837f0100000000000000000000000000000000000000000000000000000000000000900460ff1610806160d35750607f837f0100000000000000000000000000000000000000000000000000000000000000900460ff16115b156160eb57838960000181815250506001955061616d565b88600001805180919060010181525050615deb565b84151561611a57838960000181815250506002955061616d565b61612489896155ff565b809250819350505081151561614657838960000181815250506003955061616d565b616157816004868c600001516164fb565b8860000180518091906001900381525050600095505b50505050509392505050565b60006060600080600080879450600093506000925060009150600090505b84518110156164af5760008114801561624957507f2d0000000000000000000000000000000000000000000000000000000000000085828151811015156161da57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561625357600191505b6030858281518110151561626357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16101580156163615750603985828151811015156162ed57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1611155b1561641557821561638457600087141561637a576164af565b8680600190039750505b600a840293506030858281518110151561639a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040360ff16840193506164a2565b602e858281518110151561642557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1614156164a157600192505b5b8080600101915050616197565b60008711156164c15786600a0a840293505b81156164ed577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840293505b839550505050505092915050565b828460000190600481111561650c57fe5b9081600481111561651957fe5b8152505081846020018181525050600184604001901515908115158152505080846060018181525050600184608001901515908115158152505060008460a0019060ff16908160ff168152505050505050565b60c0604051908101604052806000600481111561658557fe5b81526020016000815260200160001515815260200160008152602001600015158152602001600060ff1681525090565b604080519081016040528060008152602001600081525090565b6060604051908101604052806000815260200160008152602001600081525090565b60c0604051908101604052806000600481111561660a57fe5b81526020016000815260200160001515815260200160008152602001600015158152602001600060ff16815250905600a165627a7a72305820d7657c14d51fd71d13d57a4906cfa7dfb97caedc22c98c47ec34b05b2290e3540029"};

    public static final String SM_BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", SM_BINARY_ARRAY);

    public static final Event DEBUG_EVENT = new Event("DEBUG", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUG_ADDRESS_EVENT = new Event("DEBUG_ADDRESS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DEBUG_BYTES32_EVENT = new Event("DEBUG_BYTES32", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CROSS_CHAIN_VC_EVENT = new Event("CROSS_CHAIN_VC", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event ERC20_TRANSFER_EVENT = new Event("Erc20Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected BusiCenter(String contractAddress, IClient client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    protected BusiCenter(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential, vmType);
    }

    protected BusiCenter(String contractAddress, IClient client, CryptoKeyPair credential, String binary) {
        super(binary, contractAddress, client, credential);
    }

    protected BusiCenter(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary) {
        super(binary, contractAddress, client, credential, vmType);
    }

    public static BusiCenter deploy(IClient client, CryptoKeyPair credential, String didManagerAddressExt) throws ContractException {
        String encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        return deploy(BusiCenter.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static BusiCenter deploy(IClient client, CryptoKeyPair credential, String binary, String didManagerAddressExt) throws ContractException {
        String encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        return deploy(BusiCenter.class, client, credential, binary, encodedConstructor);
    }

    public static BusiCenter deploy(IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String didManagerAddressExt) throws ContractException {
        String encodedConstructor = null;
        if (!vmType.isEvm()) {
            encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncWasmEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        } else {
            encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        }
        return deploy(BusiCenter.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor, vmType);
    }

    public static BusiCenter deploy(IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary, String didManagerAddressExt) throws ContractException {
        String encodedConstructor = null;
        if (!vmType.isEvm()) {
            encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncWasmEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        } else {
            encodedConstructor = com.lingshu.chain.sdk.util.HexUtil.toHexString(FuncEncoder.encodeConstructor(Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt))));
        }
        return deploy(BusiCenter.class, client, credential, binary, encodedConstructor, vmType);
    }

    public static BusiCenter load(String contractAddress, IClient client, CryptoKeyPair credential) {
        return new BusiCenter(contractAddress, client, credential);
    }

    public static BusiCenter load(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType) {
        return new BusiCenter(contractAddress, client, credential, vmType);
    }

    public static BusiCenter load(String contractAddress, IClient client, CryptoKeyPair credential, String binary) {
        return new BusiCenter(contractAddress, client, credential, binary);
    }

    public static BusiCenter load(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary) {
        return new BusiCenter(contractAddress, client, credential, vmType, binary);
    }

    public TransactionReceipt test_call_did(String key) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] test_call_did(String key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForTest_call_did(String key) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTest_call_didInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEST_CALL_DID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger findCharNumber(String str, byte[] charIn, BigInteger startPosition) throws ContractException {
        final Function function = new Function(FUNC_FIND_CHAR_NUMBER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(str), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Bytes1(charIn), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(startPosition)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt valueByKey(String json, String needKey) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(needKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] valueByKey(String json, String needKey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(needKey)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForValueByKey(String json, String needKey) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(needKey)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getValueByKeyInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<String> getValueByKeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt findAddressByMethodIdFromDidManager(String did, String methodId) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] findAddressByMethodIdFromDidManager(String did, String methodId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForFindAddressByMethodIdFromDidManager(String did, String methodId) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getFindAddressByMethodIdFromDidManagerInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<String> getFindAddressByMethodIdFromDidManagerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FIND_ADDRESS_BY_METHOD_ID_FROM_DID_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt verifyVc(String vcJson) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcJson)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyVc(String vcJson, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcJson)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForVerifyVc(String vcJson) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcJson)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getVerifyVcInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFY_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc20Transfer(String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(from), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20Transfer(String from, String to, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(from), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20Transfer(String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(from), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getErc20TransferInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<String> getErc20TransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt getUsedVc(String json) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getUsedVc(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForGetUsedVc(String json) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetUsedVcInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GET_USED_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getGetUsedVcOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GET_USED_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt valueByIndex(String json, BigInteger key_index) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(key_index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] valueByIndex(String json, BigInteger key_index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(key_index)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForValueByIndex(String json, BigInteger key_index) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(key_index)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getValueByIndexInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<String> getValueByIndexOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String removestring(String original, BigInteger start, BigInteger end) throws ContractException {
        final Function function = new Function(FUNC_REMOVESTRING, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(original), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(start), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(end)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt erc20GetBalance(String account) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20GetBalance(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20GetBalance(String account) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20GetBalanceInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getErc20GetBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger balanceOf(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCE_OF, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt erc20Mint(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20Mint(String to, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20Mint(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(to), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getErc20MintInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt erc20TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20TransferVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20TransferVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt hexStringToBytes32(String hexString) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(hexString)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] hexStringToBytes32(String hexString, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(hexString)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForHexStringToBytes32(String hexString) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(hexString)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getHexStringToBytes32Input(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getHexStringToBytes32Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt verifyVcs(String json) {
        final Function function = new Function(
                FUNC_VERIFY_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyVcs(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFY_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForVerifyVcs(String json) {
        final Function function = new Function(
                FUNC_VERIFY_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getVerifyVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFY_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt parseDidAndDidMerhodId(String proof) {
        final Function function = new Function(
                FUNC_PARSE_DID_AND_DID_MERHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(proof)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] parseDidAndDidMerhodId(String proof, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PARSE_DID_AND_DID_MERHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(proof)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForParseDidAndDidMerhodId(String proof) {
        final Function function = new Function(
                FUNC_PARSE_DID_AND_DID_MERHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(proof)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getParseDidAndDidMerhodIdInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PARSE_DID_AND_DID_MERHOD_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getParseDidAndDidMerhodIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_PARSE_DID_AND_DID_MERHOD_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt run(String json) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] run(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForRun(String json) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRunInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RUN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt test_call_did_and_parse(String did, String methodId) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID_AND_PARSE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] test_call_did_and_parse(String did, String methodId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID_AND_PARSE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForTest_call_did_and_parse(String did, String methodId) {
        final Function function = new Function(
                FUNC_TEST_CALL_DID_AND_PARSE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(did), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getTest_call_did_and_parseInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEST_CALL_DID_AND_PARSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<String> getTest_call_did_and_parseOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TEST_CALL_DID_AND_PARSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public byte[] getEthSignedMessageHash(String _message) throws ContractException {
        final Function function = new Function(FUNC_GET_ETH_SIGNED_MESSAGE_HASH, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_message)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt sendVcIfNeed(String json) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendVcIfNeed(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForSendVcIfNeed(String json) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSendVcIfNeedInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getSendVcIfNeedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setDidAddress(String didManagerAddressExt) {
        final Function function = new Function(
                FUNC_SET_DID_ADDRESS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDidAddress(String didManagerAddressExt, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SET_DID_ADDRESS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForSetDidAddress(String didManagerAddressExt) {
        final Function function = new Function(
                FUNC_SET_DID_ADDRESS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(didManagerAddressExt)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetDidAddressInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SET_DID_ADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getSetDidAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SET_DID_ADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt findAddressByMethodId(String verificationMethod, String methodId) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(verificationMethod), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] findAddressByMethodId(String verificationMethod, String methodId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(verificationMethod), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForFindAddressByMethodId(String verificationMethod, String methodId) {
        final Function function = new Function(
                FUNC_FIND_ADDRESS_BY_METHOD_ID, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(verificationMethod), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(methodId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getFindAddressByMethodIdInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FIND_ADDRESS_BY_METHOD_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<String> getFindAddressByMethodIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FIND_ADDRESS_BY_METHOD_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger findCharPosition(String str, byte[] charIn, BigInteger startPosition) throws ContractException {
        final Function function = new Function(FUNC_FIND_CHAR_POSITION, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(str), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Bytes1(charIn), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(startPosition)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt keyFromString(String key) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] keyFromString(String key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForKeyFromString(String key) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getKeyFromStringInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getKeyFromStringOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc20GetBalanceVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20GetBalanceVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20GetBalanceVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20GetBalanceVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_GET_BALANCE_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getErc20GetBalanceVcsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC20_GET_BALANCE_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc20MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20MintVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(vcs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20MintVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String test_verify() throws ContractException {
        final Function function = new Function(FUNC_TEST_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt showAll(String json) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] showAll(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForShowAll(String json) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getShowAllInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SHOW_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getShowAllOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SHOW_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt getProofRange(String json) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getProofRange(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForGetProofRange(String json) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetProofRangeInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getGetProofRangeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String uintToString(BigInteger _number) throws ContractException {
        final Function function = new Function(FUNC_UINT_TO_STRING, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getDidAddress() {
        final Function function = new Function(
                FUNC_GET_DID_ADDRESS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getDidAddress(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GET_DID_ADDRESS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForGetDidAddress() {
        final Function function = new Function(
                FUNC_GET_DID_ADDRESS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt echo(String json) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] echo(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForEcho(String json) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getEchoInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ECHO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List<DEBUGEvtResp> getDEBUGEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_EVENT, txReceipt);
        ArrayList<DEBUGEvtResp> responseList = new ArrayList<DEBUGEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            DEBUGEvtResp evtResp = new DEBUGEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUGParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUGEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUGEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DEBUG_ADDRESSEvtResp> getDEBUG_ADDRESSEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_ADDRESS_EVENT, txReceipt);
        ArrayList<DEBUG_ADDRESSEvtResp> responseList = new ArrayList<DEBUG_ADDRESSEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            DEBUG_ADDRESSEvtResp evtResp = new DEBUG_ADDRESSEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUG_ADDRESSParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUG_ADDRESSEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_ADDRESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUG_ADDRESSEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_ADDRESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DEBUG_BYTES32EvtResp> getDEBUG_BYTES32Events(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_BYTES32_EVENT, txReceipt);
        ArrayList<DEBUG_BYTES32EvtResp> responseList = new ArrayList<DEBUG_BYTES32EvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            DEBUG_BYTES32EvtResp evtResp = new DEBUG_BYTES32EvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUG_BYTES32Param0 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUG_BYTES32Event(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_BYTES32_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUG_BYTES32Event(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_BYTES32_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CROSS_CHAIN_VCEvtResp> getCROSS_CHAIN_VCEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(CROSS_CHAIN_VC_EVENT, txReceipt);
        ArrayList<CROSS_CHAIN_VCEvtResp> responseList = new ArrayList<CROSS_CHAIN_VCEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            CROSS_CHAIN_VCEvtResp evtResp = new CROSS_CHAIN_VCEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.CROSS_CHAIN_VCParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeCROSS_CHAIN_VCEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CROSS_CHAIN_VC_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCROSS_CHAIN_VCEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CROSS_CHAIN_VC_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<Erc20TransferEvtResp> getErc20TransferEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(ERC20_TRANSFER_EVENT, txReceipt);
        ArrayList<Erc20TransferEvtResp> responseList = new ArrayList<Erc20TransferEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            Erc20TransferEvtResp evtResp = new Erc20TransferEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            evtResp.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            evtResp.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeErc20TransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC20_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeErc20TransferEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC20_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoType() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static class DEBUGEvtResp {
        public TransactionReceipt.Logs log;

        public String DEBUGParam0;
    }

    public static class DEBUG_ADDRESSEvtResp {
        public TransactionReceipt.Logs log;

        public String DEBUG_ADDRESSParam0;
    }

    public static class DEBUG_BYTES32EvtResp {
        public TransactionReceipt.Logs log;

        public byte[] DEBUG_BYTES32Param0;
    }

    public static class CROSS_CHAIN_VCEvtResp {
        public TransactionReceipt.Logs log;

        public String CROSS_CHAIN_VCParam0;
    }

    public static class Erc20TransferEvtResp {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public BigInteger value;
    }
}
