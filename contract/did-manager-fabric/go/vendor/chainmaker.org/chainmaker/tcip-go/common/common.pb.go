// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/common.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Code int32

const (
	// 网管返回成功
	Code_GATEWAY_SUCCESS Code = 0
	// 网关超时
	Code_GATEWAY_TIMEOUT Code = 1
	// 参数无效
	Code_INVALID_PARAMETER Code = 2
	// 交易认证失败
	Code_TX_PROVE_ERROR Code = 3
	// 合约执行失败
	Code_CONTRACT_FAIL Code = 4
	// 内部错误
	Code_INTERNAL_ERROR Code = 5
	// 中继链错误
	Code_RELAY_CHAIN_ERROR Code = 6
)

var Code_name = map[int32]string{
	0: "GATEWAY_SUCCESS",
	1: "GATEWAY_TIMEOUT",
	2: "INVALID_PARAMETER",
	3: "TX_PROVE_ERROR",
	4: "CONTRACT_FAIL",
	5: "INTERNAL_ERROR",
	6: "RELAY_CHAIN_ERROR",
}

var Code_value = map[string]int32{
	"GATEWAY_SUCCESS":   0,
	"GATEWAY_TIMEOUT":   1,
	"INVALID_PARAMETER": 2,
	"TX_PROVE_ERROR":    3,
	"CONTRACT_FAIL":     4,
	"INTERNAL_ERROR":    5,
	"RELAY_CHAIN_ERROR": 6,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}

type TxVerifyType int32

const (
	// spv方式认证
	TxVerifyType_SPV TxVerifyType = 0
	// rpc接口认证
	TxVerifyType_RPC_INTERFACE TxVerifyType = 1
	// 不需要认证
	TxVerifyType_NOT_NEED TxVerifyType = 2
)

var TxVerifyType_name = map[int32]string{
	0: "SPV",
	1: "RPC_INTERFACE",
	2: "NOT_NEED",
}

var TxVerifyType_value = map[string]int32{
	"SPV":           0,
	"RPC_INTERFACE": 1,
	"NOT_NEED":      2,
}

func (x TxVerifyType) String() string {
	return proto.EnumName(TxVerifyType_name, int32(x))
}

func (TxVerifyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{1}
}

// smart contract runtime, contains vm type and language type
type ChainmakerRuntimeType int32

const (
	// invalid
	ChainmakerRuntimeType_INVALID ChainmakerRuntimeType = 0
	// native implement in chainmaker-go
	ChainmakerRuntimeType_NATIVE ChainmakerRuntimeType = 1
	// vm-wasmer, language-c++
	ChainmakerRuntimeType_WASMER ChainmakerRuntimeType = 2
	// vm-wxvm, language-cpp
	ChainmakerRuntimeType_WXVM ChainmakerRuntimeType = 3
	// wasm interpreter in go
	ChainmakerRuntimeType_GASM ChainmakerRuntimeType = 4
	// vm-evm
	ChainmakerRuntimeType_EVM ChainmakerRuntimeType = 5
	// vm-docker, language-golang
	ChainmakerRuntimeType_DOCKER_GO ChainmakerRuntimeType = 6
	// vm-docker, language-java
	ChainmakerRuntimeType_DOCKER_JAVA ChainmakerRuntimeType = 7
)

var ChainmakerRuntimeType_name = map[int32]string{
	0: "INVALID",
	1: "NATIVE",
	2: "WASMER",
	3: "WXVM",
	4: "GASM",
	5: "EVM",
	6: "DOCKER_GO",
	7: "DOCKER_JAVA",
}

var ChainmakerRuntimeType_value = map[string]int32{
	"INVALID":     0,
	"NATIVE":      1,
	"WASMER":      2,
	"WXVM":        3,
	"GASM":        4,
	"EVM":         5,
	"DOCKER_GO":   6,
	"DOCKER_JAVA": 7,
}

func (x ChainmakerRuntimeType) String() string {
	return proto.EnumName(ChainmakerRuntimeType_name, int32(x))
}

func (ChainmakerRuntimeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{2}
}

// 跨链状态
type CrossChainStateValue int32

const (
	// 新建
	CrossChainStateValue_NEW CrossChainStateValue = 0
	// 待执行
	CrossChainStateValue_WAIT_EXECUTE CrossChainStateValue = 1
	// 待提交
	CrossChainStateValue_WAIT_CONFIRM CrossChainStateValue = 2
	// 确认结束
	CrossChainStateValue_CONFIRM_END CrossChainStateValue = 3
	// 回滚结束
	CrossChainStateValue_CANCEL_END CrossChainStateValue = 4
)

var CrossChainStateValue_name = map[int32]string{
	0: "NEW",
	1: "WAIT_EXECUTE",
	2: "WAIT_CONFIRM",
	3: "CONFIRM_END",
	4: "CANCEL_END",
}

var CrossChainStateValue_value = map[string]int32{
	"NEW":          0,
	"WAIT_EXECUTE": 1,
	"WAIT_CONFIRM": 2,
	"CONFIRM_END":  3,
	"CANCEL_END":   4,
}

func (x CrossChainStateValue) String() string {
	return proto.EnumName(CrossChainStateValue_name, int32(x))
}

func (CrossChainStateValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{3}
}

// tx执行结果
type TxResultValue int32

const (
	// 交易执行成功
	TxResultValue_TX_SUCCESS TxResultValue = 0
	// 交易超时
	TxResultValue_TX_TIMEOUT TxResultValue = 1
	// 交易失败
	TxResultValue_TX_FAIL TxResultValue = 2
	// 交易不存在
	TxResultValue_TX_NOT_EXIST TxResultValue = 3
	// 交易权限不足
	TxResultValue_TX_NO_PERMISSIONS TxResultValue = 4
	// 网关不存在
	TxResultValue_GATEWAY_NOT_FOUND TxResultValue = 5
)

var TxResultValue_name = map[int32]string{
	0: "TX_SUCCESS",
	1: "TX_TIMEOUT",
	2: "TX_FAIL",
	3: "TX_NOT_EXIST",
	4: "TX_NO_PERMISSIONS",
	5: "GATEWAY_NOT_FOUND",
}

var TxResultValue_value = map[string]int32{
	"TX_SUCCESS":        0,
	"TX_TIMEOUT":        1,
	"TX_FAIL":           2,
	"TX_NOT_EXIST":      3,
	"TX_NO_PERMISSIONS": 4,
	"GATEWAY_NOT_FOUND": 5,
}

func (x TxResultValue) String() string {
	return proto.EnumName(TxResultValue_name, int32(x))
}

func (TxResultValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{4}
}

// 中继网关对交易的认证结果
type TxVerifyRsult int32

const (
	// 认证成功
	TxVerifyRsult_VERIFY_SUCCESS TxVerifyRsult = 0
	// 认证失败
	TxVerifyRsult_VERIFY_INVALID TxVerifyRsult = 1
	// 不需要认证
	TxVerifyRsult_VERIFY_NOT_NEED TxVerifyRsult = 2
)

var TxVerifyRsult_name = map[int32]string{
	0: "VERIFY_SUCCESS",
	1: "VERIFY_INVALID",
	2: "VERIFY_NOT_NEED",
}

var TxVerifyRsult_value = map[string]int32{
	"VERIFY_SUCCESS":  0,
	"VERIFY_INVALID":  1,
	"VERIFY_NOT_NEED": 2,
}

func (x TxVerifyRsult) String() string {
	return proto.EnumName(TxVerifyRsult_name, int32(x))
}

func (TxVerifyRsult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{5}
}

// 版本号
type Version int32

const (
	// v1.0.0
	Version_V1_0_0 Version = 0
)

var Version_name = map[int32]string{
	0: "V1_0_0",
}

var Version_value = map[string]int32{
	"V1_0_0": 0,
}

func (x Version) String() string {
	return proto.EnumName(Version_name, int32(x))
}

func (Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{6}
}

// 网关调用类型
type CallType int32

const (
	// restful接口方式
	CallType_REST CallType = 0
	// grpc方式
	CallType_GRPC CallType = 1
)

var CallType_name = map[int32]string{
	0: "REST",
	1: "GRPC",
}

var CallType_value = map[string]int32{
	"REST": 0,
	"GRPC": 1,
}

func (x CallType) String() string {
	return proto.EnumName(CallType_name, int32(x))
}

func (CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{7}
}

type CrossChainMsg struct {
	// 目标网关Id
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 目标链Id
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 目标链合约名称
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// 目标合约方法名称
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// 签名身份Id
	Identity []string `protobuf:"bytes,5,rep,name=identity,proto3" json:"identity,omitempty"`
	// 目标合约参数,json字符串
	Parameter string `protobuf:"bytes,6,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// 扩展数据，由发起网关和目标网关商定，中继网关只负责传输
	ExtraData string `protobuf:"bytes,7,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// confirm数据
	ConfirmInfo *ConfirmInfo `protobuf:"bytes,8,opt,name=confirm_info,json=confirmInfo,proto3" json:"confirm_info,omitempty"`
	// cancel数据
	CancelInfo *CancelInfo `protobuf:"bytes,9,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
}

func (m *CrossChainMsg) Reset()         { *m = CrossChainMsg{} }
func (m *CrossChainMsg) String() string { return proto.CompactTextString(m) }
func (*CrossChainMsg) ProtoMessage()    {}
func (*CrossChainMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}
func (m *CrossChainMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainMsg.Merge(m, src)
}
func (m *CrossChainMsg) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainMsg proto.InternalMessageInfo

func (m *CrossChainMsg) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *CrossChainMsg) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrossChainMsg) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *CrossChainMsg) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CrossChainMsg) GetIdentity() []string {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *CrossChainMsg) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *CrossChainMsg) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *CrossChainMsg) GetConfirmInfo() *ConfirmInfo {
	if m != nil {
		return m.ConfirmInfo
	}
	return nil
}

func (m *CrossChainMsg) GetCancelInfo() *CancelInfo {
	if m != nil {
		return m.CancelInfo
	}
	return nil
}

// confirm数据
type ConfirmInfo struct {
	// 链Id
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 合约名称
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// 合约方法名称
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// 合约参数,json字符串
	Parameter string `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (m *ConfirmInfo) Reset()         { *m = ConfirmInfo{} }
func (m *ConfirmInfo) String() string { return proto.CompactTextString(m) }
func (*ConfirmInfo) ProtoMessage()    {}
func (*ConfirmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{1}
}
func (m *ConfirmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmInfo.Merge(m, src)
}
func (m *ConfirmInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmInfo proto.InternalMessageInfo

func (m *ConfirmInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ConfirmInfo) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ConfirmInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ConfirmInfo) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

// cancel数据
type CancelInfo struct {
	// 链Id
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 合约名称
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// 合约方法名称
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// 合约参数,json字符串
	Parameter string `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (m *CancelInfo) Reset()         { *m = CancelInfo{} }
func (m *CancelInfo) String() string { return proto.CompactTextString(m) }
func (*CancelInfo) ProtoMessage()    {}
func (*CancelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{2}
}
func (m *CancelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelInfo.Merge(m, src)
}
func (m *CancelInfo) XXX_Size() int {
	return m.Size()
}
func (m *CancelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CancelInfo proto.InternalMessageInfo

func (m *CancelInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CancelInfo) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *CancelInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CancelInfo) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

// 交易内容
type TxContent struct {
	// 交易id
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// 交易实际内容,json字符串
	Tx []byte `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	// 交易执行结果
	TxResult TxResultValue `protobuf:"varint,3,opt,name=tx_result,json=txResult,proto3,enum=common.TxResultValue" json:"tx_result,omitempty"`
	// 执行该交易的网关Id
	GatewayId string `protobuf:"bytes,4,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 执行该交易的链Id
	ChainId string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// json字符串,这里是验证的参数，不管什么认证方式都会直接传给spv或者认证接口
	TxProve string `protobuf:"bytes,6,opt,name=tx_prove,json=txProve,proto3" json:"tx_prove,omitempty"`
	// 在哪个块中
	BlockHeight int64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *TxContent) Reset()         { *m = TxContent{} }
func (m *TxContent) String() string { return proto.CompactTextString(m) }
func (*TxContent) ProtoMessage()    {}
func (*TxContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{3}
}
func (m *TxContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContent.Merge(m, src)
}
func (m *TxContent) XXX_Size() int {
	return m.Size()
}
func (m *TxContent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContent.DiscardUnknown(m)
}

var xxx_messageInfo_TxContent proto.InternalMessageInfo

func (m *TxContent) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxContent) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxContent) GetTxResult() TxResultValue {
	if m != nil {
		return m.TxResult
	}
	return TxResultValue_TX_SUCCESS
}

func (m *TxContent) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *TxContent) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TxContent) GetTxProve() string {
	if m != nil {
		return m.TxProve
	}
	return ""
}

func (m *TxContent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// 交易内容，包括验证结果
type TxContentWithVerify struct {
	// 交易的具体结果和内容
	TxContent *TxContent `protobuf:"bytes,1,opt,name=tx_content,json=txContent,proto3" json:"tx_content,omitempty"`
	// 中继网关对交易的认证结果
	TxVerifyResult TxVerifyRsult `protobuf:"varint,2,opt,name=tx_verify_result,json=txVerifyResult,proto3,enum=common.TxVerifyRsult" json:"tx_verify_result,omitempty"`
}

func (m *TxContentWithVerify) Reset()         { *m = TxContentWithVerify{} }
func (m *TxContentWithVerify) String() string { return proto.CompactTextString(m) }
func (*TxContentWithVerify) ProtoMessage()    {}
func (*TxContentWithVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{4}
}
func (m *TxContentWithVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContentWithVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContentWithVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContentWithVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContentWithVerify.Merge(m, src)
}
func (m *TxContentWithVerify) XXX_Size() int {
	return m.Size()
}
func (m *TxContentWithVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContentWithVerify.DiscardUnknown(m)
}

var xxx_messageInfo_TxContentWithVerify proto.InternalMessageInfo

func (m *TxContentWithVerify) GetTxContent() *TxContent {
	if m != nil {
		return m.TxContent
	}
	return nil
}

func (m *TxContentWithVerify) GetTxVerifyResult() TxVerifyRsult {
	if m != nil {
		return m.TxVerifyResult
	}
	return TxVerifyRsult_VERIFY_SUCCESS
}

// 网关信息，可以缓存在内存里，减少请求链次数
type GatewayInfo struct {
	// 网关id，注册的时候不需要写，由中继网关生成，保证唯一性
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 网关名称，客户自定义，也可以没有，只是一个标记，没有实际意义
	GatewayName string `protobuf:"bytes,2,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`
	// 网关地址
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 网关的servername
	ServerName string `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// 网关tlsca证书
	Tlsca string `protobuf:"bytes,5,opt,name=tlsca,proto3" json:"tlsca,omitempty"`
	// 网关客户端证书
	ClientCert string `protobuf:"bytes,6,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// 网关链列表
	ChainList []*ChainInfo `protobuf:"bytes,7,rep,name=chain_list,json=chainList,proto3" json:"chain_list,omitempty"`
	// 网关允许向哪些网关发起跨链请求,空表示不作限制
	ToGatewayList []string `protobuf:"bytes,8,rep,name=to_gateway_list,json=toGatewayList,proto3" json:"to_gateway_list,omitempty"`
	// 网关允许哪些网关向它发起跨链请求，空表示不作限制
	FromGatewayList []string `protobuf:"bytes,9,rep,name=from_gateway_list,json=fromGatewayList,proto3" json:"from_gateway_list,omitempty"`
	// 交易验证类型
	TxVerifyType TxVerifyType `protobuf:"varint,10,opt,name=tx_verify_type,json=txVerifyType,proto3,enum=common.TxVerifyType" json:"tx_verify_type,omitempty"`
	// 交易验证接口,先支持restful
	TxVerifyInterface []*TxVerifyInterface `protobuf:"bytes,11,rep,name=TxVerifyInterface,proto3" json:"TxVerifyInterface,omitempty"`
	// 调用类型
	CallType CallType `protobuf:"varint,12,opt,name=call_type,json=callType,proto3,enum=common.CallType" json:"call_type,omitempty"`
}

func (m *GatewayInfo) Reset()         { *m = GatewayInfo{} }
func (m *GatewayInfo) String() string { return proto.CompactTextString(m) }
func (*GatewayInfo) ProtoMessage()    {}
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{5}
}
func (m *GatewayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayInfo.Merge(m, src)
}
func (m *GatewayInfo) XXX_Size() int {
	return m.Size()
}
func (m *GatewayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayInfo proto.InternalMessageInfo

func (m *GatewayInfo) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GatewayInfo) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

func (m *GatewayInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GatewayInfo) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *GatewayInfo) GetTlsca() string {
	if m != nil {
		return m.Tlsca
	}
	return ""
}

func (m *GatewayInfo) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *GatewayInfo) GetChainList() []*ChainInfo {
	if m != nil {
		return m.ChainList
	}
	return nil
}

func (m *GatewayInfo) GetToGatewayList() []string {
	if m != nil {
		return m.ToGatewayList
	}
	return nil
}

func (m *GatewayInfo) GetFromGatewayList() []string {
	if m != nil {
		return m.FromGatewayList
	}
	return nil
}

func (m *GatewayInfo) GetTxVerifyType() TxVerifyType {
	if m != nil {
		return m.TxVerifyType
	}
	return TxVerifyType_SPV
}

func (m *GatewayInfo) GetTxVerifyInterface() []*TxVerifyInterface {
	if m != nil {
		return m.TxVerifyInterface
	}
	return nil
}

func (m *GatewayInfo) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallType_REST
}

// 链信息
type ChainInfo struct {
	// 链id
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 链身份列表,为空表示使用默认身份做签名
	Identity []string `protobuf:"bytes,2,rep,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{6}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainInfo) GetIdentity() []string {
	if m != nil {
		return m.Identity
	}
	return nil
}

// 交易验证接口，先支持restful
type TxVerifyInterface struct {
	// chainId,哪个链的认证
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// address,如，不需要写http或者https，127.0.0.1:8080/txverify
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// 是否开启tls
	TlsEnable bool `protobuf:"varint,3,opt,name=tls_enable,json=tlsEnable,proto3" json:"tls_enable,omitempty"`
	// 交易验证接口tlsca证书
	Tlsca string `protobuf:"bytes,4,opt,name=tlsca,proto3" json:"tlsca,omitempty"`
	// 交易验证接口客户端证书
	ClientCert string `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// 服务名
	HostName string `protobuf:"bytes,6,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
}

func (m *TxVerifyInterface) Reset()         { *m = TxVerifyInterface{} }
func (m *TxVerifyInterface) String() string { return proto.CompactTextString(m) }
func (*TxVerifyInterface) ProtoMessage()    {}
func (*TxVerifyInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{7}
}
func (m *TxVerifyInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxVerifyInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxVerifyInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxVerifyInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxVerifyInterface.Merge(m, src)
}
func (m *TxVerifyInterface) XXX_Size() int {
	return m.Size()
}
func (m *TxVerifyInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_TxVerifyInterface.DiscardUnknown(m)
}

var xxx_messageInfo_TxVerifyInterface proto.InternalMessageInfo

func (m *TxVerifyInterface) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TxVerifyInterface) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TxVerifyInterface) GetTlsEnable() bool {
	if m != nil {
		return m.TlsEnable
	}
	return false
}

func (m *TxVerifyInterface) GetTlsca() string {
	if m != nil {
		return m.Tlsca
	}
	return ""
}

func (m *TxVerifyInterface) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *TxVerifyInterface) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

// 合于参数，k-v键值对
type ContractKeyValuePair struct {
	// 键
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 值
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ContractKeyValuePair) Reset()         { *m = ContractKeyValuePair{} }
func (m *ContractKeyValuePair) String() string { return proto.CompactTextString(m) }
func (*ContractKeyValuePair) ProtoMessage()    {}
func (*ContractKeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{8}
}
func (m *ContractKeyValuePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractKeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractKeyValuePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractKeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractKeyValuePair.Merge(m, src)
}
func (m *ContractKeyValuePair) XXX_Size() int {
	return m.Size()
}
func (m *ContractKeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractKeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_ContractKeyValuePair proto.InternalMessageInfo

func (m *ContractKeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ContractKeyValuePair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// 分页信息
type PageInfo struct {
	// 每页多少数据
	PageSize uint64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 第几页
	PageNumber uint64 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 总共有多少数据
	TotalCount uint64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// 总共有多少页
	Limit uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{9}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageInfo) GetPageNumber() uint64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *PageInfo) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *PageInfo) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// 各网关确认结果
type CrossChainConfirm struct {
	// 执行结果code
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CrossChainConfirm) Reset()         { *m = CrossChainConfirm{} }
func (m *CrossChainConfirm) String() string { return proto.CompactTextString(m) }
func (*CrossChainConfirm) ProtoMessage()    {}
func (*CrossChainConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{10}
}
func (m *CrossChainConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainConfirm.Merge(m, src)
}
func (m *CrossChainConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainConfirm proto.InternalMessageInfo

func (m *CrossChainConfirm) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_GATEWAY_SUCCESS
}

func (m *CrossChainConfirm) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 跨链信息在链上的存储结构,每次更新的时候不需要从链上获取，而是把它缓存起来，直到它结束，减少链请求次数
type CrossChainInfo struct {
	// 跨链Id
	CrossChainId string `protobuf:"bytes,1,opt,name=cross_chain_id,json=crossChainId,proto3" json:"cross_chain_id,omitempty"`
	// 跨链名称
	CrossChainName string `protobuf:"bytes,2,opt,name=cross_chain_name,json=crossChainName,proto3" json:"cross_chain_name,omitempty"`
	// 跨链标记
	CrossChainFlag string `protobuf:"bytes,3,opt,name=cross_chain_flag,json=crossChainFlag,proto3" json:"cross_chain_flag,omitempty"`
	// 发起跨链网关的id
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// 跨链信息具体内容，该数组的下标和cross_chain_tx_content/gateway_confirm_result一一对应
	CrossChainMsg []*CrossChainMsg `protobuf:"bytes,5,rep,name=cross_chain_msg,json=crossChainMsg,proto3" json:"cross_chain_msg,omitempty"`
	// 跨链首笔交易内容
	FirstTxContent *TxContentWithVerify `protobuf:"bytes,6,opt,name=first_tx_content,json=firstTxContent,proto3" json:"first_tx_content,omitempty"`
	// 跨链交易的内容，包含各网关的交易结果
	CrossChainTxContent []*TxContentWithVerify `protobuf:"bytes,7,rep,name=cross_chain_tx_content,json=crossChainTxContent,proto3" json:"cross_chain_tx_content,omitempty"`
	// 跨链结果
	CrossChainResult bool `protobuf:"varint,8,opt,name=cross_chain_result,json=crossChainResult,proto3" json:"cross_chain_result,omitempty"`
	// 各网关确认结果
	GatewayConfirmResult []*CrossChainConfirm `protobuf:"bytes,9,rep,name=gateway_confirm_result,json=gatewayConfirmResult,proto3" json:"gateway_confirm_result,omitempty"`
	// 跨链状态
	State CrossChainStateValue `protobuf:"varint,10,opt,name=state,proto3,enum=common.CrossChainStateValue" json:"state,omitempty"`
	// 源网关confirm数据
	ConfirmInfo *ConfirmInfo `protobuf:"bytes,11,opt,name=confirm_info,json=confirmInfo,proto3" json:"confirm_info,omitempty"`
	// 源网关cancel数据
	CancelInfo *CancelInfo `protobuf:"bytes,12,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
	// 源网关确认结果
	ConfirmResult *CrossChainConfirm `protobuf:"bytes,13,opt,name=confirm_result,json=confirmResult,proto3" json:"confirm_result,omitempty"`
}

func (m *CrossChainInfo) Reset()         { *m = CrossChainInfo{} }
func (m *CrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*CrossChainInfo) ProtoMessage()    {}
func (*CrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{11}
}
func (m *CrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainInfo.Merge(m, src)
}
func (m *CrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainInfo proto.InternalMessageInfo

func (m *CrossChainInfo) GetCrossChainId() string {
	if m != nil {
		return m.CrossChainId
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainName() string {
	if m != nil {
		return m.CrossChainName
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainFlag() string {
	if m != nil {
		return m.CrossChainFlag
	}
	return ""
}

func (m *CrossChainInfo) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainMsg() []*CrossChainMsg {
	if m != nil {
		return m.CrossChainMsg
	}
	return nil
}

func (m *CrossChainInfo) GetFirstTxContent() *TxContentWithVerify {
	if m != nil {
		return m.FirstTxContent
	}
	return nil
}

func (m *CrossChainInfo) GetCrossChainTxContent() []*TxContentWithVerify {
	if m != nil {
		return m.CrossChainTxContent
	}
	return nil
}

func (m *CrossChainInfo) GetCrossChainResult() bool {
	if m != nil {
		return m.CrossChainResult
	}
	return false
}

func (m *CrossChainInfo) GetGatewayConfirmResult() []*CrossChainConfirm {
	if m != nil {
		return m.GatewayConfirmResult
	}
	return nil
}

func (m *CrossChainInfo) GetState() CrossChainStateValue {
	if m != nil {
		return m.State
	}
	return CrossChainStateValue_NEW
}

func (m *CrossChainInfo) GetConfirmInfo() *ConfirmInfo {
	if m != nil {
		return m.ConfirmInfo
	}
	return nil
}

func (m *CrossChainInfo) GetCancelInfo() *CancelInfo {
	if m != nil {
		return m.CancelInfo
	}
	return nil
}

func (m *CrossChainInfo) GetConfirmResult() *CrossChainConfirm {
	if m != nil {
		return m.ConfirmResult
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.Code", Code_name, Code_value)
	proto.RegisterEnum("common.TxVerifyType", TxVerifyType_name, TxVerifyType_value)
	proto.RegisterEnum("common.ChainmakerRuntimeType", ChainmakerRuntimeType_name, ChainmakerRuntimeType_value)
	proto.RegisterEnum("common.CrossChainStateValue", CrossChainStateValue_name, CrossChainStateValue_value)
	proto.RegisterEnum("common.TxResultValue", TxResultValue_name, TxResultValue_value)
	proto.RegisterEnum("common.TxVerifyRsult", TxVerifyRsult_name, TxVerifyRsult_value)
	proto.RegisterEnum("common.Version", Version_name, Version_value)
	proto.RegisterEnum("common.CallType", CallType_name, CallType_value)
	proto.RegisterType((*CrossChainMsg)(nil), "common.CrossChainMsg")
	proto.RegisterType((*ConfirmInfo)(nil), "common.ConfirmInfo")
	proto.RegisterType((*CancelInfo)(nil), "common.CancelInfo")
	proto.RegisterType((*TxContent)(nil), "common.TxContent")
	proto.RegisterType((*TxContentWithVerify)(nil), "common.TxContentWithVerify")
	proto.RegisterType((*GatewayInfo)(nil), "common.GatewayInfo")
	proto.RegisterType((*ChainInfo)(nil), "common.ChainInfo")
	proto.RegisterType((*TxVerifyInterface)(nil), "common.TxVerifyInterface")
	proto.RegisterType((*ContractKeyValuePair)(nil), "common.ContractKeyValuePair")
	proto.RegisterType((*PageInfo)(nil), "common.PageInfo")
	proto.RegisterType((*CrossChainConfirm)(nil), "common.CrossChainConfirm")
	proto.RegisterType((*CrossChainInfo)(nil), "common.CrossChainInfo")
}

func init() { proto.RegisterFile("common/common.proto", fileDescriptor_8f954d82c0b891f6) }

var fileDescriptor_8f954d82c0b891f6 = []byte{
	// 1552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcb, 0x6f, 0xdb, 0xc8,
	0x19, 0x17, 0x25, 0xea, 0xc1, 0x4f, 0x0f, 0xd3, 0x63, 0x3b, 0x50, 0x9a, 0xc4, 0x75, 0xd4, 0xa2,
	0x30, 0x84, 0xe6, 0x51, 0x07, 0x28, 0x8a, 0x02, 0x7d, 0x30, 0x34, 0xed, 0xb0, 0xb1, 0x28, 0x61,
	0x44, 0xcb, 0x4e, 0x2f, 0x04, 0x4d, 0x8d, 0x64, 0x22, 0x14, 0x69, 0x90, 0x63, 0x57, 0x0a, 0x0a,
	0x14, 0x68, 0x2f, 0x3d, 0xf6, 0xda, 0xbf, 0x65, 0xff, 0x81, 0x3d, 0xec, 0x21, 0xc7, 0x1c, 0xf6,
	0xb0, 0x48, 0xfe, 0x8c, 0xbd, 0x2c, 0x66, 0x48, 0x8a, 0x94, 0x1c, 0x78, 0x17, 0x0b, 0x2c, 0xf6,
	0x64, 0x7d, 0xbf, 0xef, 0x31, 0xdf, 0x8b, 0xbf, 0x19, 0xc3, 0x96, 0x13, 0xcc, 0x66, 0x81, 0xff,
	0x2c, 0xfe, 0xf3, 0xf4, 0x2a, 0x0c, 0x68, 0x80, 0x2a, 0xb1, 0xd4, 0xf9, 0xaa, 0x08, 0x4d, 0x35,
	0x0c, 0xa2, 0x48, 0xbd, 0xb4, 0x5d, 0xbf, 0x17, 0x4d, 0xd1, 0x23, 0x80, 0xa9, 0x4d, 0xc9, 0x3f,
	0xec, 0x85, 0xe5, 0x8e, 0xdb, 0xc2, 0x9e, 0xb0, 0x2f, 0x61, 0x29, 0x41, 0xf4, 0x31, 0xba, 0x0f,
	0x35, 0x87, 0x99, 0x32, 0x65, 0x91, 0x2b, 0xab, 0x5c, 0xd6, 0xc7, 0xe8, 0x57, 0xd0, 0x74, 0x02,
	0x9f, 0x86, 0xb6, 0x43, 0x2d, 0xdf, 0x9e, 0x91, 0x76, 0x89, 0xeb, 0x1b, 0x29, 0x68, 0xd8, 0x33,
	0x82, 0xee, 0x41, 0x65, 0x46, 0xe8, 0x65, 0x30, 0x6e, 0x8b, 0x5c, 0x9b, 0x48, 0xe8, 0x17, 0x50,
	0x73, 0xc7, 0xc4, 0xa7, 0x2e, 0x5d, 0xb4, 0xcb, 0x7b, 0xa5, 0x7d, 0x09, 0x2f, 0x65, 0xf4, 0x10,
	0xa4, 0x2b, 0x3b, 0xb4, 0x67, 0x84, 0x92, 0xb0, 0x5d, 0x89, 0x33, 0x5a, 0x02, 0x2c, 0x61, 0x32,
	0xa7, 0xa1, 0x6d, 0x8d, 0x6d, 0x6a, 0xb7, 0xab, 0xb1, 0x9a, 0x23, 0x87, 0x36, 0xb5, 0xd1, 0xef,
	0x81, 0x25, 0x30, 0x71, 0xc3, 0x99, 0xe5, 0xfa, 0x93, 0xa0, 0x5d, 0xdb, 0x13, 0xf6, 0xeb, 0x07,
	0x5b, 0x4f, 0x93, 0x76, 0xa8, 0xb1, 0x4e, 0xf7, 0x27, 0x01, 0xae, 0x3b, 0x99, 0x80, 0x5e, 0x40,
	0xdd, 0xb1, 0x7d, 0x87, 0x78, 0xb1, 0x9b, 0xc4, 0xdd, 0xd0, 0xd2, 0x8d, 0xab, 0xb8, 0x17, 0x38,
	0xcb, 0xdf, 0x9d, 0xff, 0x08, 0x50, 0xcf, 0x45, 0xfc, 0xc9, 0xba, 0xb5, 0xd2, 0x91, 0xf2, 0x5a,
	0x47, 0x3a, 0xff, 0x16, 0x00, 0xb2, 0x04, 0x7f, 0xa6, 0x24, 0xbe, 0x16, 0x40, 0x32, 0xe7, 0x6a,
	0xe0, 0x53, 0xe2, 0x53, 0xb4, 0x05, 0x65, 0x3a, 0xcf, 0x16, 0x4a, 0xa4, 0x73, 0x7d, 0x8c, 0x5a,
	0x50, 0xa4, 0x73, 0x9e, 0x52, 0x03, 0x17, 0xe9, 0x1c, 0x1d, 0x80, 0x44, 0xe7, 0x56, 0x48, 0xa2,
	0x6b, 0x8f, 0xf2, 0x4c, 0x5a, 0x07, 0x3b, 0x69, 0xc3, 0xcd, 0x39, 0xe6, 0xf8, 0xc8, 0xf6, 0xae,
	0x09, 0xae, 0xd1, 0x44, 0x5c, 0x5b, 0x57, 0xf1, 0xae, 0x75, 0x2d, 0xaf, 0xd6, 0x7e, 0x1f, 0x6a,
	0x74, 0x6e, 0x5d, 0x85, 0xc1, 0x0d, 0x49, 0x96, 0xaa, 0x4a, 0xe7, 0x03, 0x26, 0xa2, 0xc7, 0xd0,
	0xb8, 0xf0, 0x02, 0xe7, 0xad, 0x75, 0x49, 0xdc, 0xe9, 0x25, 0xe5, 0x4b, 0x55, 0xc2, 0x75, 0x8e,
	0xbd, 0xe2, 0x50, 0xe7, 0xbf, 0x02, 0x6c, 0x2d, 0xcb, 0x3b, 0x73, 0xe9, 0xe5, 0x88, 0x84, 0xee,
	0x64, 0x81, 0x9e, 0x03, 0xd0, 0xb9, 0xe5, 0xc4, 0x38, 0xaf, 0xb6, 0x7e, 0xb0, 0x99, 0x15, 0x91,
	0x38, 0x60, 0x89, 0x2e, 0x5b, 0xf3, 0x17, 0x90, 0xe9, 0xdc, 0xba, 0xe1, 0xee, 0x69, 0xf1, 0xc5,
	0xf5, 0xe2, 0xe3, 0xe8, 0x98, 0x29, 0x71, 0x8b, 0xa6, 0x22, 0x37, 0xee, 0x7c, 0x5b, 0x82, 0xfa,
	0x71, 0x52, 0x31, 0x9b, 0xf7, 0xf7, 0x7c, 0xc1, 0x8f, 0xa1, 0x91, 0xaa, 0xf9, 0xc8, 0xe3, 0x95,
	0xa8, 0x27, 0x18, 0x9f, 0x78, 0x1b, 0xaa, 0xf6, 0x78, 0x1c, 0x92, 0x28, 0x4a, 0x16, 0x22, 0x15,
	0xd1, 0x2f, 0xa1, 0x1e, 0x91, 0xf0, 0x86, 0x84, 0xb1, 0x6f, 0xdc, 0x6f, 0x88, 0x21, 0xee, 0xba,
	0x0d, 0x65, 0xea, 0x45, 0x8e, 0x9d, 0x74, 0x3b, 0x16, 0x98, 0x9b, 0xe3, 0xb9, 0xc4, 0xa7, 0x96,
	0x43, 0x42, 0x9a, 0xb4, 0x1b, 0x62, 0x48, 0x25, 0x21, 0x65, 0x6d, 0x8b, 0xe7, 0xe4, 0xb9, 0x11,
	0xeb, 0x77, 0x29, 0xdf, 0x36, 0xce, 0x4d, 0xfc, 0x5b, 0x93, 0xb8, 0xd1, 0x89, 0x1b, 0x51, 0xf4,
	0x1b, 0xd8, 0xa0, 0x81, 0x95, 0x56, 0xc2, 0xdd, 0x6a, 0x9c, 0x37, 0x9a, 0x34, 0x48, 0xba, 0xc1,
	0xed, 0xba, 0xb0, 0x39, 0x09, 0x83, 0xd9, 0xaa, 0xa5, 0xc4, 0x2d, 0x37, 0x98, 0x22, 0x6f, 0xfb,
	0x47, 0x68, 0x65, 0xa3, 0xa0, 0x8b, 0x2b, 0xd2, 0x06, 0x3e, 0x88, 0xed, 0xf5, 0x41, 0x98, 0x8b,
	0x2b, 0x82, 0x1b, 0x34, 0x27, 0xa1, 0x63, 0xd8, 0x4c, 0xb5, 0xba, 0x4f, 0x49, 0x38, 0xb1, 0x1d,
	0xd2, 0xae, 0xf3, 0x42, 0xee, 0xaf, 0xbb, 0x2f, 0x0d, 0xf0, 0x6d, 0x1f, 0xf4, 0x04, 0x24, 0xc7,
	0xf6, 0xbc, 0xf8, 0xfc, 0x06, 0x3f, 0x5f, 0xce, 0x68, 0xc7, 0xf3, 0xf8, 0xd9, 0x35, 0x27, 0xf9,
	0xd5, 0x79, 0x09, 0xd2, 0xb2, 0x3f, 0x2b, 0xeb, 0x2e, 0xac, 0xae, 0x7b, 0x9e, 0x60, 0x8b, 0xab,
	0x04, 0xdb, 0xf9, 0x42, 0xf8, 0x4c, 0xf2, 0x77, 0x05, 0xcb, 0x2d, 0x48, 0x71, 0x75, 0x41, 0x1e,
	0x01, 0x50, 0x2f, 0xb2, 0x88, 0x6f, 0x5f, 0x78, 0x31, 0x9d, 0xd4, 0xb0, 0x44, 0xbd, 0x48, 0xe3,
	0x40, 0xb6, 0x1e, 0xe2, 0x1d, 0xeb, 0x51, 0xbe, 0xb5, 0x1e, 0x0f, 0x40, 0xba, 0x0c, 0xa2, 0x84,
	0xa3, 0xe2, 0xed, 0xa9, 0x31, 0x80, 0xad, 0x5c, 0xe7, 0xcf, 0xb0, 0xad, 0x26, 0x7c, 0xf5, 0x9a,
	0x2c, 0x38, 0x41, 0x0c, 0x6c, 0x37, 0x44, 0x32, 0x94, 0xde, 0x92, 0x45, 0x92, 0x3a, 0xfb, 0xc9,
	0x4e, 0xbf, 0x61, 0xea, 0x84, 0x73, 0x62, 0xa1, 0xf3, 0x2f, 0xa8, 0x0d, 0xec, 0x29, 0xe1, 0x0d,
	0x7c, 0xc0, 0x38, 0x6d, 0x4a, 0xac, 0xc8, 0x7d, 0x47, 0xb8, 0xa7, 0x88, 0x6b, 0x0c, 0x18, 0xba,
	0xef, 0x08, 0x4b, 0x93, 0x2b, 0xfd, 0xeb, 0xd9, 0x05, 0x09, 0x79, 0x10, 0x11, 0x03, 0x83, 0x0c,
	0x8e, 0x30, 0x03, 0x1a, 0x50, 0xdb, 0xb3, 0x9c, 0xe0, 0xda, 0x8f, 0x29, 0x4c, 0xc4, 0xc0, 0x21,
	0x95, 0x21, 0x2c, 0x01, 0xcf, 0x9d, 0xb9, 0x94, 0x97, 0x2f, 0xe2, 0x58, 0xe8, 0xf4, 0x61, 0x33,
	0xbb, 0x83, 0x93, 0xeb, 0x03, 0xed, 0x81, 0xe8, 0x04, 0xe3, 0x38, 0x89, 0xd6, 0x41, 0x23, 0xbb,
	0xaf, 0xc6, 0x04, 0x73, 0x0d, 0x1b, 0xc2, 0x8c, 0x44, 0x91, 0x3d, 0x4d, 0xbf, 0xe1, 0x54, 0xec,
	0x7c, 0x28, 0x43, 0x2b, 0x8b, 0xc8, 0x0b, 0xfb, 0x35, 0xb4, 0x1c, 0x86, 0x58, 0x6b, 0x23, 0x6d,
	0x38, 0x99, 0xdd, 0x18, 0xed, 0x83, 0x9c, 0xb7, 0xca, 0xf1, 0x43, 0x2b, 0xb3, 0xe3, 0xdf, 0xf9,
	0x9a, 0xe5, 0xc4, 0xb3, 0xa7, 0x09, 0x57, 0xe4, 0x2c, 0x8f, 0x3c, 0x7b, 0x8a, 0x10, 0x88, 0xec,
	0x3b, 0x4b, 0x26, 0xce, 0x7f, 0xa3, 0x3f, 0xc1, 0x46, 0xde, 0x7b, 0x16, 0x4d, 0xf9, 0xa5, 0x5f,
	0xcf, 0x28, 0x6f, 0xe5, 0x51, 0x82, 0x9b, 0xce, 0xca, 0x1b, 0x45, 0x03, 0x79, 0xe2, 0x86, 0x11,
	0xb5, 0x72, 0x54, 0x5b, 0xe1, 0x54, 0xfb, 0xe0, 0x16, 0xd5, 0x66, 0xdc, 0x8c, 0x5b, 0xdc, 0x29,
	0xbb, 0x94, 0x06, 0x70, 0x2f, 0x9f, 0x45, 0x2e, 0x58, 0x4c, 0x40, 0x77, 0x06, 0xdb, 0xca, 0x52,
	0xca, 0x22, 0xfe, 0x16, 0x50, 0x3e, 0x62, 0xc2, 0xe6, 0x35, 0xfe, 0x15, 0xc8, 0x99, 0x43, 0x72,
	0x77, 0xf5, 0xe1, 0x5e, 0xca, 0x4a, 0xe9, 0x13, 0x25, 0xf1, 0x90, 0x56, 0x79, 0xe3, 0xd6, 0x76,
	0xe0, 0xed, 0xc4, 0x31, 0x95, 0xe3, 0x80, 0x07, 0x50, 0x8e, 0xa8, 0x4d, 0x53, 0xda, 0x7a, 0x78,
	0xdb, 0x7f, 0xc8, 0xd4, 0xf1, 0x1d, 0x1a, 0x9b, 0xde, 0x7a, 0x1f, 0xd5, 0x7f, 0xdc, 0xfb, 0xa8,
	0xf1, 0x43, 0xde, 0x47, 0xe8, 0xaf, 0xd0, 0x5a, 0xab, 0xb4, 0xc9, 0xfd, 0xee, 0xa8, 0xb4, 0xe9,
	0xe4, 0x4b, 0xec, 0xfe, 0x5f, 0x00, 0x91, 0x7d, 0x03, 0x68, 0x0b, 0x36, 0x8e, 0x15, 0x53, 0x3b,
	0x53, 0xde, 0x58, 0xc3, 0x53, 0x55, 0xd5, 0x86, 0x43, 0xb9, 0x90, 0x07, 0x4d, 0xbd, 0xa7, 0xf5,
	0x4f, 0x4d, 0x59, 0x40, 0x3b, 0xb0, 0xa9, 0x1b, 0x23, 0xe5, 0x44, 0x3f, 0xb4, 0x06, 0x0a, 0x56,
	0x7a, 0x9a, 0xa9, 0x61, 0xb9, 0x88, 0x10, 0xb4, 0xcc, 0x73, 0x6b, 0x80, 0xfb, 0x23, 0xcd, 0xd2,
	0x30, 0xee, 0x63, 0xb9, 0x84, 0x36, 0xa1, 0xa9, 0xf6, 0x0d, 0x13, 0x2b, 0xaa, 0x69, 0x1d, 0x29,
	0xfa, 0x89, 0x2c, 0x32, 0x33, 0xdd, 0x30, 0x35, 0x6c, 0x28, 0x27, 0x89, 0x59, 0x99, 0x45, 0xc4,
	0xda, 0x89, 0xf2, 0xc6, 0x52, 0x5f, 0x29, 0xba, 0x91, 0xc0, 0x95, 0xee, 0x1f, 0xa0, 0x91, 0xbf,
	0x20, 0x50, 0x15, 0x4a, 0xc3, 0xc1, 0x48, 0x2e, 0xb0, 0xb0, 0x78, 0xa0, 0x5a, 0x3c, 0xce, 0x91,
	0xa2, 0x6a, 0xb2, 0x80, 0x1a, 0x50, 0x33, 0xfa, 0xa6, 0x65, 0x68, 0xda, 0xa1, 0x5c, 0xec, 0x2e,
	0x60, 0x87, 0x17, 0x3d, 0xb3, 0xdf, 0x92, 0x10, 0x5f, 0xfb, 0xd4, 0x9d, 0x11, 0x1e, 0xa2, 0x0e,
	0xd5, 0x24, 0x77, 0xb9, 0x80, 0x00, 0x2a, 0x86, 0x62, 0xea, 0x23, 0xe6, 0x0f, 0x50, 0x39, 0x53,
	0x86, 0x3d, 0x5e, 0x49, 0x0d, 0xc4, 0xb3, 0xf3, 0x51, 0x4f, 0x2e, 0xb1, 0x5f, 0xc7, 0xca, 0xb0,
	0x27, 0x8b, 0xec, 0x6c, 0x6d, 0xd4, 0x93, 0xcb, 0xa8, 0x09, 0xd2, 0x61, 0x5f, 0x7d, 0xad, 0x61,
	0xeb, 0xb8, 0x2f, 0x57, 0xd0, 0x06, 0xd4, 0x13, 0xf1, 0x6f, 0xca, 0x48, 0x91, 0xab, 0xdd, 0x31,
	0x6c, 0x7f, 0x6e, 0x3d, 0x58, 0x00, 0x43, 0x3b, 0x93, 0x0b, 0x48, 0x86, 0xc6, 0x99, 0xa2, 0x9b,
	0x96, 0x76, 0xae, 0xa9, 0xa7, 0x26, 0x3b, 0x3b, 0x45, 0xd4, 0xbe, 0x71, 0xa4, 0xe3, 0x9e, 0x5c,
	0x64, 0x51, 0x13, 0xc1, 0xd2, 0x8c, 0x43, 0xb9, 0x84, 0x5a, 0x00, 0xaa, 0x62, 0xa8, 0xda, 0x09,
	0x97, 0xc5, 0xee, 0x3f, 0xa1, 0xb9, 0xf2, 0x82, 0x63, 0x06, 0xe6, 0x79, 0x6e, 0x72, 0xb1, 0x9c,
	0x0d, 0xad, 0x0e, 0x55, 0xf3, 0x3c, 0x9e, 0x41, 0x91, 0x1d, 0x68, 0x9e, 0x5b, 0xac, 0x5f, 0xda,
	0xb9, 0x3e, 0x34, 0xe5, 0x12, 0x9b, 0x00, 0x47, 0xac, 0x81, 0x86, 0x7b, 0xfa, 0x70, 0xa8, 0xf7,
	0x8d, 0xa1, 0x2c, 0x32, 0x38, 0x9d, 0x3f, 0xb3, 0x3e, 0xea, 0x9f, 0x1a, 0x87, 0x72, 0xb9, 0x7b,
	0xc2, 0x4e, 0xcf, 0x3d, 0xa1, 0xd8, 0x50, 0x47, 0x1a, 0xd6, 0x8f, 0xf2, 0xbb, 0x93, 0x61, 0x69,
	0xc7, 0x05, 0xb6, 0x4f, 0x09, 0x96, 0x1b, 0xd6, 0x0e, 0x54, 0x47, 0x24, 0x8c, 0xdc, 0xc0, 0x67,
	0x53, 0x18, 0xfd, 0xce, 0x7a, 0x6e, 0x3d, 0x97, 0x0b, 0xdd, 0x5d, 0xa8, 0xa5, 0xd7, 0x33, 0x9b,
	0x03, 0xd6, 0x86, 0xa6, 0x5c, 0xe0, 0x13, 0xc1, 0x03, 0x55, 0x16, 0x5e, 0xbe, 0xfc, 0xf2, 0xe3,
	0xae, 0xf0, 0xfe, 0xe3, 0xae, 0xf0, 0xcd, 0xc7, 0x5d, 0xe1, 0x7f, 0x9f, 0x76, 0x0b, 0xef, 0x3f,
	0xed, 0x16, 0x3e, 0x7c, 0xda, 0x2d, 0xfc, 0x7d, 0xdf, 0x59, 0xce, 0xfe, 0x69, 0x10, 0x4e, 0x9f,
	0x65, 0xe2, 0x33, 0xea, 0xb8, 0x57, 0x4f, 0xa6, 0x41, 0xf2, 0xcf, 0xdb, 0x45, 0x85, 0xff, 0xf7,
	0xf6, 0xe2, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x3c, 0xb9, 0xd6, 0xd4, 0x0d, 0x00, 0x00,
}

func (m *CrossChainMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelInfo != nil {
		{
			size, err := m.CancelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ConfirmInfo != nil {
		{
			size, err := m.ConfirmInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		for iNdEx := len(m.Identity) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identity[iNdEx])
			copy(dAtA[i:], m.Identity[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Identity[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CancelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TxContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxProve) > 0 {
		i -= len(m.TxProve)
		copy(dAtA[i:], m.TxProve)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TxProve)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x22
	}
	if m.TxResult != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TxResult))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxContentWithVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContentWithVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContentWithVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxVerifyResult != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TxVerifyResult))
		i--
		dAtA[i] = 0x10
	}
	if m.TxContent != nil {
		{
			size, err := m.TxContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TxVerifyInterface) > 0 {
		for iNdEx := len(m.TxVerifyInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxVerifyInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.TxVerifyType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TxVerifyType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FromGatewayList) > 0 {
		for iNdEx := len(m.FromGatewayList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FromGatewayList[iNdEx])
			copy(dAtA[i:], m.FromGatewayList[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.FromGatewayList[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ToGatewayList) > 0 {
		for iNdEx := len(m.ToGatewayList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ToGatewayList[iNdEx])
			copy(dAtA[i:], m.ToGatewayList[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.ToGatewayList[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ChainList) > 0 {
		for iNdEx := len(m.ChainList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClientCert) > 0 {
		i -= len(m.ClientCert)
		copy(dAtA[i:], m.ClientCert)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientCert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tlsca) > 0 {
		i -= len(m.Tlsca)
		copy(dAtA[i:], m.Tlsca)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Tlsca)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayName) > 0 {
		i -= len(m.GatewayName)
		copy(dAtA[i:], m.GatewayName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.GatewayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		for iNdEx := len(m.Identity) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identity[iNdEx])
			copy(dAtA[i:], m.Identity[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Identity[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxVerifyInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxVerifyInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxVerifyInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClientCert) > 0 {
		i -= len(m.ClientCert)
		copy(dAtA[i:], m.ClientCert)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientCert)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tlsca) > 0 {
		i -= len(m.Tlsca)
		copy(dAtA[i:], m.Tlsca)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Tlsca)))
		i--
		dAtA[i] = 0x22
	}
	if m.TlsEnable {
		i--
		if m.TlsEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractKeyValuePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractKeyValuePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractKeyValuePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNumber != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.PageSize != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfirmResult != nil {
		{
			size, err := m.ConfirmResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CancelInfo != nil {
		{
			size, err := m.CancelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ConfirmInfo != nil {
		{
			size, err := m.ConfirmInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.State != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if len(m.GatewayConfirmResult) > 0 {
		for iNdEx := len(m.GatewayConfirmResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GatewayConfirmResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CrossChainResult {
		i--
		if m.CrossChainResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.CrossChainTxContent) > 0 {
		for iNdEx := len(m.CrossChainTxContent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTxContent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FirstTxContent != nil {
		{
			size, err := m.FirstTxContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CrossChainMsg) > 0 {
		for iNdEx := len(m.CrossChainMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CrossChainFlag) > 0 {
		i -= len(m.CrossChainFlag)
		copy(dAtA[i:], m.CrossChainFlag)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CrossChainFlag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrossChainName) > 0 {
		i -= len(m.CrossChainName)
		copy(dAtA[i:], m.CrossChainName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CrossChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossChainId) > 0 {
		i -= len(m.CrossChainId)
		copy(dAtA[i:], m.CrossChainId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CrossChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossChainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Identity) > 0 {
		for _, s := range m.Identity {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ConfirmInfo != nil {
		l = m.ConfirmInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.CancelInfo != nil {
		l = m.CancelInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ConfirmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *CancelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *TxContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TxResult != 0 {
		n += 1 + sovCommon(uint64(m.TxResult))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TxProve)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCommon(uint64(m.BlockHeight))
	}
	return n
}

func (m *TxContentWithVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxContent != nil {
		l = m.TxContent.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TxVerifyResult != 0 {
		n += 1 + sovCommon(uint64(m.TxVerifyResult))
	}
	return n
}

func (m *GatewayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.GatewayName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Tlsca)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientCert)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ChainList) > 0 {
		for _, e := range m.ChainList {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ToGatewayList) > 0 {
		for _, s := range m.ToGatewayList {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.FromGatewayList) > 0 {
		for _, s := range m.FromGatewayList {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.TxVerifyType != 0 {
		n += 1 + sovCommon(uint64(m.TxVerifyType))
	}
	if len(m.TxVerifyInterface) > 0 {
		for _, e := range m.TxVerifyInterface {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.CallType != 0 {
		n += 1 + sovCommon(uint64(m.CallType))
	}
	return n
}

func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Identity) > 0 {
		for _, s := range m.Identity {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *TxVerifyInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TlsEnable {
		n += 2
	}
	l = len(m.Tlsca)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientCert)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ContractKeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovCommon(uint64(m.PageSize))
	}
	if m.PageNumber != 0 {
		n += 1 + sovCommon(uint64(m.PageNumber))
	}
	if m.TotalCount != 0 {
		n += 1 + sovCommon(uint64(m.TotalCount))
	}
	if m.Limit != 0 {
		n += 1 + sovCommon(uint64(m.Limit))
	}
	return n
}

func (m *CrossChainConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommon(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *CrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrossChainId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CrossChainName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CrossChainFlag)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.CrossChainMsg) > 0 {
		for _, e := range m.CrossChainMsg {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.FirstTxContent != nil {
		l = m.FirstTxContent.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.CrossChainTxContent) > 0 {
		for _, e := range m.CrossChainTxContent {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.CrossChainResult {
		n += 2
	}
	if len(m.GatewayConfirmResult) > 0 {
		for _, e := range m.GatewayConfirmResult {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovCommon(uint64(m.State))
	}
	if m.ConfirmInfo != nil {
		l = m.ConfirmInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.CancelInfo != nil {
		l = m.CancelInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ConfirmResult != nil {
		l = m.ConfirmResult.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossChainMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = append(m.Identity, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmInfo == nil {
				m.ConfirmInfo = &ConfirmInfo{}
			}
			if err := m.ConfirmInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelInfo == nil {
				m.CancelInfo = &CancelInfo{}
			}
			if err := m.CancelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResult", wireType)
			}
			m.TxResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxResult |= TxResultValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxProve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxProve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxContentWithVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContentWithVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContentWithVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxContent == nil {
				m.TxContent = &TxContent{}
			}
			if err := m.TxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxVerifyResult", wireType)
			}
			m.TxVerifyResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxVerifyResult |= TxVerifyRsult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tlsca", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tlsca = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainList = append(m.ChainList, &ChainInfo{})
			if err := m.ChainList[len(m.ChainList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToGatewayList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToGatewayList = append(m.ToGatewayList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromGatewayList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromGatewayList = append(m.FromGatewayList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxVerifyType", wireType)
			}
			m.TxVerifyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxVerifyType |= TxVerifyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxVerifyInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxVerifyInterface = append(m.TxVerifyInterface, &TxVerifyInterface{})
			if err := m.TxVerifyInterface[len(m.TxVerifyInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = append(m.Identity, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxVerifyInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxVerifyInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxVerifyInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlsEnable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tlsca", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tlsca = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractKeyValuePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractKeyValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractKeyValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainMsg = append(m.CrossChainMsg, &CrossChainMsg{})
			if err := m.CrossChainMsg[len(m.CrossChainMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstTxContent == nil {
				m.FirstTxContent = &TxContentWithVerify{}
			}
			if err := m.FirstTxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTxContent = append(m.CrossChainTxContent, &TxContentWithVerify{})
			if err := m.CrossChainTxContent[len(m.CrossChainTxContent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossChainResult = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfirmResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayConfirmResult = append(m.GatewayConfirmResult, &CrossChainConfirm{})
			if err := m.GatewayConfirmResult[len(m.GatewayConfirmResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CrossChainStateValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmInfo == nil {
				m.ConfirmInfo = &ConfirmInfo{}
			}
			if err := m.ConfirmInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelInfo == nil {
				m.CancelInfo = &CancelInfo{}
			}
			if err := m.CancelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmResult == nil {
				m.ConfirmResult = &CrossChainConfirm{}
			}
			if err := m.ConfirmResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
