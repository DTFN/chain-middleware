// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/relay_chain/response.proto

package relay_chain

import (
	common "chainmaker.org/chainmaker/tcip-go/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 向中继网关发送同步区块请求返回
type SyncBlockHeaderResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SyncBlockHeaderResponse) Reset()         { *m = SyncBlockHeaderResponse{} }
func (m *SyncBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*SyncBlockHeaderResponse) ProtoMessage()    {}
func (*SyncBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{0}
}
func (m *SyncBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncBlockHeaderResponse.Merge(m, src)
}
func (m *SyncBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncBlockHeaderResponse proto.InternalMessageInfo

func (m *SyncBlockHeaderResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *SyncBlockHeaderResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 跨链网关向中继网关发送跨链请求返回
type BeginCrossChainResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 跨链Id
	CrossChainId string `protobuf:"bytes,2,opt,name=cross_chain_id,json=crossChainId,proto3" json:"cross_chain_id,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *BeginCrossChainResponse) Reset()         { *m = BeginCrossChainResponse{} }
func (m *BeginCrossChainResponse) String() string { return proto.CompactTextString(m) }
func (*BeginCrossChainResponse) ProtoMessage()    {}
func (*BeginCrossChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{1}
}
func (m *BeginCrossChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginCrossChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginCrossChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeginCrossChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginCrossChainResponse.Merge(m, src)
}
func (m *BeginCrossChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *BeginCrossChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginCrossChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeginCrossChainResponse proto.InternalMessageInfo

func (m *BeginCrossChainResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *BeginCrossChainResponse) GetCrossChainId() string {
	if m != nil {
		return m.CrossChainId
	}
	return ""
}

func (m *BeginCrossChainResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 网关注册
type GatewayRegisterResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 跨链网关Id
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GatewayRegisterResponse) Reset()         { *m = GatewayRegisterResponse{} }
func (m *GatewayRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*GatewayRegisterResponse) ProtoMessage()    {}
func (*GatewayRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{2}
}
func (m *GatewayRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRegisterResponse.Merge(m, src)
}
func (m *GatewayRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRegisterResponse proto.InternalMessageInfo

func (m *GatewayRegisterResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *GatewayRegisterResponse) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GatewayRegisterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 网关更新
type GatewayUpdateResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 跨链Id
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GatewayUpdateResponse) Reset()         { *m = GatewayUpdateResponse{} }
func (m *GatewayUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*GatewayUpdateResponse) ProtoMessage()    {}
func (*GatewayUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{3}
}
func (m *GatewayUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayUpdateResponse.Merge(m, src)
}
func (m *GatewayUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GatewayUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayUpdateResponse proto.InternalMessageInfo

func (m *GatewayUpdateResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *GatewayUpdateResponse) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GatewayUpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 安装区块头同步和spv验证合约
type InitContractResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *InitContractResponse) Reset()         { *m = InitContractResponse{} }
func (m *InitContractResponse) String() string { return proto.CompactTextString(m) }
func (*InitContractResponse) ProtoMessage()    {}
func (*InitContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{4}
}
func (m *InitContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitContractResponse.Merge(m, src)
}
func (m *InitContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitContractResponse proto.InternalMessageInfo

func (m *InitContractResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *InitContractResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 升级区块头同步和spv验证合约
type UpdateContractResponse struct {
	// 执行结果code
	Code common.Code `protobuf:"varint,1,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UpdateContractResponse) Reset()         { *m = UpdateContractResponse{} }
func (m *UpdateContractResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateContractResponse) ProtoMessage()    {}
func (*UpdateContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{5}
}
func (m *UpdateContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContractResponse.Merge(m, src)
}
func (m *UpdateContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContractResponse proto.InternalMessageInfo

func (m *UpdateContractResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *UpdateContractResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 查询网关信息
type QuerGatewayResponse struct {
	// 网关信息列表
	GatewayInfo []*common.GatewayInfo `protobuf:"bytes,1,rep,name=gateway_info,json=gatewayInfo,proto3" json:"gateway_info,omitempty"`
	// 分页信息
	PageInfo *common.PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// 执行结果code
	Code common.Code `protobuf:"varint,3,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QuerGatewayResponse) Reset()         { *m = QuerGatewayResponse{} }
func (m *QuerGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*QuerGatewayResponse) ProtoMessage()    {}
func (*QuerGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{6}
}
func (m *QuerGatewayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerGatewayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerGatewayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerGatewayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerGatewayResponse.Merge(m, src)
}
func (m *QuerGatewayResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerGatewayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerGatewayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerGatewayResponse proto.InternalMessageInfo

func (m *QuerGatewayResponse) GetGatewayInfo() []*common.GatewayInfo {
	if m != nil {
		return m.GatewayInfo
	}
	return nil
}

func (m *QuerGatewayResponse) GetPageInfo() *common.PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QuerGatewayResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *QuerGatewayResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 查询跨链信息
type QuerCrossChainResponse struct {
	// 跨链信息列表
	CrossChainInfo []*common.CrossChainInfo `protobuf:"bytes,1,rep,name=cross_chain_info,json=crossChainInfo,proto3" json:"cross_chain_info,omitempty"`
	// 分页信息
	PageInfo *common.PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// 执行结果code
	Code common.Code `protobuf:"varint,3,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"`
	// 返回消息内容
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QuerCrossChainResponse) Reset()         { *m = QuerCrossChainResponse{} }
func (m *QuerCrossChainResponse) String() string { return proto.CompactTextString(m) }
func (*QuerCrossChainResponse) ProtoMessage()    {}
func (*QuerCrossChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_001517177cae6c98, []int{7}
}
func (m *QuerCrossChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerCrossChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerCrossChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerCrossChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerCrossChainResponse.Merge(m, src)
}
func (m *QuerCrossChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerCrossChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerCrossChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerCrossChainResponse proto.InternalMessageInfo

func (m *QuerCrossChainResponse) GetCrossChainInfo() []*common.CrossChainInfo {
	if m != nil {
		return m.CrossChainInfo
	}
	return nil
}

func (m *QuerCrossChainResponse) GetPageInfo() *common.PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QuerCrossChainResponse) GetCode() common.Code {
	if m != nil {
		return m.Code
	}
	return common.Code_GATEWAY_SUCCESS
}

func (m *QuerCrossChainResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SyncBlockHeaderResponse)(nil), "relay_chain.SyncBlockHeaderResponse")
	proto.RegisterType((*BeginCrossChainResponse)(nil), "relay_chain.BeginCrossChainResponse")
	proto.RegisterType((*GatewayRegisterResponse)(nil), "relay_chain.GatewayRegisterResponse")
	proto.RegisterType((*GatewayUpdateResponse)(nil), "relay_chain.GatewayUpdateResponse")
	proto.RegisterType((*InitContractResponse)(nil), "relay_chain.InitContractResponse")
	proto.RegisterType((*UpdateContractResponse)(nil), "relay_chain.UpdateContractResponse")
	proto.RegisterType((*QuerGatewayResponse)(nil), "relay_chain.QuerGatewayResponse")
	proto.RegisterType((*QuerCrossChainResponse)(nil), "relay_chain.QuerCrossChainResponse")
}

func init() { proto.RegisterFile("common/relay_chain/response.proto", fileDescriptor_001517177cae6c98) }

var fileDescriptor_001517177cae6c98 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4f, 0xab, 0xd3, 0x40,
	0x10, 0xef, 0xda, 0x87, 0xda, 0x49, 0x29, 0x8f, 0x54, 0xdb, 0x20, 0x18, 0xe2, 0xc3, 0x43, 0x2f,
	0xaf, 0x81, 0x2a, 0x9e, 0xa5, 0x39, 0x68, 0x2f, 0xa2, 0xd1, 0x77, 0xf1, 0x52, 0xd6, 0xcd, 0x74,
	0x0d, 0x6d, 0x76, 0xc3, 0x66, 0x45, 0x8a, 0x5f, 0xc2, 0x8f, 0xe3, 0x17, 0x10, 0x3c, 0xf6, 0xe8,
	0x51, 0xda, 0x2f, 0x22, 0x49, 0xb6, 0x49, 0x83, 0x22, 0x16, 0x4a, 0x4f, 0xd9, 0xc9, 0xce, 0xef,
	0x1f, 0x3b, 0x0c, 0x3c, 0x62, 0x32, 0x49, 0xa4, 0xf0, 0x15, 0xae, 0xe8, 0x7a, 0xce, 0x3e, 0xd2,
	0x38, 0x3f, 0x67, 0xa9, 0x14, 0x19, 0x8e, 0x53, 0x25, 0xb5, 0xb4, 0xad, 0x83, 0xbb, 0x07, 0x7d,
	0xd3, 0x5f, 0x7e, 0xca, 0x8e, 0xab, 0x1b, 0x18, 0xbe, 0x5d, 0x0b, 0x36, 0x5d, 0x49, 0xb6, 0x7c,
	0x89, 0x34, 0x42, 0x15, 0x1a, 0x0a, 0xdb, 0x83, 0x0b, 0x26, 0x23, 0x74, 0x88, 0x47, 0x46, 0xbd,
	0x49, 0x77, 0x6c, 0x70, 0x81, 0x8c, 0x30, 0x2c, 0x6e, 0x6c, 0x07, 0xee, 0x24, 0x98, 0x65, 0x94,
	0xa3, 0x73, 0xcb, 0x23, 0xa3, 0x4e, 0xb8, 0x2f, 0xaf, 0xbe, 0xc0, 0x70, 0x8a, 0x3c, 0x16, 0x81,
	0x92, 0x59, 0x16, 0xe4, 0xf2, 0x47, 0xd0, 0x3e, 0x86, 0x1e, 0xcb, 0x71, 0xa5, 0xef, 0x79, 0x1c,
	0x19, 0xf6, 0x2e, 0xab, 0xd8, 0x66, 0xd1, 0xa1, 0x78, 0xbb, 0x29, 0xae, 0x61, 0xf8, 0x82, 0x6a,
	0xfc, 0x4c, 0xd7, 0x21, 0xf2, 0x38, 0xd3, 0x47, 0x65, 0x7a, 0x08, 0xc0, 0x4b, 0x70, 0x2d, 0xdc,
	0x31, 0x7f, 0xfe, 0xa9, 0xaa, 0xe0, 0xbe, 0x51, 0xbd, 0x49, 0x23, 0xaa, 0xf1, 0x1c, 0x9a, 0x21,
	0xdc, 0x9b, 0x89, 0x58, 0x07, 0x52, 0x68, 0x45, 0x99, 0x3e, 0xc9, 0xd3, 0xbd, 0x83, 0x41, 0x19,
	0xe0, 0xa4, 0xac, 0xdf, 0x08, 0xf4, 0xdf, 0x7c, 0x42, 0x55, 0x3d, 0x8c, 0xe1, 0x7c, 0x06, 0xdd,
	0x2a, 0xba, 0x58, 0x48, 0x87, 0x78, 0xed, 0x91, 0x35, 0xe9, 0xef, 0xb9, 0x4d, 0xfb, 0x4c, 0x2c,
	0x64, 0x68, 0xf1, 0xba, 0xb0, 0xaf, 0xa1, 0x93, 0x52, 0x8e, 0x25, 0x28, 0xd7, 0xb2, 0x26, 0x97,
	0x7b, 0xd0, 0x6b, 0xca, 0xb1, 0x40, 0xdc, 0x4d, 0xcd, 0xa9, 0xb2, 0xde, 0xfe, 0x1f, 0xeb, 0x17,
	0x4d, 0xeb, 0xdf, 0x09, 0x0c, 0x72, 0xeb, 0x7f, 0x99, 0xe5, 0xe7, 0x70, 0xd9, 0x98, 0xd4, 0x3a,
	0xc1, 0xa0, 0x92, 0xa8, 0x67, 0x36, 0xb7, 0xd4, 0x63, 0x8d, 0xfa, 0x8c, 0x39, 0xa6, 0xaf, 0x7e,
	0x6c, 0x5d, 0xb2, 0xd9, 0xba, 0xe4, 0xd7, 0xd6, 0x25, 0x5f, 0x77, 0x6e, 0x6b, 0xb3, 0x73, 0x5b,
	0x3f, 0x77, 0x6e, 0xeb, 0xfd, 0xd3, 0xc2, 0x7e, 0x42, 0x97, 0xa8, 0xc6, 0x52, 0x71, 0xbf, 0x2e,
	0x7d, 0xcd, 0xe2, 0xf4, 0x9a, 0x4b, 0xff, 0xcf, 0x5d, 0xf3, 0xe1, 0x76, 0xb1, 0x41, 0x9e, 0xfc,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x82, 0xd6, 0x4a, 0xa7, 0x88, 0x04, 0x00, 0x00,
}

func (m *SyncBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeginCrossChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginCrossChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeginCrossChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrossChainId) > 0 {
		i -= len(m.CrossChainId)
		copy(dAtA[i:], m.CrossChainId)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.CrossChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InitContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerGatewayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayInfo) > 0 {
		for iNdEx := len(m.GatewayInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GatewayInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerCrossChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerCrossChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerCrossChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossChainInfo) > 0 {
		for iNdEx := len(m.CrossChainInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *BeginCrossChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.CrossChainId)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *GatewayRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *GatewayUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *InitContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *UpdateContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *QuerGatewayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GatewayInfo) > 0 {
		for _, e := range m.GatewayInfo {
			l = e.Size()
			n += 1 + l + sovResponse(uint64(l))
		}
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovResponse(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func (m *QuerCrossChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainInfo) > 0 {
		for _, e := range m.CrossChainInfo {
			l = e.Size()
			n += 1 + l + sovResponse(uint64(l))
		}
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovResponse(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovResponse(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func sovResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResponse(x uint64) (n int) {
	return sovResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginCrossChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginCrossChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginCrossChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayInfo = append(m.GatewayInfo, &common.GatewayInfo{})
			if err := m.GatewayInfo[len(m.GatewayInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &common.PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerCrossChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerCrossChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerCrossChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainInfo = append(m.CrossChainInfo, &common.CrossChainInfo{})
			if err := m.CrossChainInfo[len(m.CrossChainInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &common.PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= common.Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResponse = fmt.Errorf("proto: unexpected end of group")
)
