// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/relay_chain/request.proto

package relay_chain

import (
	common "chainmaker.org/chainmaker/tcip-go/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 向中继网关发送同步区块请求
type SyncBlockHeaderRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 区块头与网关Id
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 链id
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 区块高度
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// 区块头内容
	BlockHeader []byte `protobuf:"bytes,5,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *SyncBlockHeaderRequest) Reset()         { *m = SyncBlockHeaderRequest{} }
func (m *SyncBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*SyncBlockHeaderRequest) ProtoMessage()    {}
func (*SyncBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{0}
}
func (m *SyncBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncBlockHeaderRequest.Merge(m, src)
}
func (m *SyncBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncBlockHeaderRequest proto.InternalMessageInfo

func (m *SyncBlockHeaderRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *SyncBlockHeaderRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *SyncBlockHeaderRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SyncBlockHeaderRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *SyncBlockHeaderRequest) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// 跨链网关向中继网关发送跨链请求
type BeginCrossChainRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 跨链Id，可以由网关生成
	CrossChainId string `protobuf:"bytes,2,opt,name=cross_chain_id,json=crossChainId,proto3" json:"cross_chain_id,omitempty"`
	// 跨链名称
	CrossChainName string `protobuf:"bytes,3,opt,name=cross_chain_name,json=crossChainName,proto3" json:"cross_chain_name,omitempty"`
	// 跨链标记
	CrossChainFlag string `protobuf:"bytes,4,opt,name=cross_chain_flag,json=crossChainFlag,proto3" json:"cross_chain_flag,omitempty"`
	// 跨链信息
	CrossChainMsg []*common.CrossChainMsg `protobuf:"bytes,5,rep,name=cross_chain_msg,json=crossChainMsg,proto3" json:"cross_chain_msg,omitempty"`
	// 跨链首笔交易内容
	TxContent *common.TxContent `protobuf:"bytes,6,opt,name=tx_content,json=txContent,proto3" json:"tx_content,omitempty"`
	// 发起跨链网关的id
	From string `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	// timeout, s
	Timeout int64 `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// confirm数据
	ConfirmInfo *common.ConfirmInfo `protobuf:"bytes,9,opt,name=confirm_info,json=confirmInfo,proto3" json:"confirm_info,omitempty"`
	// cancel数据
	CancelInfo *common.CancelInfo `protobuf:"bytes,10,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
}

func (m *BeginCrossChainRequest) Reset()         { *m = BeginCrossChainRequest{} }
func (m *BeginCrossChainRequest) String() string { return proto.CompactTextString(m) }
func (*BeginCrossChainRequest) ProtoMessage()    {}
func (*BeginCrossChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{1}
}
func (m *BeginCrossChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginCrossChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginCrossChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeginCrossChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginCrossChainRequest.Merge(m, src)
}
func (m *BeginCrossChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *BeginCrossChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginCrossChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginCrossChainRequest proto.InternalMessageInfo

func (m *BeginCrossChainRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *BeginCrossChainRequest) GetCrossChainId() string {
	if m != nil {
		return m.CrossChainId
	}
	return ""
}

func (m *BeginCrossChainRequest) GetCrossChainName() string {
	if m != nil {
		return m.CrossChainName
	}
	return ""
}

func (m *BeginCrossChainRequest) GetCrossChainFlag() string {
	if m != nil {
		return m.CrossChainFlag
	}
	return ""
}

func (m *BeginCrossChainRequest) GetCrossChainMsg() []*common.CrossChainMsg {
	if m != nil {
		return m.CrossChainMsg
	}
	return nil
}

func (m *BeginCrossChainRequest) GetTxContent() *common.TxContent {
	if m != nil {
		return m.TxContent
	}
	return nil
}

func (m *BeginCrossChainRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BeginCrossChainRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *BeginCrossChainRequest) GetConfirmInfo() *common.ConfirmInfo {
	if m != nil {
		return m.ConfirmInfo
	}
	return nil
}

func (m *BeginCrossChainRequest) GetCancelInfo() *common.CancelInfo {
	if m != nil {
		return m.CancelInfo
	}
	return nil
}

// 网关注册
type GatewayRegisterRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 网关信息
	GatewayInfo *common.GatewayInfo `protobuf:"bytes,2,opt,name=gateway_info,json=gatewayInfo,proto3" json:"gateway_info,omitempty"`
}

func (m *GatewayRegisterRequest) Reset()         { *m = GatewayRegisterRequest{} }
func (m *GatewayRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayRegisterRequest) ProtoMessage()    {}
func (*GatewayRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{2}
}
func (m *GatewayRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRegisterRequest.Merge(m, src)
}
func (m *GatewayRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *GatewayRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRegisterRequest proto.InternalMessageInfo

func (m *GatewayRegisterRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *GatewayRegisterRequest) GetGatewayInfo() *common.GatewayInfo {
	if m != nil {
		return m.GatewayInfo
	}
	return nil
}

// 网关更新
type GatewayUpdateRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 网关信息
	GatewayInfo *common.GatewayInfo `protobuf:"bytes,2,opt,name=gateway_info,json=gatewayInfo,proto3" json:"gateway_info,omitempty"`
}

func (m *GatewayUpdateRequest) Reset()         { *m = GatewayUpdateRequest{} }
func (m *GatewayUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayUpdateRequest) ProtoMessage()    {}
func (*GatewayUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{3}
}
func (m *GatewayUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayUpdateRequest.Merge(m, src)
}
func (m *GatewayUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GatewayUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayUpdateRequest proto.InternalMessageInfo

func (m *GatewayUpdateRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *GatewayUpdateRequest) GetGatewayInfo() *common.GatewayInfo {
	if m != nil {
		return m.GatewayInfo
	}
	return nil
}

// 安装区块头同步和spv验证合约
type InitContractRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 合约名，spv合约参数和名称是固定好的，不需要传
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// 版本号
	ContractVersion string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// bytecode base64
	ByteCode []byte `protobuf:"bytes,4,opt,name=byte_code,json=byteCode,proto3" json:"byte_code,omitempty"`
	// runtimeType
	RuntimeType common.ChainmakerRuntimeType `protobuf:"varint,5,opt,name=runtime_type,json=runtimeType,proto3,enum=common.ChainmakerRuntimeType" json:"runtime_type,omitempty"`
	// 初始化参数
	KeyValuePairs []*common.ContractKeyValuePair `protobuf:"bytes,6,rep,name=key_value_pairs,json=keyValuePairs,proto3" json:"key_value_pairs,omitempty"`
	// 网关id
	GatewayId string `protobuf:"bytes,7,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 链id
	ChainId string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *InitContractRequest) Reset()         { *m = InitContractRequest{} }
func (m *InitContractRequest) String() string { return proto.CompactTextString(m) }
func (*InitContractRequest) ProtoMessage()    {}
func (*InitContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{4}
}
func (m *InitContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitContractRequest.Merge(m, src)
}
func (m *InitContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitContractRequest proto.InternalMessageInfo

func (m *InitContractRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *InitContractRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *InitContractRequest) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *InitContractRequest) GetByteCode() []byte {
	if m != nil {
		return m.ByteCode
	}
	return nil
}

func (m *InitContractRequest) GetRuntimeType() common.ChainmakerRuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return common.ChainmakerRuntimeType_INVALID
}

func (m *InitContractRequest) GetKeyValuePairs() []*common.ContractKeyValuePair {
	if m != nil {
		return m.KeyValuePairs
	}
	return nil
}

func (m *InitContractRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *InitContractRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// 升级区块头同步和spv验证合约
type UpdateContractRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 合约名
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// 版本号
	ContractVersion string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// bytecode
	ByteCode []byte `protobuf:"bytes,4,opt,name=byte_code,json=byteCode,proto3" json:"byte_code,omitempty"`
	// runtimeType
	RuntimeType common.ChainmakerRuntimeType `protobuf:"varint,5,opt,name=runtime_type,json=runtimeType,proto3,enum=common.ChainmakerRuntimeType" json:"runtime_type,omitempty"`
	// 初始化参数
	KeyValuePairs []*common.ContractKeyValuePair `protobuf:"bytes,6,rep,name=key_value_pairs,json=keyValuePairs,proto3" json:"key_value_pairs,omitempty"`
	// 网关id
	GatewayId string `protobuf:"bytes,7,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 链id
	ChainId string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *UpdateContractRequest) Reset()         { *m = UpdateContractRequest{} }
func (m *UpdateContractRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContractRequest) ProtoMessage()    {}
func (*UpdateContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{5}
}
func (m *UpdateContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContractRequest.Merge(m, src)
}
func (m *UpdateContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContractRequest proto.InternalMessageInfo

func (m *UpdateContractRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *UpdateContractRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *UpdateContractRequest) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *UpdateContractRequest) GetByteCode() []byte {
	if m != nil {
		return m.ByteCode
	}
	return nil
}

func (m *UpdateContractRequest) GetRuntimeType() common.ChainmakerRuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return common.ChainmakerRuntimeType_INVALID
}

func (m *UpdateContractRequest) GetKeyValuePairs() []*common.ContractKeyValuePair {
	if m != nil {
		return m.KeyValuePairs
	}
	return nil
}

func (m *UpdateContractRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *UpdateContractRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// 查询网关信息
type QuerGatewayRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 网关id（可选）
	GatewayId string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// 每页多少数据(可选)
	PageSize uint64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 第几页(可选)
	PageNumber uint64 `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (m *QuerGatewayRequest) Reset()         { *m = QuerGatewayRequest{} }
func (m *QuerGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*QuerGatewayRequest) ProtoMessage()    {}
func (*QuerGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{6}
}
func (m *QuerGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerGatewayRequest.Merge(m, src)
}
func (m *QuerGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerGatewayRequest proto.InternalMessageInfo

func (m *QuerGatewayRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *QuerGatewayRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *QuerGatewayRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *QuerGatewayRequest) GetPageNumber() uint64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

// 查询跨链信息
type QuerCrossChainRequest struct {
	// 请求消息版本
	Version common.Version `protobuf:"varint,1,opt,name=version,proto3,enum=common.Version" json:"version,omitempty"`
	// 跨链id（可选）
	CrossChainId string `protobuf:"bytes,2,opt,name=cross_chain_id,json=crossChainId,proto3" json:"cross_chain_id,omitempty"`
	// 每页多少数据(可选)
	PageSize uint64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 第几页(可选)
	PageNumber uint64 `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (m *QuerCrossChainRequest) Reset()         { *m = QuerCrossChainRequest{} }
func (m *QuerCrossChainRequest) String() string { return proto.CompactTextString(m) }
func (*QuerCrossChainRequest) ProtoMessage()    {}
func (*QuerCrossChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f7816dc7b6d1d6, []int{7}
}
func (m *QuerCrossChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerCrossChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerCrossChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerCrossChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerCrossChainRequest.Merge(m, src)
}
func (m *QuerCrossChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerCrossChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerCrossChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerCrossChainRequest proto.InternalMessageInfo

func (m *QuerCrossChainRequest) GetVersion() common.Version {
	if m != nil {
		return m.Version
	}
	return common.Version_V1_0_0
}

func (m *QuerCrossChainRequest) GetCrossChainId() string {
	if m != nil {
		return m.CrossChainId
	}
	return ""
}

func (m *QuerCrossChainRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *QuerCrossChainRequest) GetPageNumber() uint64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*SyncBlockHeaderRequest)(nil), "relay_chain.SyncBlockHeaderRequest")
	proto.RegisterType((*BeginCrossChainRequest)(nil), "relay_chain.BeginCrossChainRequest")
	proto.RegisterType((*GatewayRegisterRequest)(nil), "relay_chain.GatewayRegisterRequest")
	proto.RegisterType((*GatewayUpdateRequest)(nil), "relay_chain.GatewayUpdateRequest")
	proto.RegisterType((*InitContractRequest)(nil), "relay_chain.InitContractRequest")
	proto.RegisterType((*UpdateContractRequest)(nil), "relay_chain.UpdateContractRequest")
	proto.RegisterType((*QuerGatewayRequest)(nil), "relay_chain.QuerGatewayRequest")
	proto.RegisterType((*QuerCrossChainRequest)(nil), "relay_chain.QuerCrossChainRequest")
}

func init() { proto.RegisterFile("common/relay_chain/request.proto", fileDescriptor_91f7816dc7b6d1d6) }

var fileDescriptor_91f7816dc7b6d1d6 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x6e, 0xdb, 0x36,
	0x18, 0x8e, 0x6c, 0x27, 0xb6, 0x7f, 0x39, 0x76, 0xc6, 0x2c, 0x81, 0xb6, 0x2c, 0x9e, 0xe6, 0xed,
	0xa0, 0x1c, 0x16, 0x0f, 0xce, 0x90, 0xdb, 0x80, 0x21, 0x1e, 0xb6, 0x19, 0xc3, 0x82, 0x4d, 0x49,
	0x73, 0xe8, 0x45, 0xa0, 0x29, 0x5a, 0x11, 0x6c, 0x89, 0x2e, 0x45, 0xa7, 0x51, 0xfa, 0x12, 0x7d,
	0x80, 0x9e, 0xfb, 0x22, 0xbd, 0xb4, 0xb7, 0x1c, 0x7b, 0x2c, 0x92, 0x07, 0x28, 0xfa, 0x06, 0x05,
	0x49, 0x49, 0x76, 0x52, 0xa0, 0x87, 0xb4, 0xc8, 0xa9, 0x27, 0xf1, 0xff, 0xfe, 0xef, 0xe7, 0xff,
	0x51, 0xfc, 0x44, 0x0a, 0x6c, 0xc2, 0xa2, 0x88, 0xc5, 0x5d, 0x4e, 0x27, 0x38, 0xf5, 0xc8, 0x29,
	0x0e, 0xe5, 0xf8, 0xd1, 0x8c, 0x26, 0x62, 0x77, 0xca, 0x99, 0x60, 0xc8, 0x5c, 0x48, 0x7d, 0xbb,
	0x9e, 0xd1, 0xf5, 0x43, 0x33, 0x3a, 0x2f, 0x0c, 0xd8, 0x3c, 0x4a, 0x63, 0x72, 0x30, 0x61, 0x64,
	0xfc, 0x37, 0xc5, 0x3e, 0xe5, 0xae, 0x9e, 0x02, 0xed, 0x40, 0xf5, 0x8c, 0xf2, 0x24, 0x64, 0xb1,
	0x65, 0xd8, 0x86, 0xd3, 0xec, 0xb5, 0x76, 0xb3, 0xd2, 0x13, 0x0d, 0xbb, 0x79, 0x1e, 0x6d, 0x03,
	0x04, 0x58, 0xd0, 0xc7, 0x38, 0xf5, 0x42, 0xdf, 0x2a, 0xd9, 0x86, 0x53, 0x77, 0xeb, 0x19, 0x32,
	0xf0, 0xd1, 0x37, 0x50, 0x53, 0x12, 0x64, 0xb2, 0xac, 0x92, 0x55, 0x15, 0x0f, 0x7c, 0xf4, 0x03,
	0x34, 0x86, 0xb2, 0xb5, 0x77, 0x4a, 0xc3, 0xe0, 0x54, 0x58, 0x15, 0xdb, 0x70, 0x2a, 0xae, 0x39,
	0xd4, 0x72, 0x24, 0xb4, 0x48, 0x91, 0xf2, 0xac, 0x65, 0xdb, 0x70, 0x1a, 0x05, 0x45, 0x42, 0x9d,
	0x57, 0x65, 0xd8, 0x3c, 0xa0, 0x41, 0x18, 0xf7, 0x39, 0x4b, 0x92, 0xbe, 0x9c, 0xfb, 0x0e, 0xab,
	0xf8, 0x09, 0x9a, 0x44, 0xd6, 0x7b, 0x85, 0x58, 0xbd, 0x92, 0x06, 0x29, 0x66, 0x1d, 0xf8, 0xc8,
	0x81, 0xb5, 0x45, 0x56, 0x8c, 0x23, 0x9a, 0x2d, 0xaa, 0x39, 0xe7, 0x1d, 0xe2, 0x88, 0xde, 0x66,
	0x8e, 0x26, 0x38, 0x50, 0xeb, 0xbb, 0xc1, 0xfc, 0x73, 0x82, 0x03, 0xf4, 0x1b, 0xb4, 0x16, 0x99,
	0x51, 0x12, 0x58, 0xcb, 0x76, 0xd9, 0x31, 0x7b, 0x1b, 0xb9, 0xd8, 0xf9, 0xc2, 0xfe, 0x4d, 0x02,
	0x77, 0x95, 0x2c, 0x86, 0xe8, 0x17, 0x00, 0x71, 0xee, 0x11, 0x16, 0x0b, 0x1a, 0x0b, 0x6b, 0xc5,
	0x36, 0x1c, 0xb3, 0xf7, 0x55, 0x5e, 0x79, 0x7c, 0xde, 0xd7, 0x09, 0xb7, 0x2e, 0xf2, 0x21, 0x42,
	0x50, 0x19, 0x71, 0x16, 0x59, 0x55, 0x25, 0x47, 0x8d, 0x91, 0x05, 0x55, 0x11, 0x46, 0x94, 0xcd,
	0x84, 0x55, 0xb3, 0x0d, 0xa7, 0xec, 0xe6, 0x21, 0xda, 0x87, 0x06, 0x61, 0xf1, 0x28, 0xe4, 0x91,
	0x17, 0xc6, 0x23, 0x66, 0xd5, 0x55, 0x87, 0xf5, 0x42, 0x9b, 0xce, 0x0d, 0xe2, 0x11, 0x73, 0x4d,
	0x32, 0x0f, 0xd0, 0x1e, 0x98, 0x04, 0xc7, 0x84, 0x4e, 0x74, 0x19, 0xa8, 0x32, 0x54, 0x94, 0xa9,
	0x94, 0xaa, 0x02, 0x52, 0x8c, 0x3b, 0x4f, 0x60, 0xf3, 0x2f, 0xed, 0x1c, 0x97, 0x06, 0x61, 0x22,
	0xee, 0x64, 0xc8, 0x7d, 0x68, 0x14, 0x86, 0x94, 0xad, 0x4b, 0x37, 0x15, 0x67, 0x0d, 0xb4, 0xe2,
	0x60, 0x1e, 0x74, 0x52, 0xf8, 0x3a, 0xcb, 0x3d, 0x98, 0xfa, 0x58, 0xd0, 0x7b, 0x6c, 0xfd, 0xb6,
	0x04, 0xeb, 0x83, 0x38, 0x14, 0x72, 0x8b, 0x38, 0x26, 0xe2, 0x0e, 0xad, 0x7f, 0x84, 0x55, 0x92,
	0x55, 0x6b, 0x5f, 0xe6, 0xfe, 0xcd, 0x40, 0xe5, 0xca, 0x1d, 0x58, 0x2b, 0x48, 0xf9, 0xc4, 0xda,
	0xbf, 0xad, 0x1c, 0xcf, 0x26, 0x46, 0x5b, 0x50, 0x1f, 0xa6, 0x82, 0x7a, 0x84, 0xf9, 0x54, 0x39,
	0xb7, 0xe1, 0xd6, 0x24, 0xd0, 0x67, 0x3e, 0x45, 0xbf, 0x43, 0x83, 0xcf, 0x62, 0x69, 0x11, 0x4f,
	0xa4, 0x53, 0xaa, 0x3e, 0xcb, 0x66, 0x6f, 0xbb, 0xd8, 0x5d, 0x69, 0xce, 0x08, 0x8f, 0x29, 0x77,
	0x35, 0xeb, 0x38, 0x9d, 0x52, 0xd7, 0xe4, 0xf3, 0x00, 0xfd, 0x01, 0xad, 0x31, 0x4d, 0xbd, 0x33,
	0x3c, 0x99, 0x51, 0x6f, 0x8a, 0x43, 0x9e, 0x58, 0x2b, 0xca, 0xf5, 0xdf, 0x2d, 0x38, 0x4b, 0x09,
	0xfa, 0x87, 0xa6, 0x27, 0x92, 0xf5, 0x1f, 0x0e, 0xb9, 0xbb, 0x3a, 0x5e, 0x88, 0x92, 0x5b, 0x67,
	0x4f, 0xf5, 0x63, 0x67, 0x4f, 0xed, 0xc6, 0xd9, 0xd3, 0x79, 0x57, 0x82, 0x0d, 0xbd, 0xcd, 0x5f,
	0xde, 0xf9, 0x7d, 0xbd, 0xf3, 0x67, 0x06, 0xa0, 0xff, 0x67, 0x94, 0x17, 0x9f, 0xf8, 0xe7, 0xbe,
	0x6b, 0xb6, 0xa0, 0x3e, 0xc5, 0x01, 0xf5, 0x92, 0xf0, 0x42, 0x9f, 0xcb, 0x15, 0xb7, 0x26, 0x81,
	0xa3, 0xf0, 0x82, 0xa2, 0xef, 0xc1, 0x54, 0xc9, 0x78, 0x16, 0x0d, 0x29, 0xcf, 0x2e, 0x1b, 0x90,
	0xd0, 0xa1, 0x42, 0x3a, 0xcf, 0x0d, 0xd8, 0x90, 0xf2, 0xee, 0xe1, 0x1e, 0xf9, 0x24, 0xa1, 0x07,
	0x87, 0x2f, 0xaf, 0xda, 0xc6, 0xe5, 0x55, 0xdb, 0x78, 0x73, 0xd5, 0x36, 0x9e, 0x5e, 0xb7, 0x97,
	0x2e, 0xaf, 0xdb, 0x4b, 0xaf, 0xaf, 0xdb, 0x4b, 0x0f, 0x7f, 0x25, 0x85, 0x0b, 0x76, 0x19, 0x0f,
	0xba, 0xf3, 0xb0, 0x2b, 0x48, 0x38, 0xfd, 0x39, 0x60, 0xdd, 0x0f, 0xff, 0x1b, 0x86, 0x2b, 0xea,
	0x77, 0x60, 0xef, 0x7d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xaf, 0x89, 0x95, 0x54, 0x08, 0x00,
	0x00,
}

func (m *SyncBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeader) > 0 {
		i -= len(m.BlockHeader)
		copy(dAtA[i:], m.BlockHeader)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.BlockHeader)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeginCrossChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginCrossChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeginCrossChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancelInfo != nil {
		{
			size, err := m.CancelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ConfirmInfo != nil {
		{
			size, err := m.ConfirmInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Timeout != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x40
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TxContent != nil {
		{
			size, err := m.TxContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CrossChainMsg) > 0 {
		for iNdEx := len(m.CrossChainMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CrossChainFlag) > 0 {
		i -= len(m.CrossChainFlag)
		copy(dAtA[i:], m.CrossChainFlag)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CrossChainFlag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CrossChainName) > 0 {
		i -= len(m.CrossChainName)
		copy(dAtA[i:], m.CrossChainName)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CrossChainName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrossChainId) > 0 {
		i -= len(m.CrossChainId)
		copy(dAtA[i:], m.CrossChainId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CrossChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GatewayInfo != nil {
		{
			size, err := m.GatewayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GatewayInfo != nil {
		{
			size, err := m.GatewayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InitContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyValuePairs) > 0 {
		for iNdEx := len(m.KeyValuePairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValuePairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RuntimeType != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.RuntimeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ByteCode) > 0 {
		i -= len(m.ByteCode)
		copy(dAtA[i:], m.ByteCode)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ByteCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyValuePairs) > 0 {
		for iNdEx := len(m.KeyValuePairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValuePairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RuntimeType != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.RuntimeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ByteCode) > 0 {
		i -= len(m.ByteCode)
		copy(dAtA[i:], m.ByteCode)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ByteCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageNumber != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerCrossChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerCrossChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerCrossChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageNumber != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CrossChainId) > 0 {
		i -= len(m.CrossChainId)
		copy(dAtA[i:], m.CrossChainId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CrossChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRequest(uint64(m.BlockHeight))
	}
	l = len(m.BlockHeader)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *BeginCrossChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.CrossChainId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.CrossChainName)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.CrossChainFlag)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if len(m.CrossChainMsg) > 0 {
		for _, e := range m.CrossChainMsg {
			l = e.Size()
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	if m.TxContent != nil {
		l = m.TxContent.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovRequest(uint64(m.Timeout))
	}
	if m.ConfirmInfo != nil {
		l = m.ConfirmInfo.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.CancelInfo != nil {
		l = m.CancelInfo.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *GatewayRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	if m.GatewayInfo != nil {
		l = m.GatewayInfo.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *GatewayUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	if m.GatewayInfo != nil {
		l = m.GatewayInfo.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *InitContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ByteCode)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.RuntimeType != 0 {
		n += 1 + sovRequest(uint64(m.RuntimeType))
	}
	if len(m.KeyValuePairs) > 0 {
		for _, e := range m.KeyValuePairs {
			l = e.Size()
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *UpdateContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ByteCode)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.RuntimeType != 0 {
		n += 1 + sovRequest(uint64(m.RuntimeType))
	}
	if len(m.KeyValuePairs) > 0 {
		for _, e := range m.KeyValuePairs {
			l = e.Size()
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *QuerGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequest(uint64(m.PageSize))
	}
	if m.PageNumber != 0 {
		n += 1 + sovRequest(uint64(m.PageNumber))
	}
	return n
}

func (m *QuerCrossChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRequest(uint64(m.Version))
	}
	l = len(m.CrossChainId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequest(uint64(m.PageSize))
	}
	if m.PageNumber != 0 {
		n += 1 + sovRequest(uint64(m.PageNumber))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeader = append(m.BlockHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHeader == nil {
				m.BlockHeader = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginCrossChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginCrossChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginCrossChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainMsg = append(m.CrossChainMsg, &common.CrossChainMsg{})
			if err := m.CrossChainMsg[len(m.CrossChainMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxContent == nil {
				m.TxContent = &common.TxContent{}
			}
			if err := m.TxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmInfo == nil {
				m.ConfirmInfo = &common.ConfirmInfo{}
			}
			if err := m.ConfirmInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelInfo == nil {
				m.CancelInfo = &common.CancelInfo{}
			}
			if err := m.CancelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayInfo == nil {
				m.GatewayInfo = &common.GatewayInfo{}
			}
			if err := m.GatewayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayInfo == nil {
				m.GatewayInfo = &common.GatewayInfo{}
			}
			if err := m.GatewayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteCode = append(m.ByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteCode == nil {
				m.ByteCode = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeType", wireType)
			}
			m.RuntimeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuntimeType |= common.ChainmakerRuntimeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValuePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValuePairs = append(m.KeyValuePairs, &common.ContractKeyValuePair{})
			if err := m.KeyValuePairs[len(m.KeyValuePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteCode = append(m.ByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteCode == nil {
				m.ByteCode = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeType", wireType)
			}
			m.RuntimeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuntimeType |= common.ChainmakerRuntimeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValuePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValuePairs = append(m.KeyValuePairs, &common.ContractKeyValuePair{})
			if err := m.KeyValuePairs[len(m.KeyValuePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerCrossChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerCrossChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerCrossChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= common.Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
