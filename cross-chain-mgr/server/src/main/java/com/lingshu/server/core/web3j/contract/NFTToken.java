package com.lingshu.server.core.web3j.contract;

import com.lingshu.server.core.web3j.chainmaker.client.ChainmakerChainClient;
import com.lingshu.server.core.web3j.chainmaker.util.ChainmakerAccountUtil;
import lombok.Getter;
import org.chainmaker.pb.common.ContractOuterClass;
import org.chainmaker.sdk.User;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("rawtypes")
public class NFTToken extends ChainmakerContract {

    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162003275380380620032758339818101604052810190620000379190620001f2565b81600190805190602001906200004f929190620000d0565b50806002908051906020019062000068929190620000d0565b5062000079620000c860201b60201c565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550436000819055505050620003d5565b600033905090565b828054620000de90620002fa565b90600052602060002090601f0160209004810192826200010257600085556200014e565b82601f106200011d57805160ff19168380011785556200014e565b828001600101855582156200014e579182015b828111156200014d57825182559160200191906001019062000130565b5b5090506200015d919062000161565b5090565b5b808211156200017c57600081600090555060010162000162565b5090565b60006200019762000191846200028e565b62000265565b905082815260208101848484011115620001b057600080fd5b620001bd848285620002c4565b509392505050565b600082601f830112620001d757600080fd5b8151620001e984826020860162000180565b91505092915050565b600080604083850312156200020657600080fd5b600083015167ffffffffffffffff8111156200022157600080fd5b6200022f85828601620001c5565b925050602083015167ffffffffffffffff8111156200024d57600080fd5b6200025b85828601620001c5565b9150509250929050565b60006200027162000284565b90506200027f828262000330565b919050565b6000604051905090565b600067ffffffffffffffff821115620002ac57620002ab62000395565b5b620002b782620003c4565b9050602081019050919050565b60005b83811015620002e4578082015181840152602081019050620002c7565b83811115620002f4576000848401525b50505050565b600060028204905060018216806200031357607f821691505b602082108114156200032a576200032962000366565b5b50919050565b6200033b82620003c4565b810181811067ffffffffffffffff821117156200035d576200035c62000395565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b612e9080620003e56000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad578063c87b56dd11610071578063c87b56dd14610353578063d3fc986414610383578063e985e9c51461039f578063f851a440146103cf578063fc9dc4ff146103ed5761012c565b806370a082311461029d57806395d89b41146102cd578063a22cb465146102eb578063b88d4fde14610307578063b89db65d146103235761012c565b8063095ea7b3116100f4578063095ea7b3146101e957806315359a061461020557806323b872dd1461023557806342842e0e146102515780636352211e1461026d5761012c565b806301b793301461013157806301ffc9a71461014d57806305b9c0351461017d57806306fdde031461019b578063081812fc146101b9575b600080fd5b61014b60048036038101906101469190611c18565b61040b565b005b61016760048036038101906101629190611dc8565b6104f5565b60405161017491906123b9565b60405180910390f35b6101856105d7565b6040516101929190612616565b60405180910390f35b6101a36105dd565b6040516101b091906123d4565b60405180910390f35b6101d360048036038101906101ce9190611ef2565b61066f565b6040516101e09190612337565b60405180910390f35b61020360048036038101906101fe9190611d25565b6106f4565b005b61021f600480360381019061021a9190611e1a565b61080c565b60405161022c9190612337565b60405180910390f35b61024f600480360381019061024a9190611b4e565b6108a1565b005b61026b60048036038101906102669190611b4e565b610901565b005b61028760048036038101906102829190611ef2565b610921565b6040516102949190612337565b60405180910390f35b6102b760048036038101906102b29190611ae9565b6109d3565b6040516102c49190612616565b60405180910390f35b6102d5610a8b565b6040516102e291906123d4565b60405180910390f35b61030560048036038101906103009190611ce9565b610b1d565b005b610321600480360381019061031c9190611b9d565b610b33565b005b61033d60048036038101906103389190611e5b565b610b95565b60405161034a919061239e565b60405180910390f35b61036d60048036038101906103689190611ef2565b610c32565b60405161037a91906123d4565b60405180910390f35b61039d60048036038101906103989190611d61565b610d25565b005b6103b960048036038101906103b49190611b12565b610dd5565b6040516103c691906123b9565b60405180910390f35b6103d7610e69565b6040516103e49190612337565b60405180910390f35b6103f5610e8f565b6040516104029190612616565b60405180910390f35b600160001b61041b848484610b95565b600060028110610454577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015114610499576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610490906124f6565b60405180910390fd5b6104a38685610e98565b6104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d9906125d6565b60405180910390fd5b6104ed868686610f76565b505050505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105c057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105d057506105cf826111d2565b5b9050919050565b60005481565b6060600180546105ec90612872565b80601f016020809104026020016040519081016040528092919081815260200182805461061890612872565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b5050505050905090565b600061067a8261123c565b6106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090612536565b60405180910390fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106ff82610921565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076790612596565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661078f6112a8565b73ffffffffffffffffffffffffffffffffffffffff1614806107be57506107bd816107b86112a8565b610dd5565b5b6107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490612496565b60405180910390fd5b61080783836112b0565b505050565b60006040825114610852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610849906125f6565b60405180910390fd5b600082805190602001209050600073ffffffffffffffffffffffffffffffffffffffff7b0fffffffffffffffffffffffffffffffff000000000000000000000083041690508092505050919050565b6108b26108ac6112a8565b82610e98565b6108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e8906125d6565b60405180910390fd5b6108fc838383610f76565b505050565b61091c83838360405180602001604052806000815250610b33565b505050565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c1906124d6565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3b906124b6565b60405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060028054610a9a90612872565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac690612872565b8015610b135780601f10610ae857610100808354040283529160200191610b13565b820191906000526020600020905b815481529060010190602001808311610af657829003601f168201915b5050505050905090565b610b2f610b286112a8565b8383611369565b5050565b610b44610b3e6112a8565b83610e98565b610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a906125d6565b60405180910390fd5b610b8f848484846114d6565b50505050565b610b9d6118eb565b610ba56118eb565b6000855186865187875188604051602001610bc5969594939291906122d3565b604051602081830303815290604052905060008151905060408382602085016103ef6000fa8060008114610bf857610c23565b6040517f566572696669636174696f6e206661696c6564000000000000000000000000008152601381fd5b50508293505050509392505050565b6060610c3d8261123c565b610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7390612576565b60405180910390fd5b6000600360008481526020019081526020016000208054610c9c90612872565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc890612872565b8015610d155780601f10610cea57610100808354040283529160200191610d15565b820191906000526020600020905b815481529060010190602001808311610cf857829003601f168201915b5050505050905080915050919050565b610d2d6112a8565b73ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db3906125b6565b60405180910390fd5b610dc68383611532565b610dd08282611700565b505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054905090565b6000610ea38261123c565b610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990612476565b60405180910390fd5b6000610eed83610921565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f5c57508373ffffffffffffffffffffffffffffffffffffffff16610f448461066f565b73ffffffffffffffffffffffffffffffffffffffff16145b80610f6d5750610f6c8185610dd5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f9682610921565b73ffffffffffffffffffffffffffffffffffffffff1614610fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe390612556565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390612436565b60405180910390fd5b61106783838361172c565b6110726000826112b0565b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110c2919061277e565b925050819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111199190612728565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661132383610921565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf90612456565b60405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114c991906123b9565b60405180910390a3505050565b6114e1848484610f76565b6114ed84848484611731565b61152c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611523906123f6565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159990612516565b60405180910390fd5b6115ab8161123c565b156115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e290612416565b60405180910390fd5b6115f76000838361172c565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116479190612728565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8060036000848152602001908152602001600020908051906020019061172792919061190d565b505050565b505050565b60006117528473ffffffffffffffffffffffffffffffffffffffff166118c8565b156118bb578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261177b6112a8565b8786866040518563ffffffff1660e01b815260040161179d9493929190612352565b602060405180830381600087803b1580156117b757600080fd5b505af19250505080156117e857506040513d601f19601f820116820180604052508101906117e59190611df1565b60015b61186b573d8060008114611818576040519150601f19603f3d011682016040523d82523d6000602084013e61181d565b606091505b50600081511415611863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185a906123f6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118c0565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060400160405280600290602082028036833780820191505090505090565b82805461191990612872565b90600052602060002090601f01602090048101928261193b5760008555611982565b82601f1061195457805160ff1916838001178555611982565b82800160010185558215611982579182015b82811115611981578251825591602001919060010190611966565b5b50905061198f9190611993565b5090565b5b808211156119ac576000816000905550600101611994565b5090565b60006119c36119be84612656565b612631565b9050828152602081018484840111156119db57600080fd5b6119e6848285612830565b509392505050565b6000611a016119fc84612687565b612631565b905082815260208101848484011115611a1957600080fd5b611a24848285612830565b509392505050565b600081359050611a3b81612dfe565b92915050565b600081359050611a5081612e15565b92915050565b600081359050611a6581612e2c565b92915050565b600081519050611a7a81612e2c565b92915050565b600082601f830112611a9157600080fd5b8135611aa18482602086016119b0565b91505092915050565b600082601f830112611abb57600080fd5b8135611acb8482602086016119ee565b91505092915050565b600081359050611ae381612e43565b92915050565b600060208284031215611afb57600080fd5b6000611b0984828501611a2c565b91505092915050565b60008060408385031215611b2557600080fd5b6000611b3385828601611a2c565b9250506020611b4485828601611a2c565b9150509250929050565b600080600060608486031215611b6357600080fd5b6000611b7186828701611a2c565b9350506020611b8286828701611a2c565b9250506040611b9386828701611ad4565b9150509250925092565b60008060008060808587031215611bb357600080fd5b6000611bc187828801611a2c565b9450506020611bd287828801611a2c565b9350506040611be387828801611ad4565b925050606085013567ffffffffffffffff811115611c0057600080fd5b611c0c87828801611a80565b91505092959194509250565b60008060008060008060c08789031215611c3157600080fd5b6000611c3f89828a01611a2c565b9650506020611c5089828a01611a2c565b9550506040611c6189828a01611ad4565b945050606087013567ffffffffffffffff811115611c7e57600080fd5b611c8a89828a01611a80565b935050608087013567ffffffffffffffff811115611ca757600080fd5b611cb389828a01611a80565b92505060a087013567ffffffffffffffff811115611cd057600080fd5b611cdc89828a01611a80565b9150509295509295509295565b60008060408385031215611cfc57600080fd5b6000611d0a85828601611a2c565b9250506020611d1b85828601611a41565b9150509250929050565b60008060408385031215611d3857600080fd5b6000611d4685828601611a2c565b9250506020611d5785828601611ad4565b9150509250929050565b600080600060608486031215611d7657600080fd5b6000611d8486828701611a2c565b9350506020611d9586828701611ad4565b925050604084013567ffffffffffffffff811115611db257600080fd5b611dbe86828701611aaa565b9150509250925092565b600060208284031215611dda57600080fd5b6000611de884828501611a56565b91505092915050565b600060208284031215611e0357600080fd5b6000611e1184828501611a6b565b91505092915050565b600060208284031215611e2c57600080fd5b600082013567ffffffffffffffff811115611e4657600080fd5b611e5284828501611a80565b91505092915050565b600080600060608486031215611e7057600080fd5b600084013567ffffffffffffffff811115611e8a57600080fd5b611e9686828701611a80565b935050602084013567ffffffffffffffff811115611eb357600080fd5b611ebf86828701611a80565b925050604084013567ffffffffffffffff811115611edc57600080fd5b611ee886828701611a80565b9150509250925092565b600060208284031215611f0457600080fd5b6000611f1284828501611ad4565b91505092915050565b6000611f278383611fa8565b60208301905092915050565b611f3c816127b2565b82525050565b611f4b816126c2565b611f5581846126f0565b9250611f60826126b8565b8060005b83811015611f91578151611f788782611f1b565b9650611f83836126e3565b925050600181019050611f64565b505050505050565b611fa2816127c4565b82525050565b611fb1816127d0565b82525050565b6000611fc2826126cd565b611fcc81856126fb565b9350611fdc81856020860161283f565b611fe58161296c565b840191505092915050565b6000611ffb826126cd565b612005818561270c565b935061201581856020860161283f565b80840191505092915050565b600061202c826126d8565b6120368185612717565b935061204681856020860161283f565b61204f8161296c565b840191505092915050565b6000612067603283612717565b91506120728261297d565b604082019050919050565b600061208a601c83612717565b9150612095826129cc565b602082019050919050565b60006120ad602483612717565b91506120b8826129f5565b604082019050919050565b60006120d0601983612717565b91506120db82612a44565b602082019050919050565b60006120f3602c83612717565b91506120fe82612a6d565b604082019050919050565b6000612116603883612717565b915061212182612abc565b604082019050919050565b6000612139602a83612717565b915061214482612b0b565b604082019050919050565b600061215c602983612717565b915061216782612b5a565b604082019050919050565b600061217f602283612717565b915061218a82612ba9565b604082019050919050565b60006121a2602083612717565b91506121ad82612bf8565b602082019050919050565b60006121c5602c83612717565b91506121d082612c21565b604082019050919050565b60006121e8602983612717565b91506121f382612c70565b604082019050919050565b600061220b602f83612717565b915061221682612cbf565b604082019050919050565b600061222e602183612717565b915061223982612d0e565b604082019050919050565b6000612251600e83612717565b915061225c82612d5d565b602082019050919050565b6000612274603183612717565b915061227f82612d86565b604082019050919050565b6000612297601983612717565b91506122a282612dd5565b602082019050919050565b6122b681612826565b82525050565b6122cd6122c882612826565b6128d5565b82525050565b60006122df82896122bc565b6020820191506122ef8288611ff0565b91506122fb82876122bc565b60208201915061230b8286611ff0565b915061231782856122bc565b6020820191506123278284611ff0565b9150819050979650505050505050565b600060208201905061234c6000830184611f33565b92915050565b60006080820190506123676000830187611f33565b6123746020830186611f33565b61238160408301856122ad565b81810360608301526123938184611fb7565b905095945050505050565b60006040820190506123b36000830184611f42565b92915050565b60006020820190506123ce6000830184611f99565b92915050565b600060208201905081810360008301526123ee8184612021565b905092915050565b6000602082019050818103600083015261240f8161205a565b9050919050565b6000602082019050818103600083015261242f8161207d565b9050919050565b6000602082019050818103600083015261244f816120a0565b9050919050565b6000602082019050818103600083015261246f816120c3565b9050919050565b6000602082019050818103600083015261248f816120e6565b9050919050565b600060208201905081810360008301526124af81612109565b9050919050565b600060208201905081810360008301526124cf8161212c565b9050919050565b600060208201905081810360008301526124ef8161214f565b9050919050565b6000602082019050818103600083015261250f81612172565b9050919050565b6000602082019050818103600083015261252f81612195565b9050919050565b6000602082019050818103600083015261254f816121b8565b9050919050565b6000602082019050818103600083015261256f816121db565b9050919050565b6000602082019050818103600083015261258f816121fe565b9050919050565b600060208201905081810360008301526125af81612221565b9050919050565b600060208201905081810360008301526125cf81612244565b9050919050565b600060208201905081810360008301526125ef81612267565b9050919050565b6000602082019050818103600083015261260f8161228a565b9050919050565b600060208201905061262b60008301846122ad565b92915050565b600061263b61264c565b905061264782826128a4565b919050565b6000604051905090565b600067ffffffffffffffff8211156126715761267061293d565b5b61267a8261296c565b9050602081019050919050565b600067ffffffffffffffff8211156126a2576126a161293d565b5b6126ab8261296c565b9050602081019050919050565b6000819050919050565b600060029050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061273382612826565b915061273e83612826565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612773576127726128df565b5b828201905092915050565b600061278982612826565b915061279483612826565b9250828210156127a7576127a66128df565b5b828203905092915050565b60006127bd82612806565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561285d578082015181840152602081019050612842565b8381111561286c576000848401525b50505050565b6000600282049050600182168061288a57607f821691505b6020821081141561289e5761289d61290e565b5b50919050565b6128ad8261296c565b810181811067ffffffffffffffff821117156128cc576128cb61293d565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20766572696679207369676e6174757265206973206661696c60008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f6e6f207065726d697373696f6e73000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f496e76616c6964207075626c6963206b6579206c656e67746800000000000000600082015250565b612e07816127b2565b8114612e1257600080fd5b50565b612e1e816127c4565b8114612e2957600080fd5b50565b612e35816127da565b8114612e4057600080fd5b50565b612e4c81612826565b8114612e5757600080fd5b5056fea2646970667358221220ca546cd94374585138bea0ec18e509a82410be6477a939540eba8fd8a44f756d64736f6c63430008040033";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SAFE_TRANSFER_FROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_STARTBLOCKHEIGHT = "startBlockHeight";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));

    /**
     * 部署合约的交易回执
     */
    @Getter
    private DeployInfo deployInfo;

    public NFTToken(String contractName, ChainmakerChainClient chainmakerChainClient, ChainmakerAccountUtil chainmakerAccountUtil) {
        super(contractName, chainmakerChainClient, chainmakerAccountUtil);
    }

    public static NFTToken load(String contractName, ChainmakerChainClient chainmakerChainClient, ChainmakerAccountUtil chainmakerAccountUtil) {
        return new NFTToken(contractName, chainmakerChainClient, chainmakerAccountUtil);
    }

    public static NFTToken deploy(ChainmakerAccountUtil chainmakerAccountUtil, ChainmakerChainClient chainmakerChainClient, String contractName, String name, String symbol) throws Exception {
        Function function = new Function("",
                Arrays.<Type>asList(new Utf8String(name), new Utf8String(symbol)),
                Collections.emptyList());
        DeployInfo deployInfo = ChainmakerContract.deployContract(chainmakerChainClient, contractName, function,
                null, BINARY.getBytes());
        NFTToken nftToken = load(contractName, chainmakerChainClient, chainmakerAccountUtil);
        nftToken.deployInfo = deployInfo;
        return nftToken;
    }

    public static ApprovalEventResponse getApprovalEvents(TransactionReceipt transactionReceipt) {
        EventValuesWithLog eventValuesWithLog = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt.getLogs().get(0));
        ApprovalEventResponse approvalEventResponse = new ApprovalEventResponse();
        approvalEventResponse.log = eventValuesWithLog.getLog();
        approvalEventResponse.owner = (String) eventValuesWithLog.getIndexedValues().get(0).getValue();
        approvalEventResponse.approved = (String) eventValuesWithLog.getIndexedValues().get(1).getValue();
        approvalEventResponse.tokenId = (BigInteger) eventValuesWithLog.getIndexedValues().get(2).getValue();
        return approvalEventResponse;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    protected static EventValuesWithLog staticExtractEventParametersWithLog(Event event, Log log) {
        final EventValues eventValues = Contract.staticExtractEventParameters(event, log);
        return (eventValues == null) ? null : new EventValuesWithLog(eventValues, log);
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static TransferEventResponse getTransferEvents(
            TransactionReceipt transactionReceipt) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt.getLogs().get(0));
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = eventValues.getLog();
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    /**
     * 获取合约持有者账户地址
     * @return
     */
    public String admin() {
        final Function function = new Function(FUNC_ADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        Address address = executeRemoteCallSingleValueReturn(function, Address.class);
        return address.toString();
    }

    /**
     *
     * @param toAddress
     * @param tokenId
     * @return
     */
    public TransactionReceipt approve(String toAddress, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(160, toAddress),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 账户持有代币数量
     * @param owner
     * @return
     */
    public BigInteger balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public Boolean isApprovedForAll(String owner, String operator) {
        Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    /**
     * 异步铸币到指定账户
     * @param toAddress 账户地址
     * @param tokenId
     * @param tokenURI
     * @return 交易ID
     */
    public String mintAsync(String toAddress, BigInteger tokenId,
                                   String tokenURI) {
        Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(160, toAddress),
                        new Uint256(tokenId),
                        new Utf8String(tokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransactionAsync(function);
    }

    /**
     * 铸币到指定账户
     * @param toAddress 账户地址
     * @param tokenId
     * @param tokenURI
     * @return
     */
    public TransactionReceipt mint(String toAddress, BigInteger tokenId,
                                   String tokenURI) {
        Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(160, toAddress),
                        new Uint256(tokenId),
                        new Utf8String(tokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 代表名称
     * @return
     */
    public String name() {
        Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * 代币持有人地址
     * @param tokenId
     * @return
     */
    public String ownerOf(BigInteger tokenId) {
        Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        Address address = executeRemoteCallSingleValueReturn(function, Address.class);
        return address.toString();
    }

    public TransactionReceipt safeTransferFrom(String fromAddress, String toAddress,
                                               BigInteger tokenId) {
        Function function = new Function(
                FUNC_SAFE_TRANSFER_FROM,
                Arrays.<Type>asList(new Address(160, fromAddress),
                        new Address(160, toAddress),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public TransactionReceipt safeTransferFrom(String fromAddress, String toAddress,
                                               BigInteger tokenId, byte[] _data) {
        Function function = new Function(
                FUNC_SAFE_TRANSFER_FROM,
                Arrays.<Type>asList(new Address(160, fromAddress),
                        new Address(160, toAddress),
                        new Uint256(tokenId),
                        new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public TransactionReceipt setApprovalForAll(String operator,
                                                Boolean approved) {
        Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public BigInteger startBlockHeight() {
        Function function = new Function(FUNC_STARTBLOCKHEIGHT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public Boolean supportsInterface(byte[] interfaceId) {
        Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String symbol() {
        Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String tokenURI(BigInteger tokenId) {
        Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    /**
     * 带有验签的 safeTransferFrom
     * @param fromAddress
     * @param toAddress
     * @param tokenId
     * @param sm2Key
     * @param message
     * @param signature
     * @return
     */
    public TransactionReceipt safeTransferFrom(String fromAddress, String toAddress,
                                           BigInteger tokenId, byte[] sm2Key, byte[] message, byte[] signature) {
        Function function = new Function(
                FUNC_SAFE_TRANSFER_FROM,
                Arrays.<Type>asList(new Address(160, fromAddress),
                        new Address(160, toAddress),
                        new Uint256(tokenId),
                        new DynamicBytes(sm2Key),
                        new DynamicBytes(message),
                        new DynamicBytes(signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public TransactionReceipt transferFrom(String fromAddress, String toAddress,
                                           BigInteger tokenId) {
        Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(160, fromAddress),
                        new Address(160, toAddress),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public TransactionReceipt transferFrom(String fromAddress, String toAddress,
                                                   BigInteger tokenId, User user) {
        Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(160, fromAddress),
                        new Address(160, toAddress),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransactionWithUser(function, user);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class EventValuesWithLog {
        private EventValues eventValues;
        private Log log;

        private EventValuesWithLog(EventValues eventValues, Log log) {
            this.eventValues = eventValues;
            this.log = log;
        }

        public List<Type> getIndexedValues() {
            return eventValues.getIndexedValues();
        }

        public List<Type> getNonIndexedValues() {
            return eventValues.getNonIndexedValues();
        }

        public Log getLog() {
            return log;
        }
    }
}
