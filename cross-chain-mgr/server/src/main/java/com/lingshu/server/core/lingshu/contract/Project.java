package com.lingshu.server.core.lingshu.contract;

import com.lingshu.chain.sdk.client.IClient;
import com.lingshu.chain.sdk.codec.datatypes.Address;
import com.lingshu.chain.sdk.codec.datatypes.Bool;
import com.lingshu.chain.sdk.codec.datatypes.Event;
import com.lingshu.chain.sdk.codec.datatypes.Function;
import com.lingshu.chain.sdk.codec.datatypes.Type;
import com.lingshu.chain.sdk.codec.datatypes.TypeReference;
import com.lingshu.chain.sdk.codec.datatypes.Utf8String;
import com.lingshu.chain.sdk.codec.datatypes.generated.Uint256;
import com.lingshu.chain.sdk.codec.datatypes.generated.Uint8;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple5;
import com.lingshu.chain.sdk.contract.Contract;
import com.lingshu.chain.sdk.crypto.CryptoSuite;
import com.lingshu.chain.sdk.crypto.key.CryptoKeyPair;
import com.lingshu.chain.sdk.evtsub.EvtSubCallback;
import com.lingshu.chain.sdk.model.CryptoType;
import com.lingshu.chain.sdk.model.TransactionCallback;
import com.lingshu.chain.sdk.model.TransactionReceipt;
import com.lingshu.chain.sdk.tx.common.exception.ContractException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class Project extends Contract {
    public static final String FUNC_ACTUAL_AMOUNT = "actualAmount";

    public static final String FUNC_AUTO_FINISH = "autoFinish";

    public static final String FUNC_CLOSE_PROJECT = "closeProject";

    public static final String FUNC_CREATE_PROJECT = "createProject";

    public static final String FUNC_DEADLINE = "deadline";

    public static final String FUNC_DONATION = "donation";

    public static final String FUNC_DONATION_COMPLETED = "donationCompleted";

    public static final String FUNC_ESCROW_ACCOUNT = "escrowAccount";

    public static final String FUNC_EXAMINER_ACCOUNT = "examinerAccount";

    public static final String FUNC_GET_ACTUAL_AMOUNT = "getActualAmount";

    public static final String FUNC_GET_DEADLINE = "getDeadline";

    public static final String FUNC_GET_ESCROW_ACCOUNT = "getEscrowAccount";

    public static final String FUNC_GET_EXAMINER_ACCOUNT = "getExaminerAccount";

    public static final String FUNC_GET_STATUS = "getStatus";

    public static final String FUNC_GET_TARGET_ACCOUNT = "getTargetAccount";

    public static final String FUNC_GET_TARGET_AMOUNT = "getTargetAmount";

    public static final String FUNC_HASH = "hash";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OPEN_DONATION = "openDonation";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PUBLISH = "publish";

    public static final String FUNC_REMARK = "remark";

    public static final String FUNC_STATUS = "status";

    public static final String FUNC_TARGET_ACCOUNT = "targetAccount";

    public static final String FUNC_TARGET_AMOUNT = "targetAmount";

    public static final String FUNC_TRANSFER_DONATION = "transferDonation";

    public static final String FUNC_WALLET = "wallet";

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_remark\",\"type\":\"string\"}],\"name\":\"CloseProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"CreateProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_auto\",\"type\":\"bool\"}],\"name\":\"DonationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_autoFinish\",\"type\":\"bool\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferDonation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_remark\",\"type\":\"string\"}],\"name\":\"closeProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_examinerAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrowAccount\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"examinerAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrowAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExaminerAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoFinish\",\"type\":\"bool\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remark\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"contract Wallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", ABI_ARRAY);

    public static final String[] BINARY_ARRAY = {"","600360009054906101000a900460ff1660ff1614610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90611a6b565b60405180910390fd5b6006600360006101000a81548160ff021916908360ff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff1660e01b8152600401611073929190611cd3565b600060405180830381600087803b15801561108d57600080fd5b505af11580156110a1573d6000803e3d6000fd5b505050507fca6b4848c76e05b90c5c6f5f01017dbe3f39e9270d8e3e9158446d51399f93e660405160405180910390a1565b6004600360009054906101000a900460ff1660ff1614611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f90611d48565b60405180910390fd5b600960009054906101000a900460ff16611141576113ae565b600060065411156111935760065460075410611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990611dda565b60405180910390fd5b5b600060085411156111e35760085442106111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990611e46565b60405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611262929190611cd3565b600060405180830381600087803b15801561127c57600080fd5b505af1158015611290573d6000803e3d6000fd5b5050505080600760008282546112a69190611e95565b92505081905550600960009054906101000a900460ff1680156112cc5750600060065414155b80156112dc575060065460075410155b1561133a576005600360006101000a81548160ff021916908360ff1602179055507f6bb13e996ede9cfab4ed2d378f5917be7932cd2c66774b00dae2ab2c414d505a600160405161132d91906115f1565b60405180910390a16113ad565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f597440e65d8cdea1298e19df50e115bda25508180452d87a7f4f99195fb843a433836040516113a4929190611cd3565b60405180910390a25b5b50565b8280546113bd90611aba565b90600052602060002090601f0160209004810192826113df5760008555611426565b82601f106113f857805160ff1916838001178555611426565b82800160010185558215611426579182015b8281111561142557825182559160200191906001019061140a565b5b5090506114339190611437565b5090565b5b80821115611450576000816000905550600101611438565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561148e578082015181840152602081019050611473565b8381111561149d576000848401525b50505050565b6000601f19601f8301169050919050565b60006114bf82611454565b6114c9818561145f565b93506114d9818560208601611470565b6114e2816114a3565b840191505092915050565b6000602082019050818103600083015261150781846114b4565b905092915050565b600060ff82169050919050565b6115258161150f565b82525050565b6000602082019050611540600083018461151c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157182611546565b9050919050565b61158181611566565b82525050565b600060208201905061159c6000830184611578565b92915050565b6000819050919050565b6115b5816115a2565b82525050565b60006020820190506115d060008301846115ac565b92915050565b60008115159050919050565b6115eb816115d6565b82525050565b600060208201905061160660008301846115e2565b92915050565b6000819050919050565b600061163161162c61162784611546565b61160c565b611546565b9050919050565b600061164382611616565b9050919050565b600061165582611638565b9050919050565b6116658161164a565b82525050565b6000602082019050611680600083018461165c565b92915050565b6000604051905090565b600080fd5b600080fd5b6116a3816115a2565b81146116ae57600080fd5b50565b6000813590506116c08161169a565b92915050565b6116cf816115d6565b81146116da57600080fd5b50565b6000813590506116ec816116c6565b92915050565b60008060006060848603121561170b5761170a611690565b5b6000611719868287016116b1565b935050602061172a868287016116b1565b925050604061173b868287016116dd565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611787826114a3565b810181811067ffffffffffffffff821117156117a6576117a561174f565b5b80604052505050565b60006117b9611686565b90506117c5828261177e565b919050565b600067ffffffffffffffff8211156117e5576117e461174f565b5b6117ee826114a3565b9050602081019050919050565b82818337600083830152505050565b600061181d611818846117ca565b6117af565b9050828152602081018484840111156118395761183861174a565b5b6118448482856117fb565b509392505050565b600082601f83011261186157611860611745565b5b813561187184826020860161180a565b91505092915050565b6000602082840312156118905761188f611690565b5b600082013567ffffffffffffffff8111156118ae576118ad611695565b5b6118ba8482850161184c565b91505092915050565b6118cc81611566565b81146118d757600080fd5b50565b6000813590506118e9816118c3565b92915050565b600080600080600060a0868803121561190b5761190a611690565b5b6000611919888289016118da565b955050602061192a888289016118da565b945050604061193b888289016118da565b935050606061194c888289016118da565b925050608086013567ffffffffffffffff81111561196d5761196c611695565b5b6119798882890161184c565b9150509295509295909350565b60006020828403121561199c5761199b611690565b5b60006119aa848285016116b1565b91505092915050565b7f5065726d697373696f6e2064656e696564000000000000000000000000000000600082015250565b60006119e960118361145f565b91506119f4826119b3565b602082019050919050565b60006020820190508181036000830152611a18816119dc565b9050919050565b7f446f6e6174696f6e206973206e6f7420656e61626c6564000000000000000000600082015250565b6000611a5560178361145f565b9150611a6082611a1f565b602082019050919050565b60006020820190508181036000830152611a8481611a48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ad257607f821691505b60208210811415611ae657611ae5611a8b565b5b50919050565b7f50726f6a656374206973206e6f74207075626c69736800000000000000000000600082015250565b6000611b2260168361145f565b9150611b2d82611aec565b602082019050919050565b60006020820190508181036000830152611b5181611b15565b9050919050565b7f50726f6a656374206973206e6f74207665726966790000000000000000000000600082015250565b6000611b8e60158361145f565b9150611b9982611b58565b602082019050919050565b60006020820190508181036000830152611bbd81611b81565b9050919050565b6000606082019050611bd960008301866115ac565b611be660208301856115ac565b611bf360408301846115e2565b949350505050565b7f4f7065726174696f6e206661696c656400000000000000000000000000000000600082015250565b6000611c3160108361145f565b9150611c3c82611bfb565b602082019050919050565b60006020820190508181036000830152611c6081611c24565b9050919050565b7f50726f6a656374206973206e6f74206f70656e00000000000000000000000000600082015250565b6000611c9d60138361145f565b9150611ca882611c67565b602082019050919050565b60006020820190508181036000830152611ccc81611c90565b9050919050565b6000604082019050611ce86000830185611578565b611cf560208301846115ac565b9392505050565b7f446f6e6174696f6e206973206e6f74206f70656e000000000000000000000000600082015250565b6000611d3260148361145f565b9150611d3d82611cfc565b602082019050919050565b60006020820190508181036000830152611d6181611d25565b9050919050565b7f54686520646f6e6174696f6e2074617267657420686173206265656e2061636860008201527f6965766564000000000000000000000000000000000000000000000000000000602082015250565b6000611dc460258361145f565b9150611dcf82611d68565b604082019050919050565b60006020820190508181036000830152611df381611db7565b9050919050565b7f50726f6a65637420646561646c696e6520686173207061737365640000000000600082015250565b6000611e30601b8361145f565b9150611e3b82611dfa565b602082019050919050565b60006020820190508181036000830152611e5f81611e23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ea0826115a2565b9150611eab836115a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ee057611edf611e66565b5b82820190509291505056fea26469706673582212200766e5e2f30daf797ad06f9bc2d4b7a4955fd8183d0693ee4ef53634ca51671f64736f6c634300080b0033"};

    public static final String BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","6000803e3d6000fd5b505050508060076000828254610fa29190611e29565b92505081905550600960009054906101000a900460ff168015610fc85750600060065414155b8015610fd8575060065460075410155b15611036576005600360006101000a81548160ff021916908360ff1602179055507f9c5ce0273e0a4d74f394792e299d87a9d1f7bca0bbebed2058df65a764b3958e600160405161102991906117fd565b60405180910390a16110a9565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5e74b28752fef87fb0aab7fa089983bc0ac592a4f5c35a584f12958947925db633836040516110a0929190611bc4565b60405180910390a25b5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611169576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611160906119ff565b60405180910390fd5b60038060009054906101000a900460ff1660ff161115801561119e57506001600360009054906101000a900460ff1660ff1614155b6111dd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016111d490611ecb565b60405180910390fd5b6001600360006101000a81548160ff021916908360ff16021790555080600b908051906020019061120f9291906113b1565b507f23231d6d0fa9d0153e37eb07bbe1989c522b646c220cebcc343979dda145fb188160405161123f919061157d565b60405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112da576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016112d1906119ff565b60405180910390fd5b6004600360009054906101000a900460ff1660ff161461132f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161132690611ba4565b60405180910390fd5b6005600360006101000a81548160ff021916908360ff1602179055507f9c5ce0273e0a4d74f394792e299d87a9d1f7bca0bbebed2058df65a764b3958e600060405161137b91906117fd565b60405180910390a1565b60065481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8280546113bd90611aba565b90600052602060002090601f0160209004810192826113df5760008555611426565b82601f106113f857805160ff1916838001178555611426565b82800160010185558215611426579182015b8281111561142557825182559160200191906001019061140a565b5b5090506114339190611437565b5090565b5b80821115611450576000816000905550600101611438565b5090565b6000819050919050565b61146781611454565b82525050565b6000602082019050611482600083018461145e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114b382611488565b9050919050565b6114c3816114a8565b82525050565b60006020820190506114de60008301846114ba565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561151e578082015181840152602081019050611503565b8381111561152d576000848401525b50505050565b6000601f19601f8301169050919050565b600061154f826114e4565b61155981856114ef565b9350611569818560208601611500565b61157281611533565b840191505092915050565b600060208201905081810360008301526115978184611544565b905092915050565b6000604051905090565b600080fd5b600080fd5b6115bc816114a8565b81146115c757600080fd5b50565b6000813590506115d9816115b3565b92915050565b600080fd5b600080fd5b7fb95aa35500000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61162182611533565b810181811067ffffffffffffffff821117156116405761163f6115e9565b5b80604052505050565b600061165361159f565b905061165f8282611618565b919050565b600067ffffffffffffffff82111561167f5761167e6115e9565b5b61168882611533565b9050602081019050919050565b82818337600083830152505050565b60006116b76116b284611664565b611649565b9050828152602081018484840111156116d3576116d26115e4565b5b6116de848285611695565b509392505050565b600082601f8301126116fb576116fa6115df565b5b813561170b8482602086016116a4565b91505092915050565b600080600080600060a086880312156117305761172f6115a9565b5b600061173e888289016115ca565b955050602061174f888289016115ca565b9450506040611760888289016115ca565b9350506060611771888289016115ca565b925050608086013567ffffffffffffffff811115611792576117916115ae565b5b61179e888289016116e6565b9150509295509295909350565b600060ff82169050919050565b6117c1816117ab565b82525050565b60006020820190506117dc60008301846117b8565b92915050565b60008115159050919050565b6117f7816117e2565b82525050565b600060208201905061181260008301846117ee565b92915050565b61182181611454565b811461182c57600080fd5b50565b60008135905061183e81611818565b92915050565b61184d816117e2565b811461185857600080fd5b50565b60008135905061186a81611844565b92915050565b600080600060608486031215611889576118886115a9565b5b60006118978682870161182f565b93505060206118a88682870161182f565b92505060406118b98682870161185b565b9150509250925092565b6000602082840312156118d9576118d86115a9565b5b60006118e78482850161182f565b91505092915050565b6000819050919050565b600061191561191061190b84611488565b6118f0565b611488565b9050919050565b6000611927826118fa565b9050919050565b60006119398261191c565b9050919050565b6119498161192e565b82525050565b60006020820190506119646000830184611940565b92915050565b6000602082840312156119805761197f6115a9565b5b600082013567ffffffffffffffff81111561199e5761199d6115ae565b5b6119aa848285016116e6565b91505092915050565b7f5065726d697373696f6e2064656e696564000000000000000000000000000000600082015250565b60006119e96011836114ef565b91506119f4826119b3565b602082019050919050565b60006020820190508181036000830152611a18816119dc565b9050919050565b7f50726f6a656374206973206e6f74207075626c69736800000000000000000000600082015250565b6000611a556016836114ef565b9150611a6082611a1f565b602082019050919050565b60006020820190508181036000830152611a8481611a48565b9050919050565b7fb95aa35500000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ad257607f821691505b60208210811415611ae657611ae5611a8b565b5b50919050565b7f50726f6a656374206973206e6f74206f70656e00000000000000000000000000600082015250565b6000611b226013836114ef565b9150611b2d82611aec565b602082019050919050565b60006020820190508181036000830152611b5181611b15565b9050919050565b7f446f6e6174696f6e206973206e6f7420656e61626c6564000000000000000000600082015250565b6000611b8e6017836114ef565b9150611b9982611b58565b602082019050919050565b60006020820190508181036000830152611bbd81611b81565b9050919050565b6000604082019050611bd960008301856114ba565b611be6602083018461145e565b9392505050565b7f50726f6a656374206973206e6f74207665726966790000000000000000000000600082015250565b6000611c236015836114ef565b9150611c2e82611bed565b602082019050919050565b60006020820190508181036000830152611c5281611c16565b9050919050565b6000606082019050611c6e600083018661145e565b611c7b602083018561145e565b611c8860408301846117ee565b949350505050565b7f446f6e6174696f6e206973206e6f74206f70656e000000000000000000000000600082015250565b6000611cc66014836114ef565b9150611cd182611c90565b602082019050919050565b60006020820190508181036000830152611cf581611cb9565b9050919050565b7f54686520646f6e6174696f6e2074617267657420686173206265656e2061636860008201527f6965766564000000000000000000000000000000000000000000000000000000602082015250565b6000611d586025836114ef565b9150611d6382611cfc565b604082019050919050565b60006020820190508181036000830152611d8781611d4b565b9050919050565b7f50726f6a65637420646561646c696e6520686173207061737365640000000000600082015250565b6000611dc4601b836114ef565b9150611dcf82611d8e565b602082019050919050565b60006020820190508181036000830152611df381611db7565b9050919050565b7fb95aa35500000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e3482611454565b9150611e3f83611454565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e7457611e73611dfa565b5b828201905092915050565b7f4f7065726174696f6e206661696c656400000000000000000000000000000000600082015250565b6000611eb56010836114ef565b9150611ec082611e7f565b602082019050919050565b60006020820190508181036000830152611ee481611ea8565b905091905056fea2646970667358221220c365ca66c690d311540b86fa3f4dbb1b808f57573a5f17ff45dc00ca474dfa5b64736f6c634300080b0033"};

    public static final String SM_BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", SM_BINARY_ARRAY);

    public static final Event CLOSE_PROJECT_EVENT = new Event("CloseProject", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATE_PROJECT_EVENT = new Event("CreateProject", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DONATION_EVENT = new Event("Donation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DONATION_COMPLETED_EVENT = new Event("DonationCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event OPEN_DONATION_EVENT = new Event("OpenDonation", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event PUBLISH_EVENT = new Event("Publish", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_DONATION_EVENT = new Event("TransferDonation", 
            Arrays.<TypeReference<?>>asList());
    ;

    protected Project(String contractAddress, IClient client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static Project deploy(IClient client, CryptoKeyPair credential) throws ContractException {
        return deploy(Project.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static Project load(String contractAddress, IClient client, CryptoKeyPair credential) {
        return new Project(contractAddress, client, credential);
    }

    public List<CloseProjectEvtResp> getCloseProjectEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(CLOSE_PROJECT_EVENT, txReceipt);
        ArrayList<CloseProjectEvtResp> responseList = new ArrayList<CloseProjectEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            CloseProjectEvtResp evtResp = new CloseProjectEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp._remark = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeCloseProjectEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CLOSE_PROJECT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCloseProjectEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CLOSE_PROJECT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateProjectEvtResp> getCreateProjectEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(CREATE_PROJECT_EVENT, txReceipt);
        ArrayList<CreateProjectEvtResp> responseList = new ArrayList<CreateProjectEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            CreateProjectEvtResp evtResp = new CreateProjectEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp._hash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeCreateProjectEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CREATE_PROJECT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateProjectEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CREATE_PROJECT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DonationEvtResp> getDonationEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(DONATION_EVENT, txReceipt);
        ArrayList<DonationEvtResp> responseList = new ArrayList<DonationEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            DonationEvtResp evtResp = new DonationEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp._from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            evtResp._value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            evtResp._escrow = (String) eventValues.getIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDonationEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDonationEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DonationCompletedEvtResp> getDonationCompletedEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(DONATION_COMPLETED_EVENT, txReceipt);
        ArrayList<DonationCompletedEvtResp> responseList = new ArrayList<DonationCompletedEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            DonationCompletedEvtResp evtResp = new DonationCompletedEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp._auto = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDonationCompletedEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DONATION_COMPLETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDonationCompletedEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DONATION_COMPLETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OpenDonationEvtResp> getOpenDonationEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(OPEN_DONATION_EVENT, txReceipt);
        ArrayList<OpenDonationEvtResp> responseList = new ArrayList<OpenDonationEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            OpenDonationEvtResp evtResp = new OpenDonationEvtResp();
            evtResp.log = eventValues.getLog();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeOpenDonationEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(OPEN_DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOpenDonationEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(OPEN_DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<PublishEvtResp> getPublishEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(PUBLISH_EVENT, txReceipt);
        ArrayList<PublishEvtResp> responseList = new ArrayList<PublishEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            PublishEvtResp evtResp = new PublishEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp._targetAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            evtResp._deadline = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            evtResp._autoFinish = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribePublishEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(PUBLISH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribePublishEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(PUBLISH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferDonationEvtResp> getTransferDonationEvents(TransactionReceipt txReceipt) {
        List<Contract.EvtValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_DONATION_EVENT, txReceipt);
        ArrayList<TransferDonationEvtResp> responseList = new ArrayList<TransferDonationEvtResp>(valueList.size());
        for (Contract.EvtValuesWithLog eventValues : valueList) {
            TransferDonationEvtResp evtResp = new TransferDonationEvtResp();
            evtResp.log = eventValues.getLog();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeTransferDonationEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(TRANSFER_DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferDonationEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(TRANSFER_DONATION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public BigInteger actualAmount() throws ContractException {
        final Function function = new Function(FUNC_ACTUAL_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean autoFinish() throws ContractException {
        final Function function = new Function(FUNC_AUTO_FINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt closeProject(String _remark) {
        final Function function = new Function(
                FUNC_CLOSE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] closeProject(String _remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLOSE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForCloseProject(String _remark) {
        final Function function = new Function(
                FUNC_CLOSE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCloseProjectInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLOSE_PROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProject(String _walletAddress, String _targetAccount, String _examinerAccount, String _escrowAccount, String _hash) {
        final Function function = new Function(
                FUNC_CREATE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(_walletAddress), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_targetAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_examinerAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_escrowAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProject(String _walletAddress, String _targetAccount, String _examinerAccount, String _escrowAccount, String _hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(_walletAddress), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_targetAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_examinerAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_escrowAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForCreateProject(String _walletAddress, String _targetAccount, String _examinerAccount, String _escrowAccount, String _hash) {
        final Function function = new Function(
                FUNC_CREATE_PROJECT, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.Address(_walletAddress), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_targetAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_examinerAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Address(_escrowAccount), 
                new com.lingshu.chain.sdk.codec.datatypes.Utf8String(_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getCreateProjectInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATE_PROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public BigInteger deadline() throws ContractException {
        final Function function = new Function(FUNC_DEADLINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt donation(BigInteger _value) {
        final Function function = new Function(
                FUNC_DONATION, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] donation(BigInteger _value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DONATION, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForDonation(BigInteger _value) {
        final Function function = new Function(
                FUNC_DONATION, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDonationInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DONATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt donationCompleted() {
        final Function function = new Function(
                FUNC_DONATION_COMPLETED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] donationCompleted(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DONATION_COMPLETED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForDonationCompleted() {
        final Function function = new Function(
                FUNC_DONATION_COMPLETED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String escrowAccount() throws ContractException {
        final Function function = new Function(FUNC_ESCROW_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String examinerAccount() throws ContractException {
        final Function function = new Function(FUNC_EXAMINER_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getActualAmount() throws ContractException {
        final Function function = new Function(FUNC_GET_ACTUAL_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getDeadline() throws ContractException {
        final Function function = new Function(FUNC_GET_DEADLINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getEscrowAccount() throws ContractException {
        final Function function = new Function(FUNC_GET_ESCROW_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getExaminerAccount() throws ContractException {
        final Function function = new Function(FUNC_GET_EXAMINER_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStatus() throws ContractException {
        final Function function = new Function(FUNC_GET_STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getTargetAccount() throws ContractException {
        final Function function = new Function(FUNC_GET_TARGET_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getTargetAmount() throws ContractException {
        final Function function = new Function(FUNC_GET_TARGET_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String hash() throws ContractException {
        final Function function = new Function(FUNC_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String name() throws ContractException {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt openDonation() {
        final Function function = new Function(
                FUNC_OPEN_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] openDonation(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPEN_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForOpenDonation() {
        final Function function = new Function(
                FUNC_OPEN_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt publish(BigInteger _targetAmount, BigInteger _deadline, Boolean _autoFinish) {
        final Function function = new Function(
                FUNC_PUBLISH, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_targetAmount), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_deadline), 
                new com.lingshu.chain.sdk.codec.datatypes.Bool(_autoFinish)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] publish(BigInteger _targetAmount, BigInteger _deadline, Boolean _autoFinish, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PUBLISH, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_targetAmount), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_deadline), 
                new com.lingshu.chain.sdk.codec.datatypes.Bool(_autoFinish)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForPublish(BigInteger _targetAmount, BigInteger _deadline, Boolean _autoFinish) {
        final Function function = new Function(
                FUNC_PUBLISH, 
                Arrays.<Type>asList(new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_targetAmount), 
                new com.lingshu.chain.sdk.codec.datatypes.generated.Uint256(_deadline), 
                new com.lingshu.chain.sdk.codec.datatypes.Bool(_autoFinish)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, Boolean> getPublishInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PUBLISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public String remark() throws ContractException {
        final Function function = new Function(FUNC_REMARK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger status() throws ContractException {
        final Function function = new Function(FUNC_STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String targetAccount() throws ContractException {
        final Function function = new Function(FUNC_TARGET_ACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger targetAmount() throws ContractException {
        final Function function = new Function(FUNC_TARGET_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transferDonation() {
        final Function function = new Function(
                FUNC_TRANSFER_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferDonation(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForTransferDonation() {
        final Function function = new Function(
                FUNC_TRANSFER_DONATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String wallet() throws ContractException {
        final Function function = new Function(FUNC_WALLET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoType() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static class CloseProjectEvtResp {
        public TransactionReceipt.Logs log;

        public String _remark;
    }

    public static class CreateProjectEvtResp {
        public TransactionReceipt.Logs log;

        public String _hash;
    }

    public static class DonationEvtResp {
        public TransactionReceipt.Logs log;

        public String _from;

        public BigInteger _value;

        public String _escrow;
    }

    public static class DonationCompletedEvtResp {
        public TransactionReceipt.Logs log;

        public Boolean _auto;
    }

    public static class OpenDonationEvtResp {
        public TransactionReceipt.Logs log;
    }

    public static class PublishEvtResp {
        public TransactionReceipt.Logs log;

        public BigInteger _targetAmount;

        public BigInteger _deadline;

        public Boolean _autoFinish;
    }

    public static class TransferDonationEvtResp {
        public TransactionReceipt.Logs log;
    }
}
