package com.lingshu.bsp.front.rpcapi.bsc.contract;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class BusiCenterBsc extends org.web3j.tx.Contract {
    public static final String BINARY = "0x6080604052600160025534801561001557600080fd5b50612ef1806100256000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639352fad2116100de578063ba33b77011610097578063d9bc406a11610071578063d9bc406a14610369578063e93956791461038a578063eceac5e21461039d578063f15da729146103b05761018e565b8063ba33b7701461032e578063c4b59a8614610343578063c858d5dd146103565761018e565b80639352fad2146102bc578063a04b2769146102cf578063a1c0d91c146102e2578063aa6fdc83146102f5578063b247b13014610308578063b754c53b1461031b5761018e565b80636a2ce56b1161014b57806378ba8bb81161012557806378ba8bb8146102705780637dc08a69146102835780638b6bb00f146102965780639067be73146102a95761018e565b80636a2ce56b1461022a5780636c7f15421461024a57806377c682181461025d5761018e565b80632e8f0965146101935780633c2beb0b146101bc5780633d160503146101d15780634585f30d146101f15780635063e8271461020457806359f686aa14610217575b600080fd5b6101a66101a1366004612729565b6103c3565b6040516101b39190612c7f565b60405180910390f35b6101cf6101ca3660046126f4565b610499565b005b6101e46101df366004612792565b6106e7565b6040516101b39190612c13565b6101a66101ff3660046126f4565b6107b9565b6101a661021236600461280e565b61084d565b6101a6610225366004612855565b6108a6565b61023d6102383660046126f4565b6109f7565b6040516101b39190612c21565b61023d61025836600461268c565b610a1b565b6101cf61026b36600461280e565b610a2d565b6101cf61027e3660046126f4565b610a92565b61023d6102913660046126f4565b610bb2565b61023d6102a43660046126f4565b610c4b565b6101cf6102b7366004612792565b610d20565b6101cf6102ca3660046126b2565b610db1565b61023d6102dd3660046126f4565b610e8b565b6101a66102f03660046126f4565b610ecf565b61023d6103033660046126f4565b610fb3565b6101cf6103163660046126f4565b610fe3565b6101cf6103293660046126f4565b6110d6565b6103366111eb565b6040516101b39190612c05565b6101cf6103513660046126f4565b6112b0565b6101a66103643660046126f4565b611368565b61037c6103773660046126f4565b61140d565b6040516101b3929190612d77565b6101a661039836600461268c565b6114ed565b6101e46103ab36600461280e565b6115a8565b6101cf6103be3660046126b2565b6115db565b60606000606060006103d68660c861160c565b9194509250905060005b825181101561047c576103f161259c565b8382815181106103fd57fe5b60200260200101519050606061041c8983602001518460600151611d19565b90506104288189611da9565b6104725761043461259c565b85846001018151811061044357fe5b6020026020010151905060606104628b83602001518460600151611d19565b9850610493975050505050505050565b50506001016103e0565b506040518060200160405280600081525093505050505b92915050565b60606104c28260405180604001604052806005815260200164383937b7b360d91b8152506103c3565b905060606104f3826040518060400160405280600b81526020016a0c6dedce8cadce890c2e6d60ab1b8152506103c3565b9050606061051a83604051806040016040528060018152602001603960f91b8152506103c3565b9050606061054184604051806040016040528060018152602001607360f81b8152506103c3565b9050606061056885604051806040016040528060018152602001603b60f91b8152506103c3565b9050600061057585610c4b565b9050600061058285610c4b565b9050600061058f85610c4b565b9050600061059c85611eb5565b90506000600185838686604051600081526020016040526040516105c39493929190612c2f565b6020604051602081039080840390855afa1580156105e5573d6000803e3d6000fd5b505050602060405103519050806001600160a01b031660001b61061f604051806080016040528060428152602001612e6d60429139610c4b565b14896040516020016106319190612bc0565b604051602081830303815290604052906106675760405162461bcd60e51b815260040161065e9190612c7f565b60405180910390fd5b506000806106748d61140d565b9150915060606106858e84846108a6565b9050600061069282610e8b565b9050888114826040516020016106a89190612bd7565b604051602081830303815290604052906106d55760405162461bcd60e51b815260040161065e9190612c7f565b50505050505050505050505050505050565b6000816000806106f687610fb3565b81526020019081526020016000205410156107235760405162461bcd60e51b815260040161065e90612d57565b8160008061073087610fb3565b8152602001908152602001600020600082825403925050819055508160008061075886610fb3565b8152602001908152602001600020600082825401925050819055507fa0b1ffbc8b2c4c04f821bbc137802807b3f9c65238daa32d43116e9fb32a79488484846040516107a693929190612c90565b60405180910390a15060015b9392505050565b6060806107e4836040518060400160405280600681526020016537b934b3b4b760d11b8152506103c3565b90506107ff8160405180602001604052806000815250611da9565b156108125761080d81610499565b610845565b61083a83604051806040016040528060068152602001651d185c99d95d60d21b8152506103c3565b905061084581610499565b90505b919050565b60606000606060006108608660c861160c565b9194509250905061086f61259c565b82868151811061087b57fe5b60200260200101519050606061089a8883602001518460600151611d19565b98975050505050505050565b8251606090849084106108cb5760405162461bcd60e51b815260040161065e90612d67565b80518311156108ec5760405162461bcd60e51b815260040161065e90612d04565b8284111561090c5760405162461bcd60e51b815260040161065e90612d14565b600084840382510390506060816040519080825280601f01601f191660200182016040528015610943576020820181803883390190505b5090506000805b878110156109985784818151811061095e57fe5b602001015160f81c60f81b83838151811061097557fe5b60200101906001600160f81b031916908160001a9053506001918201910161094a565b50855b84518110156109ea578481815181106109b057fe5b602001015160f81c60f81b8383815181106109c757fe5b60200101906001600160f81b031916908160001a9053506001918201910161099b565b5090979650505050505050565b6000806000610a0584610fb3565b8152602001908152602001600020549050919050565b60006020819052908152604090205481565b80600080610a3a85610fb3565b8152602001908152602001600020600082825401925050819055507fa0b1ffbc8b2c4c04f821bbc137802807b3f9c65238daa32d43116e9fb32a79488282604051610a86929190612d24565b60405180910390a15050565b6060610a9d826107b9565b90506060610ad4826040518060400160405280601181526020017018dc9959195b9d1a585b14dd589a9958dd607a1b8152506103c3565b90506060610b05826040518060400160405280600b81526020016a66756e635f706172616d7360a81b8152506103c3565b90506060610b2f826040518060400160405280600481526020016366726f6d60e01b8152506103c3565b90506060610b578360405180604001604052806002815260200161746f60f01b8152506103c3565b90506060610b838460405180604001604052806006815260200165185b5bdd5b9d60d21b8152506103c3565b90506000610b9082611eb5565b9050610b9d8484836106e7565b50610ba788610ecf565b505050505050505050565b60025460008181526001602052604081205490919015610be45760405162461bcd60e51b815260040161065e90612cc4565b610bed83610fb3565b6000828152600160208190526040918290209290925560028054909201909155517f81a6873436433147d6d0ea39b23123e0d3d3c41c3eb8f4ce88f82bde2533472090610c3d9085908490612d24565b60405180910390a192915050565b6000815160421415610c6e57610c676102a48360026042611d19565b9050610848565b8151604014610c8f5760405162461bcd60e51b815260040161065e90612cd4565b815182906000805b82811015610d17576000848281518110610cad57fe5b602001015160f81c60f81b60f81c90506000858360010181518110610cce57fe5b016020015160f81c90506000610ce382611ec2565b6004610cee85611ec2565b60ff16901b17905060028460ff92909216910460080260f8031b93909317925050600201610c97565b50949350505050565b610d2983610fb3565b60008281526001602052604090205414610d555760405162461bcd60e51b815260040161065e90612ce4565b610d5e82610fb3565b6000828152600160205260409081902091909155517f81a6873436433147d6d0ea39b23123e0d3d3c41c3eb8f4ce88f82bde2533472090610da490859085908590612c90565b60405180910390a1505050565b6060610e1083838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600681526537b934b3b4b760d11b602082015291506103c39050565b90506060610e7184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260068152651d185c99d95d60d21b602082015291506103c39050565b9050610e7c82610499565b610e8581610499565b50505050565b80516000906060610e9b826114ed565b90508084604051602001610eb0929190612be2565b6040516020818303038152906040528051906020012092505050919050565b606080610efa836040518060400160405280600681526020016537b934b3b4b760d11b8152506103c3565b90506060610f2684604051806040016040528060068152602001651d185c99d95d60d21b8152506103c3565b9050610f418260405180602001604052806000815250611da9565b15801590610f665750610f638160405180602001604052806000815250611da9565b15155b15610fac57610f7481610499565b7f38a465f8730268ab3b88e7551b94e6dd2c52422a9ff358c93527c383ef9ae85c81604051610fa39190612c7f565b60405180910390a15b5050919050565b600081604051602001610fc69190612bb4565b604051602081830303815290604052805190602001209050919050565b6060610fee826107b9565b90506060611025826040518060400160405280601181526020017018dc9959195b9d1a585b14dd589a9958dd607a1b8152506103c3565b90506060611056826040518060400160405280600b81526020016a66756e635f706172616d7360a81b8152506103c3565b9050606061107e8260405180604001604052806002815260200161746f60f01b8152506103c3565b905060606110aa8360405180604001604052806006815260200165185b5bdd5b9d60d21b8152506103c3565b905060006110b782611eb5565b90506110c38382610a2d565b6110cc87610ecf565b5050505050505050565b60606110e1826107b9565b90506060611118826040518060400160405280601181526020017018dc9959195b9d1a585b14dd589a9958dd607a1b8152506103c3565b90506060611149826040518060400160405280600b81526020016a66756e635f706172616d7360a81b8152506103c3565b90506060611173826040518060400160405280600481526020016366726f6d60e01b8152506103c3565b9050606061119b8360405180604001604052806002815260200161746f60f01b8152506103c3565b905060606111c884604051806040016040528060078152602001661d1bdad95b925960ca1b8152506103c3565b905060006111d582611eb5565b90506111e2848483610d20565b610ba788610ecf565b604080516000808252602090910191829052907f478ec551ff5eb934d827f6e3d2827ba63e58885bbeaf76820090c8e16d836bc6907f815186624fffdc410a3d97e0762b6d2405883836a5e55349be2a4e9fe8ee7246907f2243ca645c8397cd0f389d5fc721f586bc76407a8d8d70375ab4eedf7b60ef3390601c9060019061127b908690849087908790612c2f565b6020604051602081039080840390855afa15801561129d573d6000803e3d6000fd5b5050506020604051035194505050505090565b60606112bb826107b9565b905060606112f2826040518060400160405280601181526020017018dc9959195b9d1a585b14dd589a9958dd607a1b8152506103c3565b90506060611323826040518060400160405280600b81526020016a66756e635f706172616d7360a81b8152506103c3565b9050606061134b8260405180604001604052806002815260200161746f60f01b8152506103c3565b905061135681610bb2565b5061136085610ecf565b505050505050565b606060006060600061137b8560c861160c565b9194509250905060005b82518110156114045761139661259c565b8382815181106113a257fe5b6020026020010151905060606113c18883602001518460600151611d19565b90507ff3d39f15c009ad599c03bbc459984a05ea8f344958338cf5496ae28e5ff17eaa816040516113f29190612c7f565b60405180910390a15050600101611385565b50505050919050565b6000806000606060006114218660c861160c565b9194509250905060005b82518110156114dc5761143c61259c565b83828151811061144857fe5b6020026020010151905060606114678983602001518460600151611d19565b90506114908160405180604001604052806005815260200164383937b7b360d91b815250611da9565b6114d25761149c61259c565b8584600101815181106114ab57fe5b602002602001015190506002836020015103816060015198509850505050505050506114e8565b505060010161142b565b50600094508493505050505b915091565b60608161151257506040805180820190915260018152600360fc1b6020820152610848565b8160005b811561152a57600101600a82049150611516565b6060816040519080825280601f01601f191660200182016040528015611557576020820181803883390190505b50859350905060001982015b8315610d1757600a840660300160f81b8282806001900393508151811061158657fe5b60200101906001600160f81b031916908160001a905350600a84049350611563565b6000818152600160205260408120546115c084610fb3565b8114156115d1576001915050610493565b6000915050610493565b7ff3d39f15c009ad599c03bbc459984a05ea8f344958338cf5496ae28e5ff17eaa8282604051610a86929190612c6d565b6000606081848161161b6125d3565b61162487611f54565b60208201519096509091506000908161163b61259c565b865185511015611d015760008786600001518151811061165757fe5b01602001516001600160f81b0319169050607b60f81b8114806116875750605b60f81b6001600160f81b03198216145b156117565760019093019261169c868b611fd0565b9097509150866116bc57506003995060009750611d129650505050505050565b8560400151600019146116f257898660400151815181106116d957fe5b602090810291909101015160a001805160010160ff1690525b607b60f81b6001600160f81b031982161461170e576002611711565b60015b8290600481111561171e57fe5b9081600481111561172b57fe5b9052505084516020808301919091526001604080840191909152908601516000190190860152611cf5565b607d60f81b6001600160f81b03198216148061177f5750605d60f81b6001600160f81b03198216145b1561193a576000607d60f81b6001600160f81b03198316146117a25760026117a5565b60015b6020880151600019019450905060005b8b85815181106117c157fe5b60200260200101519350836040015180156117de57508360800151155b15611871578160048111156117ef57fe5b845160048111156117fc57fe5b14611819575060019b5060009950611d1298505050505050505050565b600019604089015287518c516001909101908d908790811061183757fe5b6020026020010151606001818152505060018c868151811061185557fe5b602090810291909101015190151560809091015250600161187d565b600019909401936117b5565b8061189a575060019b5060009950611d1298505050505050505050565b84156118e6578b85815181106118ac57fe5b60200260200101519350836040015180156118c957508360800151155b156118da57604088018590526118e6565b6000199094019361189a565b84611932578b85815181106118f757fe5b602002602001015193508360400151801561191457508360800151155b15611932576fffffffffffffffffffffffffffffffff851660408901525b505050611cf5565b601160f91b6001600160f81b0319821614156119b95761195b868b8a61207e565b94508415611977575092985060009650611d1295505050505050565b6040860151600190940193600019146119b3578986604001518151811061199a57fe5b602090810291909101015160a001805160010160ff1690525b50611cf5565b600160fd1b6001600160f81b0319821614806119e25750601160f81b6001600160f81b03198216145b806119fa5750600960f91b6001600160f81b03198216145b80611a125750600560fa1b6001600160f81b03198216145b15611a1d5750611cf5565b601d60f91b6001600160f81b031982161415611a4757506020850151600019016040860152611cf5565b600b60fa1b6001600160f81b031982161415611b8b57856040015160001914158015611a9a575060028a876040015181518110611a8057fe5b6020026020010151600001516004811115611a9757fe5b14155b8015611acd575060018a876040015181518110611ab357fe5b6020026020010151600001516004811115611aca57fe5b14155b156119b357600186602001510392505b60028a8481518110611aeb57fe5b6020026020010151600001516004811115611b0257fe5b1480611b30575060018a8481518110611b1757fe5b6020026020010151600001516004811115611b2e57fe5b145b15611b7f57898381518110611b4157fe5b6020026020010151604001518015611b6e5750898381518110611b6057fe5b602002602001015160800151155b15611b7f57604086018390526119b3565b60001990920191611add565b600360fc1b6001600160f81b0319821610801590611bb75750603960f81b6001600160f81b0319821611155b80611bcf5750602d60f81b6001600160f81b03198216145b80611be75750603360f91b6001600160f81b03198216145b80611bff5750601d60fa1b6001600160f81b03198216145b80611c175750603760f91b6001600160f81b03198216145b15611cac57856040015160001914611ca15789866040015181518110611c3957fe5b6020026020010151915060016004811115611c5057fe5b82516004811115611c5d57fe5b1480611c865750600382516004811115611c7357fe5b148015611c86575060a082015160ff1615155b15611ca157506001995060009750611d129650505050505050565b61195b868b8a6122c6565b600160fd1b6001600160f81b0319821610801590611cd85750603f60f91b6001600160f81b0319821611155b15611cf357506001995060009750611d129650505050505050565b505b8451600101855261163b565b505050506020015160009550925050505b9250925092565b60608084905060608484036040519080825280601f01601f191660200182016040528015611d4e576020820181803883390190505b509050845b84811015611d9f57828181518110611d6757fe5b602001015160f81c60f81b8287830381518110611d8057fe5b60200101906001600160f81b031916908160001a905350600101611d53565b5095945050505050565b815181516000918491849190811115611dc0575080515b60005b81811015611e7257828181518110611dd757fe5b602001015160f81c60f81b6001600160f81b031916848281518110611df857fe5b01602001516001600160f81b0319161015611e1b57600019945050505050610493565b828181518110611e2757fe5b602001015160f81c60f81b6001600160f81b031916848281518110611e4857fe5b01602001516001600160f81b0319161115611e6a576001945050505050610493565b600101611dc3565b50815183511015611e8a576000199350505050610493565b815183511115611ea05760019350505050610493565b60009350505050610493565b50505092915050565b600061084582600061243d565b600060308260ff1610158015611edc575060398260ff1611155b15611eec5750602f198101610848565b60418260ff1610158015611f04575060468260ff1611155b15611f1457506036198101610848565b60618260ff1610158015611f2c575060668260ff1611155b15611f3c57506056198101610848565b60405162461bcd60e51b815260040161065e90612cf4565b611f5c6125d3565b6060611f666125d3565b604051806060016040528060008152602001600081526020016000198152509050606084604051908082528060200260200182016040528015611fc357816020015b611fb061259c565b815260200190600190039081611fa85790505b5091935090915050915091565b6000611fda61259c565b825184602001511061200c57600083600185510381518110611ff857fe5b602002602001015180905091509150612077565b61201461259c565b506040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015290850151845182918691811061205757fe5b602090810291909101810191909152850180516001908101909152925090505b9250929050565b82516000908161208c61259c565b865160010187525b8451875110156122b8576000858860000151815181106120b057fe5b01602001516001600160f81b0319169050601160f91b81141561210f576120d78888611fd0565b9093509150826120ee5750505084525060036107b2565b612102826003866001018b60000151612556565b60009450505050506107b2565b605c60f882901c148015612127575085518851600101105b156122aa5787516001018089528651879190811061214157fe5b6020910101516001600160f81b031916601160f91b148061218457508588600001518151811061216d57fe5b6020910101516001600160f81b031916602f60f81b145b806121b157508588600001518151811061219a57fe5b6020910101516001600160f81b031916601760fa1b145b806121de5750858860000151815181106121c757fe5b6020910101516001600160f81b031916603360f91b145b8061220b5750858860000151815181106121f457fe5b6020910101516001600160f81b031916603960f91b145b8061223857508588600001518151811061222157fe5b6020910101516001600160f81b031916603760f91b145b8061226557508588600001518151811061224e57fe5b6020910101516001600160f81b031916603160f91b145b8061229257508588600001518151811061227b57fe5b6020910101516001600160f81b031916601d60fa1b145b1561229d57506122ac565b50505084525060016107b2565b505b86516001018752612094565b505084525060029392505050565b8251600090819081806122d761259c565b8651895110156123de57868960000151815181106122f157fe5b01602001516001600160f81b0319169250600160fd1b8314806123215750600960f81b6001600160f81b03198416145b806123395750600560f91b6001600160f81b03198416145b806123515750600d60f81b6001600160f81b03198416145b806123695750600b60fa1b6001600160f81b03198416145b806123815750607d60f81b6001600160f81b03198416145b806123995750605d60f81b6001600160f81b03198416145b156123a757600194506123de565b602060f884901c10806123be5750607f60f884901c115b156123d257505050855250600190506107b2565b885160010189526122d7565b846123f257505050855250600290506107b2565b6123fc8989611fd0565b90925090508161241557505050855250600390506107b2565b612426816004868c60000151612556565b505086516000190190965250600095945050505050565b600082818080805b845181101561252d578015801561247a575084818151811061246357fe5b6020910101516001600160f81b031916602d60f81b145b1561248457600191505b603085828151811061249257fe5b016020015160f81c108015906124bc575060398582815181106124b157fe5b016020015160f81c11155b156125035782156124d957866124d15761252d565b600019909601955b600a8402935060308582815181106124ed57fe5b016020015160f81c0360ff169390930192612525565b84818151811061250f57fe5b60209101015160f81c602e141561252557600192505b600101612445565b50851561253d5785600a0a830292505b801561254b57600019830292505b509095945050505050565b8383600481111561256357fe5b9081600481111561257057fe5b90525060208401919091526001604084018190526060840191909152608083015250600060a090910152565b6040805160c08101909152806000815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180606001604052806000815260200160008152602001600081525090565b803561049381612e55565b60008083601f84011261261157600080fd5b50813567ffffffffffffffff81111561262957600080fd5b60208301915083600182028301111561207757600080fd5b600082601f83011261265257600080fd5b813561266561266082612db9565b612d92565b9150808252602083016020830185838301111561268157600080fd5b611eac838284612e13565b60006020828403121561269e57600080fd5b60006126aa84846125f4565b949350505050565b600080602083850312156126c557600080fd5b823567ffffffffffffffff8111156126dc57600080fd5b6126e8858286016125ff565b92509250509250929050565b60006020828403121561270657600080fd5b813567ffffffffffffffff81111561271d57600080fd5b6126aa84828501612641565b6000806040838503121561273c57600080fd5b823567ffffffffffffffff81111561275357600080fd5b61275f85828601612641565b925050602083013567ffffffffffffffff81111561277c57600080fd5b61278885828601612641565b9150509250929050565b6000806000606084860312156127a757600080fd5b833567ffffffffffffffff8111156127be57600080fd5b6127ca86828701612641565b935050602084013567ffffffffffffffff8111156127e757600080fd5b6127f386828701612641565b9250506040612804868287016125f4565b9150509250925092565b6000806040838503121561282157600080fd5b823567ffffffffffffffff81111561283857600080fd5b61284485828601612641565b9250506020612788858286016125f4565b60008060006060848603121561286a57600080fd5b833567ffffffffffffffff81111561288157600080fd5b61288d86828701612641565b93505060206127f3868287016125f4565b6128a781612dee565b82525050565b6128a781612df9565b6128a781612dfe565b60006128cb8385612de5565b93506128d8838584612e13565b6128e183612e4b565b9093019392505050565b60006128f682612de1565b6129008185612de5565b9350612910818560208601612e1f565b6128e181612e4b565b600061292482612de1565b61292e8185610848565b935061293e818560208601612e1f565b9290920192915050565b6000612955601083612de5565b6f0e8ded6cadc92c9cb6f65cb5b31cb39560831b815260200192915050565b6000612981601983612de5565b7f496e76616c69642068657820737472696e67206c656e67746800000000000000815260200192915050565b60006129ba601d83610848565b7f61646472657373206e6f7420747275652c636f6e74656e74486173682c0000008152601d0192915050565b60006129f3601b83612de5565b7fe58f91e98081e88085e4b88de698af4e4654e68980e69c89e880850000000000815260200192915050565b6000612a2c601583612de5565b7424b73b30b634b2103432bc1031b430b930b1ba32b960591b815260200192915050565b6000612a5d601783612de5565b7f456e6420696e646578206f7574206f6620626f756e6473000000000000000000815260200192915050565b6000612a96601283610848565b711d98c81a185cda081b9bdd08195c5d585b0b60721b815260120192915050565b6000612ac4601a83610848565b7f19457468657265756d205369676e6564204d6573736167653a0a0000000000008152601a0192915050565b6000612afd603383612de5565b7f537461727420696e646578206d757374206265206c657373207468616e206f72815272040cae2eac2d840e8de40cadcc840d2dcc8caf606b1b602082015260400192915050565b6000610493600083612de5565b6000612b5f600483612de5565b6303737ba160e51b815260200192915050565b6000612b7f601983612de5565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000815260200192915050565b6128a781612e0d565b60006107b28284612919565b6000612bcb826129ad565b91506107b28284612919565b6000612bcb82612a89565b6000612bed82612ab7565b9150612bf98285612919565b91506126aa8284612919565b60208101610493828461289e565b6020810161049382846128ad565b6020810161049382846128b6565b60808101612c3d82876128b6565b612c4a6020830186612bab565b612c5760408301856128b6565b612c6460608301846128b6565b95945050505050565b602080825281016126aa8184866128bf565b602080825281016107b281846128eb565b60608082528101612ca181866128eb565b90508181036020830152612cb581856128eb565b90506126aa60408301846128b6565b6020808252810161084581612948565b6020808252810161084581612974565b60208082528101610845816129e6565b6020808252810161084581612a1f565b6020808252810161084581612a50565b6020808252810161084581612af0565b60608082528101612d3481612b45565b90508181036020830152612d4881856128eb565b90506107b260408301846128b6565b6020808252810161084581612b52565b6020808252810161084581612b72565b60408101612d8582856128b6565b6107b260208301846128b6565b60405181810167ffffffffffffffff81118282101715612db157600080fd5b604052919050565b600067ffffffffffffffff821115612dd057600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b600061084582612e01565b151590565b90565b6001600160a01b031690565b60ff1690565b82818337506000910152565b60005b83811015612e3a578181015183820152602001612e22565b83811115610e855750506000910152565b601f01601f191690565b612e5e81612dfe565b8114612e6957600080fd5b5056fe307830303030303030303030303030303030303030303030303062643564396636623162373063666433366339306161313161383833306134333036326162346561a365627a7a7231582045b8bdc5d37a96ce7fb0993cffaf9790e3643feaa4c14631f3fe00df2e600a986c6578706572696d656e74616cf564736f6c63430005110040\n";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ECHO = "echo";

    public static final String FUNC_ERC20GETBALANCE = "erc20GetBalance";

    public static final String FUNC_ERC20MINT = "erc20Mint";

    public static final String FUNC_ERC20MINTVCS = "erc20MintVcs";

    public static final String FUNC_ERC20TRANSFER = "erc20Transfer";

    public static final String FUNC_ERC20TRANSFERVCS = "erc20TransferVcs";

    public static final String FUNC_ERC721MINT = "erc721Mint";

    public static final String FUNC_ERC721MINTVCS = "erc721MintVcs";

    public static final String FUNC_ERC721OWNEROF = "erc721OwnerOf";

    public static final String FUNC_ERC721TRANSFER = "erc721Transfer";

    public static final String FUNC_ERC721TRANSFERVCS = "erc721TransferVcs";

    public static final String FUNC_GETETHSIGNEDMESSAGEHASH = "getEthSignedMessageHash";

    public static final String FUNC_GETPROOFRANGE = "getProofRange";

    public static final String FUNC_GETUSEDVC = "getUsedVc";

    public static final String FUNC_HEXSTRINGTOBYTES32 = "hexStringToBytes32";

    public static final String FUNC_KEYFROMSTRING = "keyFromString";

    public static final String FUNC_REMOVESTRING = "removestring";

    public static final String FUNC_RUN = "run";

    public static final String FUNC_SENDVCIFNEED = "sendVcIfNeed";

    public static final String FUNC_SHOWALL = "showAll";

    public static final String FUNC_TEST_VERIFY = "test_verify";

    public static final String FUNC_UINTTOSTRING = "uintToString";

    public static final String FUNC_VALUEBYINDEX = "valueByIndex";

    public static final String FUNC_VALUEBYKEY = "valueByKey";

    public static final String FUNC_VERIFYVC = "verifyVc";

    public static final Event CROSS_CHAIN_VC_EVENT = new Event("CROSS_CHAIN_VC",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUG_EVENT = new Event("DEBUG",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUG_ADDRESS_EVENT = new Event("DEBUG_ADDRESS",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DEBUG_BYTES32_EVENT = new Event("DEBUG_BYTES32",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERC20TRANSFER_EVENT = new Event("Erc20Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ERC721TRANSFER_EVENT = new Event("Erc721Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected BusiCenterBsc(String contractAddress, Web3j web3j, Credentials credentials,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BusiCenterBsc(String contractAddress, Web3j web3j, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BusiCenterBsc(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BusiCenterBsc(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<CROSS_CHAIN_VCEventResponse> getCROSS_CHAIN_VCEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CROSS_CHAIN_VC_EVENT, transactionReceipt);
        ArrayList<CROSS_CHAIN_VCEventResponse> responses = new ArrayList<CROSS_CHAIN_VCEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CROSS_CHAIN_VCEventResponse typedResponse = new CROSS_CHAIN_VCEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CROSS_CHAIN_VCEventResponse getCROSS_CHAIN_VCEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CROSS_CHAIN_VC_EVENT, log);
        CROSS_CHAIN_VCEventResponse typedResponse = new CROSS_CHAIN_VCEventResponse();
        typedResponse.log = log;
        typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<CROSS_CHAIN_VCEventResponse> cROSS_CHAIN_VCEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCROSS_CHAIN_VCEventFromLog(log));
    }

    public Flowable<CROSS_CHAIN_VCEventResponse> cROSS_CHAIN_VCEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CROSS_CHAIN_VC_EVENT));
        return cROSS_CHAIN_VCEventFlowable(filter);
    }

    public static List<DEBUGEventResponse> getDEBUGEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBUG_EVENT, transactionReceipt);
        ArrayList<DEBUGEventResponse> responses = new ArrayList<DEBUGEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DEBUGEventResponse typedResponse = new DEBUGEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DEBUGEventResponse getDEBUGEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBUG_EVENT, log);
        DEBUGEventResponse typedResponse = new DEBUGEventResponse();
        typedResponse.log = log;
        typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DEBUGEventResponse> dEBUGEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDEBUGEventFromLog(log));
    }

    public Flowable<DEBUGEventResponse> dEBUGEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUG_EVENT));
        return dEBUGEventFlowable(filter);
    }

    public static List<DEBUG_ADDRESSEventResponse> getDEBUG_ADDRESSEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBUG_ADDRESS_EVENT, transactionReceipt);
        ArrayList<DEBUG_ADDRESSEventResponse> responses = new ArrayList<DEBUG_ADDRESSEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DEBUG_ADDRESSEventResponse typedResponse = new DEBUG_ADDRESSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DEBUG_ADDRESSEventResponse getDEBUG_ADDRESSEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBUG_ADDRESS_EVENT, log);
        DEBUG_ADDRESSEventResponse typedResponse = new DEBUG_ADDRESSEventResponse();
        typedResponse.log = log;
        typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DEBUG_ADDRESSEventResponse> dEBUG_ADDRESSEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDEBUG_ADDRESSEventFromLog(log));
    }

    public Flowable<DEBUG_ADDRESSEventResponse> dEBUG_ADDRESSEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUG_ADDRESS_EVENT));
        return dEBUG_ADDRESSEventFlowable(filter);
    }

    public static List<DEBUG_BYTES32EventResponse> getDEBUG_BYTES32Events(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBUG_BYTES32_EVENT, transactionReceipt);
        ArrayList<DEBUG_BYTES32EventResponse> responses = new ArrayList<DEBUG_BYTES32EventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DEBUG_BYTES32EventResponse typedResponse = new DEBUG_BYTES32EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DEBUG_BYTES32EventResponse getDEBUG_BYTES32EventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBUG_BYTES32_EVENT, log);
        DEBUG_BYTES32EventResponse typedResponse = new DEBUG_BYTES32EventResponse();
        typedResponse.log = log;
        typedResponse.param0 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DEBUG_BYTES32EventResponse> dEBUG_BYTES32EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDEBUG_BYTES32EventFromLog(log));
    }

    public Flowable<DEBUG_BYTES32EventResponse> dEBUG_BYTES32EventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUG_BYTES32_EVENT));
        return dEBUG_BYTES32EventFlowable(filter);
    }

    public static List<Erc20TransferEventResponse> getErc20TransferEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ERC20TRANSFER_EVENT, transactionReceipt);
        ArrayList<Erc20TransferEventResponse> responses = new ArrayList<Erc20TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            Erc20TransferEventResponse typedResponse = new Erc20TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Erc20TransferEventResponse getErc20TransferEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ERC20TRANSFER_EVENT, log);
        Erc20TransferEventResponse typedResponse = new Erc20TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<Erc20TransferEventResponse> erc20TransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getErc20TransferEventFromLog(log));
    }

    public Flowable<Erc20TransferEventResponse> erc20TransferEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERC20TRANSFER_EVENT));
        return erc20TransferEventFlowable(filter);
    }

    public static List<Erc721TransferEventResponse> getErc721TransferEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ERC721TRANSFER_EVENT, transactionReceipt);
        ArrayList<Erc721TransferEventResponse> responses = new ArrayList<Erc721TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            Erc721TransferEventResponse typedResponse = new Erc721TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Erc721TransferEventResponse getErc721TransferEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ERC721TRANSFER_EVENT, log);
        Erc721TransferEventResponse typedResponse = new Erc721TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<Erc721TransferEventResponse> erc721TransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getErc721TransferEventFromLog(log));
    }

    public Flowable<Erc721TransferEventResponse> erc721TransferEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERC721TRANSFER_EVENT));
        return erc721TransferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(byte[] param0) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> echo(String json) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc20GetBalance(String account) {
        final Function function = new Function(
                FUNC_ERC20GETBALANCE, 
                Arrays.<Type>asList(new Utf8String(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc20Mint(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20MINT, 
                Arrays.<Type>asList(new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc20MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20MINTVCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc20Transfer(String from, String to,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc20TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20TRANSFERVCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc721Mint(String to) {
        final Function function = new Function(
                FUNC_ERC721MINT, 
                Arrays.<Type>asList(new Utf8String(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc721MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721MINTVCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc721OwnerOf(String from, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721OWNEROF, 
                Arrays.<Type>asList(new Utf8String(from),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc721Transfer(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> erc721TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721TRANSFERVCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getEthSignedMessageHash(String _message) {
        final Function function = new Function(FUNC_GETETHSIGNEDMESSAGEHASH, 
                Arrays.<Type>asList(new Utf8String(_message)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> getProofRange(String json) {
        final Function function = new Function(
                FUNC_GETPROOFRANGE, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getUsedVc(String json) {
        final Function function = new Function(
                FUNC_GETUSEDVC, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> hexStringToBytes32(String hexString) {
        final Function function = new Function(
                FUNC_HEXSTRINGTOBYTES32, 
                Arrays.<Type>asList(new Utf8String(hexString)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> keyFromString(String key) {
        final Function function = new Function(
                FUNC_KEYFROMSTRING, 
                Arrays.<Type>asList(new Utf8String(key)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> removestring(String original, BigInteger start,
            BigInteger end) {
        final Function function = new Function(FUNC_REMOVESTRING, 
                Arrays.<Type>asList(new Utf8String(original),
                new Uint256(start),
                new Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> run(String json) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendVcIfNeed(String json) {
        final Function function = new Function(
                FUNC_SENDVCIFNEED, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> showAll(String json) {
        final Function function = new Function(
                FUNC_SHOWALL, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> test_verify() {
        final Function function = new Function(FUNC_TEST_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> uintToString(BigInteger _number) {
        final Function function = new Function(FUNC_UINTTOSTRING, 
                Arrays.<Type>asList(new Uint256(_number)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> valueByIndex(String json, BigInteger key_index) {
        final Function function = new Function(
                FUNC_VALUEBYINDEX, 
                Arrays.<Type>asList(new Utf8String(json),
                new Uint256(key_index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> valueByKey(String json, String needKey) {
        final Function function = new Function(
                FUNC_VALUEBYKEY, 
                Arrays.<Type>asList(new Utf8String(json),
                new Utf8String(needKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyVc(String vcJson) {
        final Function function = new Function(
                FUNC_VERIFYVC, 
                Arrays.<Type>asList(new Utf8String(vcJson)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static BusiCenterBsc load(String contractAddress, Web3j web3j, Credentials credentials,
                                     BigInteger gasPrice, BigInteger gasLimit) {
        return new BusiCenterBsc(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BusiCenterBsc load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BusiCenterBsc(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BusiCenterBsc load(String contractAddress, Web3j web3j, Credentials credentials,
                                     ContractGasProvider contractGasProvider) {
        return new BusiCenterBsc(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BusiCenterBsc load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BusiCenterBsc(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BusiCenterBsc> deploy(Web3j web3j, Credentials credentials,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BusiCenterBsc.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<BusiCenterBsc> deploy(Web3j web3j, Credentials credentials,
                                                   BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BusiCenterBsc.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<BusiCenterBsc> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BusiCenterBsc.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<BusiCenterBsc> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BusiCenterBsc.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        return BINARY;
    }

    public static class CROSS_CHAIN_VCEventResponse extends BaseEventResponse {
        public String param0;
    }

    public static class DEBUGEventResponse extends BaseEventResponse {
        public String param0;
    }

    public static class DEBUG_ADDRESSEventResponse extends BaseEventResponse {
        public String param0;
    }

    public static class DEBUG_BYTES32EventResponse extends BaseEventResponse {
        public byte[] param0;
    }

    public static class Erc20TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class Erc721TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
