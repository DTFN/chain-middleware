package com.lingshu.bsp.front.rpcapi.ls.contract;

import com.lingshu.chain.sdk.client.IClient;
import com.lingshu.chain.sdk.codec.datatypes.Address;
import com.lingshu.chain.sdk.codec.datatypes.Bool;
import com.lingshu.chain.sdk.codec.datatypes.Event;
import com.lingshu.chain.sdk.codec.datatypes.Function;
import com.lingshu.chain.sdk.codec.datatypes.Type;
import com.lingshu.chain.sdk.codec.datatypes.TypeReference;
import com.lingshu.chain.sdk.codec.datatypes.Utf8String;
import com.lingshu.chain.sdk.codec.datatypes.generated.Bytes32;
import com.lingshu.chain.sdk.codec.datatypes.generated.Uint256;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import com.lingshu.chain.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import com.lingshu.chain.sdk.contract.Contract;
import com.lingshu.chain.sdk.crypto.CryptoSuite;
import com.lingshu.chain.sdk.crypto.key.CryptoKeyPair;
import com.lingshu.chain.sdk.evtsub.EvtSubCallback;
import com.lingshu.chain.sdk.model.CryptoType;
import com.lingshu.chain.sdk.model.TransactionCallback;
import com.lingshu.chain.sdk.model.TransactionReceipt;
import com.lingshu.chain.sdk.tx.common.VmTypeEnum;
import com.lingshu.chain.sdk.tx.common.exception.ContractException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class BusiNormalLs extends Contract {
    public static final String FUNC_VALUE_BY_KEY = "valueByKey";

    public static final String FUNC_VERIFY_VC = "verifyVc";

    public static final String FUNC_ERC20_TRANSFER = "erc20Transfer";

    public static final String FUNC_GET_USED_VC = "getUsedVc";

    public static final String FUNC_VALUE_BY_INDEX = "valueByIndex";

    public static final String FUNC_REMOVESTRING = "removestring";

    public static final String FUNC_ERC20_GET_BALANCE = "erc20GetBalance";

    public static final String FUNC_BALANCE_OF = "balanceOf";

    public static final String FUNC_ERC20_MINT = "erc20Mint";

    public static final String FUNC_ERC20_TRANSFER_VCS = "erc20TransferVcs";

    public static final String FUNC_ERC721_MINT = "erc721Mint";

    public static final String FUNC_HEX_STRING_TO_BYTES32 = "hexStringToBytes32";

    public static final String FUNC_ERC721_TRANSFER = "erc721Transfer";

    public static final String FUNC_RUN = "run";

    public static final String FUNC_GET_ETH_SIGNED_MESSAGE_HASH = "getEthSignedMessageHash";

    public static final String FUNC_SEND_VC_IF_NEED = "sendVcIfNeed";

    public static final String FUNC_KEY_FROM_STRING = "keyFromString";

    public static final String FUNC_ERC20_MINT_VCS = "erc20MintVcs";

    public static final String FUNC_ERC721_TRANSFER_VCS = "erc721TransferVcs";

    public static final String FUNC_TEST_VERIFY = "test_verify";

    public static final String FUNC_ERC721_MINT_VCS = "erc721MintVcs";

    public static final String FUNC_SHOW_ALL = "showAll";

    public static final String FUNC_GET_PROOF_RANGE = "getProofRange";

    public static final String FUNC_UINT_TO_STRING = "uintToString";

    public static final String FUNC_ERC721_OWNER_OF = "erc721OwnerOf";

    public static final String FUNC_ECHO = "echo";

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"},{\"name\":\"needKey\",\"type\":\"string\"}],\"name\":\"valueByKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcJson\",\"type\":\"string\"}],\"name\":\"verifyVc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"erc20Transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"getUsedVc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"},{\"name\":\"key_index\",\"type\":\"uint256\"}],\"name\":\"valueByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"original\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"removestring\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"erc20GetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"erc20Mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc20TransferVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"string\"}],\"name\":\"erc721Mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hexString\",\"type\":\"string\"}],\"name\":\"hexStringToBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"run\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"sendVcIfNeed\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyFromString\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc20MintVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc721TransferVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test_verify\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vcs\",\"type\":\"string\"}],\"name\":\"erc721MintVcs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"showAll\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"getProofRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721OwnerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"name\":\"echo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"DEBUG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"DEBUG_ADDRESS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"DEBUG_BYTES32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"CROSS_CHAIN_VC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Erc20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Erc721Transfer\",\"type\":\"event\"}]"};

    public static final String ABI = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", ABI_ARRAY);

    public static final String[] BINARY_ARRAY = {"","0101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050610f68565b5060008690505b84518110156110d857848181518110151561103a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838381518110151561109357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050611023565b50819450505050509392505050565b60008060006110f5846119de565b8152602001908152602001600020549050919050565b60006020528060005260406000206000915090505481565b80600080611130856119de565b8152602001908152602001600020600082825401925050819055507fa0b1ffbc8b2c4c04f821bbc137802807b3f9c65238daa32d43116e9fb32a7948828260405161117c929190614d8b565b60405180910390a15050565b606061119382610d16565b905060606111d6826040805190810160405280601181526020017f63726564656e7469616c5375626a656374000000000000000000000000000000815250610710565b90506060611219826040805190810160405280600b81526020017f66756e635f706172616d73000000000000000000000000000000000000000000815250610710565b9050606061125c826040805190810160405280600481526020017f66726f6d00000000000000000000000000000000000000000000000000000000815250610710565b9050606061129f836040805190810160405280600281526020017f746f000000000000000000000000000000000000000000000000000000000000815250610710565b905060606112e2846040805190810160405280600681526020017f616d6f756e740000000000000000000000000000000000000000000000000000815250610710565b905060006112ef82613476565b90506112fc848483610c1f565b50611306886118c6565b505050505050505050565b600080600254905060006001026001600083815260200190815260200160002054141515611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b90614ccb565b60405180910390fd5b61137d836119de565b60016000838152602001908152602001600020819055506002600081548092919060010191905055507f81a6873436433147d6d0ea39b23123e0d3d3c41c3eb8f4ce88f82bde2533472083826040516113d7929190614d8b565b60405180910390a180915050919050565b60006042825114156114105761140961140483600260426130af565b6113e8565b90506115ce565b60408251141515611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d90614ceb565b60405180910390fd5b6060829050600081519050600080600090505b828110156115c6576000848281518110151561148157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490506000856001840181518110151561150457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050600061157f8261348a565b600461158a8561348a565b60ff169060020a0217905060086002858115156115a357fe5b040260f8038160ff169060020a0260010285179450505050600281019050611469565b508093505050505b919050565b6115dc836119de565b6001600083815260200190815260200160002054141515611632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162990614d0b565b60405180910390fd5b61163b826119de565b60016000838152602001908152602001600020819055507f81a6873436433147d6d0ea39b23123e0d3d3c41c3eb8f4ce88f82bde2533472083838360405161168593929190614c86565b60405180910390a1505050565b606061171783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040805190810160405280600681526020017f6f726967696e0000000000000000000000000000000000000000000000000000815250610710565b9050606061179e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040805190810160405280600681526020017f7461726765740000000000000000000000000000000000000000000000000000815250610710565b90506117a982610802565b6117b281610802565b50505050565b6000808251905060606117ca826120ca565b9050808460405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310151561182e5780518252602082019150602081019050602083039250611809565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515611881578051825260208201915060208101905060208303925061185c565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012092505050919050565b606080611908836040805190810160405280600681526020017f6f726967696e0000000000000000000000000000000000000000000000000000815250610710565b9050606061194b846040805190810160405280600681526020017f7461726765740000000000000000000000000000000000000000000000000000815250610710565b905060006119698360206040519081016040528060008152506131b0565b141580156119915750600061198e8260206040519081016040528060008152506131b0565b14155b156119d75761199f81610802565b7f38a465f8730268ab3b88e7551b94e6dd2c52422a9ff358c93527c383ef9ae85c816040516119ce9190614c64565b60405180910390a15b5050919050565b6000816040516020018082805190602001908083835b602083101515611a1957805182526020820191506020810190506020830392506119f4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b6060611a6682610d16565b90506060611aa9826040805190810160405280601181526020017f63726564656e7469616c5375626a656374000000000000000000000000000000815250610710565b90506060611aec826040805190810160405280600b81526020017f66756e635f706172616d73000000000000000000000000000000000000000000815250610710565b90506060611b2f826040805190810160405280600281526020017f746f000000000000000000000000000000000000000000000000000000000000815250610710565b90506060611b72836040805190810160405280600681526020017f616d6f756e740000000000000000000000000000000000000000000000000000815250610710565b90506000611b7f82613476565b9050611b8b8382611123565b611b94876118c6565b5050505050505050565b6060611ba982610d16565b90506060611bec826040805190810160405280601181526020017f63726564656e7469616c5375626a656374000000000000000000000000000000815250610710565b90506060611c2f826040805190810160405280600b81526020017f66756e635f706172616d73000000000000000000000000000000000000000000815250610710565b90506060611c72826040805190810160405280600481526020017f66726f6d00000000000000000000000000000000000000000000000000000000815250610710565b90506060611cb5836040805190810160405280600281526020017f746f000000000000000000000000000000000000000000000000000000000000815250610710565b90506060611cf8846040805190810160405280600781526020017f746f6b656e496400000000000000000000000000000000000000000000000000815250610710565b90506000611d0582613476565b9050611d128484836115d3565b611d1b886118c6565b505050505050505050565b6000807f478ec551ff5eb934d827f6e3d2827ba63e58885bbeaf76820090c8e16d836bc6905060007f815186624fffdc410a3d97e0762b6d2405883836a5e55349be2a4e9fe8ee7246905060007f2243ca645c8397cd0f389d5fc721f586bc76407a8d8d70375ab4eedf7b60ef3390506000601c905060018482858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611df9573d6000803e3d6000fd5b5050506020604051035194505050505090565b6060611e1782610d16565b90506060611e5a826040805190810160405280601181526020017f63726564656e7469616c5375626a656374000000000000000000000000000000815250610710565b90506060611e9d826040805190810160405280600b81526020017f66756e635f706172616d73000000000000000000000000000000000000000000815250610710565b90506060611ee0826040805190810160405280600281526020017f746f000000000000000000000000000000000000000000000000000000000000815250610710565b9050611eeb81611311565b50611ef5856118c6565b505050505050565b6060600060606000611f108560c86122a2565b80935081945082955050505060008090505b8251811015611faa57611f33614569565b8382815181101515611f4157fe5b9060200190602002015190506060611f6288836020015184606001516130af565b90507ff3d39f15c009ad599c03bbc459984a05ea8f344958338cf5496ae28e5ff17eaa81604051611f939190614c64565b60405180910390a150508080600101915050611f22565b50505050919050565b600080600060606000611fc78660c86122a2565b80935081945082955050505060008090505b82","518110156120b357611fea614569565b8382815181101515611ff857fe5b906020019060200201519050606061201989836020015184606001516130af565b9050600061205c826040805190810160405280600581526020017f70726f6f660000000000000000000000000000000000000000000000000000008152506131b0565b14156120a45761206a614569565b856001850181518110151561207b57fe5b9060200190602002015190506002836020015103816060015198509850505050505050506120c5565b50508080600101915050611fd9565b50600080819150809050945094505050505b915091565b60606000821415612112576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612221565b600082905060005b600082141515612140578080600101915050600a8281151561213857fe5b04915061211a565b6060816040519080825280601f01601f1916602001820160405280156121755781602001600182028038833980820191505090505b50905060006001830390508593505b60008414151561221957600a8481151561219a57fe5b066030017f0100000000000000000000000000000000000000000000000000000000000000028282806001900393508151811015156121d557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8481151561221157fe5b049350612184565b819450505050505b919050565b60008060016000848152602001908152602001600020549050612248846119de565b81141561225957600191505061225f565b60009150505b92915050565b7ff3d39f15c009ad599c03bbc459984a05ea8f344958338cf5496ae28e5ff17eaa8282604051612296929190614c40565b60405180910390a15050565b600060606000606085905060006122b76145b2565b6122c087613544565b80965081925050506000808260200151905060006122dc614569565b5b8651856000015110156130925760008786600001518151811015156122fe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000029050607b7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806123e25750605b7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561252f5783806001019450506123f9868b6135e2565b80935081985050508615156124235760038a60008090509a509a509a5050505050505050506130a8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86604001511415156124825789866040015181518110151561246257fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b607b7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146124d55760026124d8565b60015b826000019060048111156124e857fe5b908160048111156124f557fe5b815250508560000151826020018181525050600182604001901515908115158152505060018660200151038660400181815250505061307d565b607d7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806125c65750605d7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15612820576000607d7f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612620576002612623565b60015b90506000809050600188602001510394505b600085101515612742578b8581518110151561264d57fe5b9060200190602002015193508360400151801561266c57508360800151155b156127345781600481111561267d57fe5b8460000151600481111561268d57fe5b1415156126b15760018c60008090509c509c509c50505050505050505050506130a8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88604001818152505060018860000151018c868151811015156126f157fe5b90602001906020020151606001818152505060018c8681518110151561271357fe5b90602001906020020151608001901515908115158152505060019050612742565b848060019003955050612635565b8015156127665760018c60008090509c509c509c50505050505050505050506130a8565b5b60008511156127bf578b8581518110151561277e57fe5b9060200190602002015193508360400151801561279d57508360800151155b156127b157848860400181815250506127bf565b848060019003955050612767565b6000851415612818578b858151811015156127d657fe5b906020019060200201519350836040015180156127f557508360800151155b1561281757846fffffffffffffffffffffffffffffffff168860400181815250505b5b50505061307d565b7f2200000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561290857612875868b8a6136b4565b945060008514151561289b57848a60008090509a509a509a5050505050505050506130a8565b83806001019450507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660400151141515612902578986604001518151811015156128e257fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b5061307d565b7f2000000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061299c575060117f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806129eb575060127f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612a3a575060147f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15612a45575061307d565b7f3a00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612aa65760018660200151038660400181815250505061307d565b7f2c00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612c97577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff866040015114158015612b5a575060026004811115612b2c57fe5b8a8760400151815181101515612b3e57fe5b90602001906020020151600001516004811115612b5757fe5b14155b8015612b9c575060016004811115612b6e57fe5b8a8760400151815181101515612b8057fe5b90602001906020020151600001516004811115612b9957fe5b14155b15612c9157600186602001510392505b600083101515612c905760026004811115612bc357fe5b8a84815181101515612bd157fe5b90602001906020020151600001516004811115612bea57fe5b1480612c27575060016004811115612bfe57fe5b8a84815181101515612c0c57fe5b90602001906020020151600001516004811115612c2557fe5b145b15612c82578983815181101515612c3a57fe5b90602001906020020151604001518015612c6d57508983815181101515612c5d57fe5b9060200190602002015160800151155b15612c815782866040018181525050612c90565b5b828060019003935050612bac565b5b5061307d565b7f3000000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015612d2b57507f3900000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b80612d7757507f2d00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612dc357507f6600000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612e0f57507f7400000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612e5b57507f6e00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15612fc1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660400151141515612f2357898660400151815181101515612e9f57fe5b90602001906020020151915060016004811115612eb857fe5b82600001516004811115612ec857fe5b1480612f02575060036004811115612edc57fe5b82600001516004811115612eec57fe5b148015612f01575060008260a0015160ff1614155b5b15612f225760018a60008090509a509a509a5050505050505050506130a8565b5b612f2e868b8a613dbf565b9450600085141515612f5457848a60008090509a509a509a5050505050505050506130a8565b83806001019450507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660400151141515612fbb57898660400151815181101515612f9b57fe5b9060200190602002015160a001805180919060010160ff1660ff16815250505b5061307d565b60207f01000000000000000000000000000000000000000000","","","6c6578706572696d656e74616cf50037"};

    public static final String BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","0000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561305b5750607e7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1561307b5760018a60008090509a509a509a5050505050505050506130a8565b505b846000018051809190600101815250506122dd565b6000898660200151995099509950505050505050505b9250925092565b60608084905060608484036040519080825280601f01601f1916602001820160405280156130ec5781602001600182028038833980820191505090505b50905060008590505b848110156131a357828181518110151561310b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028287830381518110151561316657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506130f5565b5080925050509392505050565b60006131bd826000614178565b9050919050565b60006060839050606083905060008251905080825110156131e457815190505b60008090505b8181101561343057828181518110151561320057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110151561327b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561331a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945050505050613484565b828181518110151561332857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811015156133a357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161115613423576001945050505050613484565b80806001019150506131ea565b50815183511015613466577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050613484565b81518351111561347c5760019350505050613484565b600093505050505b92915050565b600060308260ff16101580156134a4575060398260ff1611155b156134b45760308203905061353f565b60418260ff16101580156134cc575060468260ff1611155b156134dc5760378203905061353f565b60618260ff16101580156134f4575060668260ff1611155b156135045760578203905061353f565b6040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161353690614dae565b60405180910390fd5b919050565b61354c6145b2565b60606135566145b2565b60606040519081016040528060008152602001600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81525090506060846040519080825280602002602001820160405280156135d257816020015b6135bf6145d4565b8152602001906001900390816135b75790505b5090508181935093505050915091565b60006135ec614569565b8251846020015110151561362457600083600185510381518110151561360e57fe5b90602001906020020151809050915091506136ad565b61362c614569565b60c0604051908101604052806000600481111561364557fe5b81526020016000815260200160001515815260200160008152602001600015158152602001600060ff1681525090508084866020015181518110151561368757fe5b906020019060200201819052508460200180518091906001018152505060018192509250505b9250929050565b6000808460000151905060006136c8614569565b866000018051809190600101815250505b845187600001511015613da65760008588600001518151811015156136fa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000290507f2200000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156137e25761379b88886135e2565b80935081945050508215156137c157838860000181815250506003945050505050613db8565b6137d5826003600187018b600001516144f8565b6000945050505050613db8565b605c817f0100000000000000000000000000000000000000000000000000000000000000900460ff1614801561381f575085516001896000015101105b15613d8f57876000018051809190600101815250507f220000000000000000000000000000000000000000000000000000000000000086896000015181518110151561386757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061397d57507f2f0000000000000000000000000000000000000000000000000000000000000086896000015181518110151561390e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613a2557507f5c000000000000000000000000000000000000000000000000000000000000008689600001518151811015156139b657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613acd57507f6600000000000000000000000000000000000000000000000000000000000000868960000151815181101515613a5e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613b7557507f7200000000000000000000000000000000000000000000000000000000000000868960000151815181101515613b0657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613c1d57507f6e00000000000000000000000000000000000000000000000000000000000000868960000151815181101515613bae57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613cc557507f6200000000000000000000000000000000000000000000000000000000000000868960000151815181101515613c5657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613d6d57507f7400000000000000000000000000000000000000000000000000000000000000868960000151815181101515613cfe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15613d785750613d91565b838860000181815250506001945050505050613db8565b505b866000018051809190600101815250506136d9565b82876000018181525050600293505050505b9392505050565b60008060009050600085600001519050600080613dda614569565b5b8651896000015110156140f557868960000151815181101515613dfa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000292507f2000000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480613ed857507f0900000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613f2457507f0a00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613f7057507f0d00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613fbc57507f2c00000000000000000000000000000000000000000000000000000000000000837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061400b5750607d7f010000000000000000000000000000000000000000","","6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = com.lingshu.chain.sdk.codegen.util.GeneratorUtil.joinAll("", SM_BINARY_ARRAY);

    public static final Event DEBUG_EVENT = new Event("DEBUG", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUG_ADDRESS_EVENT = new Event("DEBUG_ADDRESS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DEBUG_BYTES32_EVENT = new Event("DEBUG_BYTES32", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event CROSS_CHAIN_VC_EVENT = new Event("CROSS_CHAIN_VC", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event ERC20_TRANSFER_EVENT = new Event("Erc20Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ERC721_TRANSFER_EVENT = new Event("Erc721Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected BusiNormalLs(String contractAddress, IClient client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    protected BusiNormalLs(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential, vmType);
    }

    protected BusiNormalLs(String contractAddress, IClient client, CryptoKeyPair credential, String binary) {
        super(binary, contractAddress, client, credential);
    }

    protected BusiNormalLs(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary) {
        super(binary, contractAddress, client, credential, vmType);
    }

    public static BusiNormalLs deploy(IClient client, CryptoKeyPair credential) throws ContractException {
        return deploy(BusiNormalLs.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static BusiNormalLs deploy(IClient client, CryptoKeyPair credential, String binary) throws ContractException {
        return deploy(BusiNormalLs.class, client, credential, binary, "");
    }

    public static BusiNormalLs deploy(IClient client, CryptoKeyPair credential, VmTypeEnum vmType) throws ContractException {
        return deploy(BusiNormalLs.class, client, credential, getBinary(client.getCryptoSuite()), "", vmType);
    }

    public static BusiNormalLs deploy(IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary) throws ContractException {
        return deploy(BusiNormalLs.class, client, credential, binary, "", vmType);
    }

    public static BusiNormalLs load(String contractAddress, IClient client, CryptoKeyPair credential) {
        return new BusiNormalLs(contractAddress, client, credential);
    }

    public static BusiNormalLs load(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType) {
        return new BusiNormalLs(contractAddress, client, credential, vmType);
    }

    public static BusiNormalLs load(String contractAddress, IClient client, CryptoKeyPair credential, String binary) {
        return new BusiNormalLs(contractAddress, client, credential, binary);
    }

    public static BusiNormalLs load(String contractAddress, IClient client, CryptoKeyPair credential, VmTypeEnum vmType, String binary) {
        return new BusiNormalLs(contractAddress, client, credential, vmType, binary);
    }

    public TransactionReceipt valueByKey(String json, String needKey) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new Utf8String(json),
                new Utf8String(needKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] valueByKey(String json, String needKey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new Utf8String(json),
                new Utf8String(needKey)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForValueByKey(String json, String needKey) {
        final Function function = new Function(
                FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(new Utf8String(json),
                new Utf8String(needKey)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getValueByKeyInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<String> getValueByKeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VALUE_BY_KEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt verifyVc(String vcJson) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new Utf8String(vcJson)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verifyVc(String vcJson, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new Utf8String(vcJson)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForVerifyVc(String vcJson) {
        final Function function = new Function(
                FUNC_VERIFY_VC, 
                Arrays.<Type>asList(new Utf8String(vcJson)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getVerifyVcInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFY_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc20Transfer(String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20Transfer(String from, String to, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20Transfer(String from, String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getErc20TransferInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getErc20TransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC20_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt getUsedVc(String json) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public TransactionReceipt vcCal(String funcName, String vc) {
        final Function function = new Function(
                funcName,
                Arrays.<Type>asList(new Utf8String(vc)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getUsedVc(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForGetUsedVc(String json) {
        final Function function = new Function(
                FUNC_GET_USED_VC, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetUsedVcInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GET_USED_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getGetUsedVcOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GET_USED_VC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt valueByIndex(String json, BigInteger key_index) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new Utf8String(json),
                new Uint256(key_index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] valueByIndex(String json, BigInteger key_index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new Utf8String(json),
                new Uint256(key_index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForValueByIndex(String json, BigInteger key_index) {
        final Function function = new Function(
                FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(new Utf8String(json),
                new Uint256(key_index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getValueByIndexInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<String> getValueByIndexOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VALUE_BY_INDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String removestring(String original, BigInteger start, BigInteger end) throws ContractException {
        final Function function = new Function(FUNC_REMOVESTRING, 
                Arrays.<Type>asList(new Utf8String(original),
                new Uint256(start),
                new Uint256(end)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt erc20GetBalance(String account) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new Utf8String(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20GetBalance(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new Utf8String(account)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20GetBalance(String account) {
        final Function function = new Function(
                FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(new Utf8String(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20GetBalanceInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getErc20GetBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC20_GET_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger balanceOf(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCE_OF, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt erc20Mint(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20Mint(String to, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20Mint(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_ERC20_MINT, 
                Arrays.<Type>asList(new Utf8String(to),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getErc20MintInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt erc20TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20TransferVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20TransferVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_TRANSFER_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc721Mint(String to) {
        final Function function = new Function(
                FUNC_ERC721_MINT, 
                Arrays.<Type>asList(new Utf8String(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc721Mint(String to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC721_MINT, 
                Arrays.<Type>asList(new Utf8String(to)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc721Mint(String to) {
        final Function function = new Function(
                FUNC_ERC721_MINT, 
                Arrays.<Type>asList(new Utf8String(to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc721MintInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC721_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getErc721MintOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC721_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt hexStringToBytes32(String hexString) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new Utf8String(hexString)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] hexStringToBytes32(String hexString, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new Utf8String(hexString)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForHexStringToBytes32(String hexString) {
        final Function function = new Function(
                FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(new Utf8String(hexString)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getHexStringToBytes32Input(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getHexStringToBytes32Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HEX_STRING_TO_BYTES32, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc721Transfer(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc721Transfer(String from, String to, BigInteger tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc721Transfer(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from),
                new Utf8String(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getErc721TransferInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC721_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt run(String json) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] run(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForRun(String json) {
        final Function function = new Function(
                FUNC_RUN, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRunInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RUN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public byte[] getEthSignedMessageHash(String _message) throws ContractException {
        final Function function = new Function(FUNC_GET_ETH_SIGNED_MESSAGE_HASH, 
                Arrays.<Type>asList(new Utf8String(_message)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt sendVcIfNeed(String json) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendVcIfNeed(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForSendVcIfNeed(String json) {
        final Function function = new Function(
                FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSendVcIfNeedInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getSendVcIfNeedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SEND_VC_IF_NEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt keyFromString(String key) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new Utf8String(key)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] keyFromString(String key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new Utf8String(key)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForKeyFromString(String key) {
        final Function function = new Function(
                FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(new Utf8String(key)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getKeyFromStringInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getKeyFromStringOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_KEY_FROM_STRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc20MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc20MintVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc20MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc20MintVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC20_MINT_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt erc721TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc721TransferVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc721TransferVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721_TRANSFER_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc721TransferVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC721_TRANSFER_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String test_verify() throws ContractException {
        final Function function = new Function(FUNC_TEST_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt erc721MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc721MintVcs(String vcs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC721_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc721MintVcs(String vcs) {
        final Function function = new Function(
                FUNC_ERC721_MINT_VCS, 
                Arrays.<Type>asList(new Utf8String(vcs)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getErc721MintVcsInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC721_MINT_VCS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt showAll(String json) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] showAll(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForShowAll(String json) {
        final Function function = new Function(
                FUNC_SHOW_ALL, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getShowAllInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SHOW_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getShowAllOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SHOW_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt getProofRange(String json) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getProofRange(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForGetProofRange(String json) {
        final Function function = new Function(
                FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetProofRangeInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getGetProofRangeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GET_PROOF_RANGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String uintToString(BigInteger _number) throws ContractException {
        final Function function = new Function(FUNC_UINT_TO_STRING, 
                Arrays.<Type>asList(new Uint256(_number)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt erc721OwnerOf(String from, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721_OWNER_OF, 
                Arrays.<Type>asList(new Utf8String(from),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] erc721OwnerOf(String from, BigInteger tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ERC721_OWNER_OF, 
                Arrays.<Type>asList(new Utf8String(from),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForErc721OwnerOf(String from, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ERC721_OWNER_OF, 
                Arrays.<Type>asList(new Utf8String(from),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getErc721OwnerOfInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ERC721_OWNER_OF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getErc721OwnerOfOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ERC721_OWNER_OF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt echo(String json) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] echo(String json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTxForEcho(String json) {
        final Function function = new Function(
                FUNC_ECHO, 
                Arrays.<Type>asList(new Utf8String(json)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getEchoInput(TransactionReceipt txReceipt) {
        String data = txReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ECHO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = funcReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List<DEBUGEvtResp> getDEBUGEvents(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_EVENT, txReceipt);
        ArrayList<DEBUGEvtResp> responseList = new ArrayList<DEBUGEvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            DEBUGEvtResp evtResp = new DEBUGEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUGParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUGEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUGEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DEBUG_ADDRESSEvtResp> getDEBUG_ADDRESSEvents(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_ADDRESS_EVENT, txReceipt);
        ArrayList<DEBUG_ADDRESSEvtResp> responseList = new ArrayList<DEBUG_ADDRESSEvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            DEBUG_ADDRESSEvtResp evtResp = new DEBUG_ADDRESSEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUG_ADDRESSParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUG_ADDRESSEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_ADDRESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUG_ADDRESSEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_ADDRESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DEBUG_BYTES32EvtResp> getDEBUG_BYTES32Events(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_BYTES32_EVENT, txReceipt);
        ArrayList<DEBUG_BYTES32EvtResp> responseList = new ArrayList<DEBUG_BYTES32EvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            DEBUG_BYTES32EvtResp evtResp = new DEBUG_BYTES32EvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.DEBUG_BYTES32Param0 = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeDEBUG_BYTES32Event(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_BYTES32_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDEBUG_BYTES32Event(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(DEBUG_BYTES32_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CROSS_CHAIN_VCEvtResp> getCROSS_CHAIN_VCEvents(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(CROSS_CHAIN_VC_EVENT, txReceipt);
        ArrayList<CROSS_CHAIN_VCEvtResp> responseList = new ArrayList<CROSS_CHAIN_VCEvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            CROSS_CHAIN_VCEvtResp evtResp = new CROSS_CHAIN_VCEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.CROSS_CHAIN_VCParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeCROSS_CHAIN_VCEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CROSS_CHAIN_VC_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCROSS_CHAIN_VCEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(CROSS_CHAIN_VC_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<Erc20TransferEvtResp> getErc20TransferEvents(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(ERC20_TRANSFER_EVENT, txReceipt);
        ArrayList<Erc20TransferEvtResp> responseList = new ArrayList<Erc20TransferEvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            Erc20TransferEvtResp evtResp = new Erc20TransferEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            evtResp.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            evtResp.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeErc20TransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC20_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeErc20TransferEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC20_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<Erc721TransferEvtResp> getErc721TransferEvents(TransactionReceipt txReceipt) {
        List<EvtValuesWithLog> valueList = extractEventParametersWithLog(ERC721_TRANSFER_EVENT, txReceipt);
        ArrayList<Erc721TransferEvtResp> responseList = new ArrayList<Erc721TransferEvtResp>(valueList.size());
        for (EvtValuesWithLog eventValues : valueList) {
            Erc721TransferEvtResp evtResp = new Erc721TransferEvtResp();
            evtResp.log = eventValues.getLog();
            evtResp.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            evtResp.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            evtResp.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responseList.add(evtResp);
        }
        return responseList;
    }

    public void subscribeErc721TransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC721_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeErc721TransferEvent(EvtSubCallback callback) {
        String topic0 = evtEncoder.encode(ERC721_TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoType() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static class DEBUGEvtResp {
        public TransactionReceipt.Logs log;

        public String DEBUGParam0;
    }

    public static class DEBUG_ADDRESSEvtResp {
        public TransactionReceipt.Logs log;

        public String DEBUG_ADDRESSParam0;
    }

    public static class DEBUG_BYTES32EvtResp {
        public TransactionReceipt.Logs log;

        public byte[] DEBUG_BYTES32Param0;
    }

    public static class CROSS_CHAIN_VCEvtResp {
        public TransactionReceipt.Logs log;

        public String CROSS_CHAIN_VCParam0;
    }

    public static class Erc20TransferEvtResp {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class Erc721TransferEvtResp {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
